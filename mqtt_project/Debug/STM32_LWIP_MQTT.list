
STM32_LWIP_MQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011890  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003584  08011a20  08011a20  00021a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014fa4  08014fa4  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08014fa4  08014fa4  00024fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014fac  08014fac  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014fac  08014fac  00024fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014fb0  08014fb0  00024fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08014fb4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068f4  20000078  0801502c  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000696c  0801502c  0003696c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019866  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ceb  00000000  00000000  0004990e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  0004e600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  0004f830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c9c6  00000000  00000000  00050a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021694  00000000  00000000  0007d3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de1ae  00000000  00000000  0009ea82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017cc30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005360  00000000  00000000  0017cc80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011a08 	.word	0x08011a08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08011a08 	.word	0x08011a08

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fc9c 	bl	8000ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f868 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f922 	bl	80007f8 <MX_GPIO_Init>
  MX_LWIP_Init();
 80005b4:	f003 f92c 	bl	8003810 <MX_LWIP_Init>
  MX_ADC1_Init();
 80005b8:	f000 f8cc 	bl	8000754 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  client = mqtt_client_new();
 80005bc:	f005 f87a 	bl	80056b4 <mqtt_client_new>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a25      	ldr	r2, [pc, #148]	; (8000658 <main+0xb4>)
 80005c4:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 80005c6:	f003 fa55 	bl	8003a74 <MX_LWIP_Process>

	  HAL_Delay(1);
 80005ca:	2001      	movs	r0, #1
 80005cc:	f000 fcfc 	bl	8000fc8 <HAL_Delay>

	  cnt++;
 80005d0:	4b22      	ldr	r3, [pc, #136]	; (800065c <main+0xb8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a21      	ldr	r2, [pc, #132]	; (800065c <main+0xb8>)
 80005d8:	6013      	str	r3, [r2, #0]
	  if(cnt>1000)
 80005da:	4b20      	ldr	r3, [pc, #128]	; (800065c <main+0xb8>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005e2:	ddf0      	ble.n	80005c6 <main+0x22>
	  {
		  cnt = 0;
 80005e4:	4b1d      	ldr	r3, [pc, #116]	; (800065c <main+0xb8>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
		  sprintf(buffer,"Hello from STM32 %d",i++);
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <main+0xbc>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	1c5a      	adds	r2, r3, #1
 80005f0:	491b      	ldr	r1, [pc, #108]	; (8000660 <main+0xbc>)
 80005f2:	600a      	str	r2, [r1, #0]
 80005f4:	461a      	mov	r2, r3
 80005f6:	491b      	ldr	r1, [pc, #108]	; (8000664 <main+0xc0>)
 80005f8:	481b      	ldr	r0, [pc, #108]	; (8000668 <main+0xc4>)
 80005fa:	f010 f843 	bl	8010684 <siprintf>
		  example_do_connect(client);
 80005fe:	4b16      	ldr	r3, [pc, #88]	; (8000658 <main+0xb4>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	f000 fa5c 	bl	8000ac0 <example_do_connect>
		  example_publish(client, "STM32F4-PUB" , buffer);
 8000608:	4b13      	ldr	r3, [pc, #76]	; (8000658 <main+0xb4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a16      	ldr	r2, [pc, #88]	; (8000668 <main+0xc4>)
 800060e:	4917      	ldr	r1, [pc, #92]	; (800066c <main+0xc8>)
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fa8d 	bl	8000b30 <example_publish>

		  HAL_ADC_Start(&hadc1);
 8000616:	4816      	ldr	r0, [pc, #88]	; (8000670 <main+0xcc>)
 8000618:	f000 fd3e 	bl	8001098 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 800061c:	210a      	movs	r1, #10
 800061e:	4814      	ldr	r0, [pc, #80]	; (8000670 <main+0xcc>)
 8000620:	f000 fe33 	bl	800128a <HAL_ADC_PollForConversion>
		  adc_value = HAL_ADC_GetValue(&hadc1);
 8000624:	4812      	ldr	r0, [pc, #72]	; (8000670 <main+0xcc>)
 8000626:	f000 feb4 	bl	8001392 <HAL_ADC_GetValue>
 800062a:	4603      	mov	r3, r0
 800062c:	b21a      	sxth	r2, r3
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <main+0xd0>)
 8000630:	801a      	strh	r2, [r3, #0]
		  HAL_ADC_Stop(&hadc1);
 8000632:	480f      	ldr	r0, [pc, #60]	; (8000670 <main+0xcc>)
 8000634:	f000 fdf6 	bl	8001224 <HAL_ADC_Stop>
		  sprintf(buffer,"%d\0",adc_value);
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <main+0xd0>)
 800063a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800063e:	461a      	mov	r2, r3
 8000640:	490d      	ldr	r1, [pc, #52]	; (8000678 <main+0xd4>)
 8000642:	4809      	ldr	r0, [pc, #36]	; (8000668 <main+0xc4>)
 8000644:	f010 f81e 	bl	8010684 <siprintf>
		  example_publish(client, "STM32F4-ADC" , buffer);
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <main+0xb4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a06      	ldr	r2, [pc, #24]	; (8000668 <main+0xc4>)
 800064e:	490b      	ldr	r1, [pc, #44]	; (800067c <main+0xd8>)
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fa6d 	bl	8000b30 <example_publish>
	  MX_LWIP_Process();
 8000656:	e7b6      	b.n	80005c6 <main+0x22>
 8000658:	200000dc 	.word	0x200000dc
 800065c:	200000e0 	.word	0x200000e0
 8000660:	200000e4 	.word	0x200000e4
 8000664:	08011a20 	.word	0x08011a20
 8000668:	200000e8 	.word	0x200000e8
 800066c:	08011a34 	.word	0x08011a34
 8000670:	20000094 	.word	0x20000094
 8000674:	2000014c 	.word	0x2000014c
 8000678:	08011a40 	.word	0x08011a40
 800067c:	08011a44 	.word	0x08011a44

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	; 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2230      	movs	r2, #48	; 0x30
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f00f ff24 	bl	80104dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	4b28      	ldr	r3, [pc, #160]	; (800074c <SystemClock_Config+0xcc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	4a27      	ldr	r2, [pc, #156]	; (800074c <SystemClock_Config+0xcc>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	; 0x40
 80006b4:	4b25      	ldr	r3, [pc, #148]	; (800074c <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b22      	ldr	r3, [pc, #136]	; (8000750 <SystemClock_Config+0xd0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a21      	ldr	r2, [pc, #132]	; (8000750 <SystemClock_Config+0xd0>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006dc:	2301      	movs	r3, #1
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006f4:	23a8      	movs	r3, #168	; 0xa8
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f002 fc1d 	bl	8002f44 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000710:	f000 fa42 	bl	8000b98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2302      	movs	r3, #2
 800071a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000720:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000724:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2105      	movs	r1, #5
 8000732:	4618      	mov	r0, r3
 8000734:	f002 fe74 	bl	8003420 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800073e:	f000 fa2b 	bl	8000b98 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	; 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075a:	463b      	mov	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000766:	4b21      	ldr	r3, [pc, #132]	; (80007ec <MX_ADC1_Init+0x98>)
 8000768:	4a21      	ldr	r2, [pc, #132]	; (80007f0 <MX_ADC1_Init+0x9c>)
 800076a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <MX_ADC1_Init+0x98>)
 800076e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000772:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000774:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <MX_ADC1_Init+0x98>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <MX_ADC1_Init+0x98>)
 800077c:	2201      	movs	r2, #1
 800077e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000780:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_ADC1_Init+0x98>)
 8000782:	2201      	movs	r2, #1
 8000784:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <MX_ADC1_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_ADC1_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_ADC1_Init+0x98>)
 8000796:	4a17      	ldr	r2, [pc, #92]	; (80007f4 <MX_ADC1_Init+0xa0>)
 8000798:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_ADC1_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_ADC1_Init+0x98>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_ADC1_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_ADC1_Init+0x98>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007b4:	480d      	ldr	r0, [pc, #52]	; (80007ec <MX_ADC1_Init+0x98>)
 80007b6:	f000 fc2b 	bl	8001010 <HAL_ADC_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007c0:	f000 f9ea 	bl	8000b98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007c8:	2301      	movs	r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d0:	463b      	mov	r3, r7
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_ADC1_Init+0x98>)
 80007d6:	f000 fde9 	bl	80013ac <HAL_ADC_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007e0:	f000 f9da 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000094 	.word	0x20000094
 80007f0:	40012000 	.word	0x40012000
 80007f4:	0f000001 	.word	0x0f000001

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b2e      	ldr	r3, [pc, #184]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a2d      	ldr	r2, [pc, #180]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b27      	ldr	r3, [pc, #156]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a26      	ldr	r2, [pc, #152]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b24      	ldr	r3, [pc, #144]	; (80008cc <MX_GPIO_Init+0xd4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <MX_GPIO_Init+0xd4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a1f      	ldr	r2, [pc, #124]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b19      	ldr	r3, [pc, #100]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a18      	ldr	r2, [pc, #96]	; (80008cc <MX_GPIO_Init+0xd4>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a11      	ldr	r2, [pc, #68]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000888:	f043 0308 	orr.w	r3, r3, #8
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80008a0:	480b      	ldr	r0, [pc, #44]	; (80008d0 <MX_GPIO_Init+0xd8>)
 80008a2:	f002 fb35 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80008a6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_GPIO_Init+0xd8>)
 80008c0:	f002 f98a 	bl	8002bd8 <HAL_GPIO_Init>

}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	; 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020c00 	.word	0x40020c00

080008d4 <mqtt_sub_request_cb>:

/* USER CODE BEGIN 4 */

static void mqtt_sub_request_cb(void *arg, err_t result)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	70fb      	strb	r3, [r7, #3]
  /* Just print the result code here for simplicity,
     normal behaviour would be to take some action if subscribe fails like
     notifying user, retry subscribe or disconnect from server */
  printf("Subscribe result: %d\n", result);
 80008e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008e4:	4619      	mov	r1, r3
 80008e6:	4803      	ldr	r0, [pc, #12]	; (80008f4 <mqtt_sub_request_cb+0x20>)
 80008e8:	f00f fe00 	bl	80104ec <iprintf>
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	08011a50 	.word	0x08011a50

080008f8 <mqtt_incoming_publish_cb>:
   If RAM and CPU budget allows it, the easiest implementation might be to just take a copy of
   the topic string and use it in mqtt_incoming_data_cb
*/
static int inpub_id;
static void mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
  printf("Incoming publish at topic %s with total length %u\n", topic, (unsigned int)tot_len);
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	68b9      	ldr	r1, [r7, #8]
 8000908:	480e      	ldr	r0, [pc, #56]	; (8000944 <mqtt_incoming_publish_cb+0x4c>)
 800090a:	f00f fdef 	bl	80104ec <iprintf>

  /* Decode topic string into a user defined reference */
  if(strcmp(topic, "print_payload") == 0) {
 800090e:	490e      	ldr	r1, [pc, #56]	; (8000948 <mqtt_incoming_publish_cb+0x50>)
 8000910:	68b8      	ldr	r0, [r7, #8]
 8000912:	f7ff fc5d 	bl	80001d0 <strcmp>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d103      	bne.n	8000924 <mqtt_incoming_publish_cb+0x2c>
    inpub_id = 0;
 800091c:	4b0b      	ldr	r3, [pc, #44]	; (800094c <mqtt_incoming_publish_cb+0x54>)
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
    inpub_id = 1;
  } else {
    /* For all other topics */
    inpub_id = 2;
  }
}
 8000922:	e00a      	b.n	800093a <mqtt_incoming_publish_cb+0x42>
  } else if(topic[0] == 'A') {
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b41      	cmp	r3, #65	; 0x41
 800092a:	d103      	bne.n	8000934 <mqtt_incoming_publish_cb+0x3c>
    inpub_id = 1;
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <mqtt_incoming_publish_cb+0x54>)
 800092e:	2201      	movs	r2, #1
 8000930:	601a      	str	r2, [r3, #0]
}
 8000932:	e002      	b.n	800093a <mqtt_incoming_publish_cb+0x42>
    inpub_id = 2;
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <mqtt_incoming_publish_cb+0x54>)
 8000936:	2202      	movs	r2, #2
 8000938:	601a      	str	r2, [r3, #0]
}
 800093a:	bf00      	nop
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	08011a68 	.word	0x08011a68
 8000948:	08011a9c 	.word	0x08011a9c
 800094c:	20000150 	.word	0x20000150

08000950 <mqtt_incoming_data_cb>:

static void mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	4611      	mov	r1, r2
 800095c:	461a      	mov	r2, r3
 800095e:	460b      	mov	r3, r1
 8000960:	80fb      	strh	r3, [r7, #6]
 8000962:	4613      	mov	r3, r2
 8000964:	717b      	strb	r3, [r7, #5]

	printf("Incoming publish payload with length %d, flags %u\n", len, (unsigned int)flags);
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	797a      	ldrb	r2, [r7, #5]
 800096a:	4619      	mov	r1, r3
 800096c:	4821      	ldr	r0, [pc, #132]	; (80009f4 <mqtt_incoming_data_cb+0xa4>)
 800096e:	f00f fdbd 	bl	80104ec <iprintf>

  if(flags & MQTT_DATA_FLAG_LAST) {
 8000972:	797b      	ldrb	r3, [r7, #5]
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	2b00      	cmp	r3, #0
 800097a:	d037      	beq.n	80009ec <mqtt_incoming_data_cb+0x9c>

	  if(strncmp(data,"LED1-ON",7)==0)
 800097c:	2207      	movs	r2, #7
 800097e:	491e      	ldr	r1, [pc, #120]	; (80009f8 <mqtt_incoming_data_cb+0xa8>)
 8000980:	68b8      	ldr	r0, [r7, #8]
 8000982:	f00f fe9f 	bl	80106c4 <strncmp>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d105      	bne.n	8000998 <mqtt_incoming_data_cb+0x48>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000992:	481a      	ldr	r0, [pc, #104]	; (80009fc <mqtt_incoming_data_cb+0xac>)
 8000994:	f002 fabc 	bl	8002f10 <HAL_GPIO_WritePin>
	  }

	  if(strncmp(data,"LED1-OFF",8)==0)
 8000998:	2208      	movs	r2, #8
 800099a:	4919      	ldr	r1, [pc, #100]	; (8000a00 <mqtt_incoming_data_cb+0xb0>)
 800099c:	68b8      	ldr	r0, [r7, #8]
 800099e:	f00f fe91 	bl	80106c4 <strncmp>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d105      	bne.n	80009b4 <mqtt_incoming_data_cb+0x64>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ae:	4813      	ldr	r0, [pc, #76]	; (80009fc <mqtt_incoming_data_cb+0xac>)
 80009b0:	f002 faae 	bl	8002f10 <HAL_GPIO_WritePin>
	  }

	  if(strncmp(data,"LED2-ON",7)==0)
 80009b4:	2207      	movs	r2, #7
 80009b6:	4913      	ldr	r1, [pc, #76]	; (8000a04 <mqtt_incoming_data_cb+0xb4>)
 80009b8:	68b8      	ldr	r0, [r7, #8]
 80009ba:	f00f fe83 	bl	80106c4 <strncmp>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d105      	bne.n	80009d0 <mqtt_incoming_data_cb+0x80>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ca:	480c      	ldr	r0, [pc, #48]	; (80009fc <mqtt_incoming_data_cb+0xac>)
 80009cc:	f002 faa0 	bl	8002f10 <HAL_GPIO_WritePin>
	  }

	  if(strncmp(data,"LED2-OFF",8)==0)
 80009d0:	2208      	movs	r2, #8
 80009d2:	490d      	ldr	r1, [pc, #52]	; (8000a08 <mqtt_incoming_data_cb+0xb8>)
 80009d4:	68b8      	ldr	r0, [r7, #8]
 80009d6:	f00f fe75 	bl	80106c4 <strncmp>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d105      	bne.n	80009ec <mqtt_incoming_data_cb+0x9c>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <mqtt_incoming_data_cb+0xac>)
 80009e8:	f002 fa92 	bl	8002f10 <HAL_GPIO_WritePin>


  } else {

  }
}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	08011aac 	.word	0x08011aac
 80009f8:	08011ae0 	.word	0x08011ae0
 80009fc:	40020c00 	.word	0x40020c00
 8000a00:	08011ae8 	.word	0x08011ae8
 8000a04:	08011af4 	.word	0x08011af4
 8000a08:	08011afc 	.word	0x08011afc

08000a0c <mqtt_pub_request_cb>:


/* Called when publish is complete either with sucess or failure */
static void mqtt_pub_request_cb(void *arg, err_t result)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	460b      	mov	r3, r1
 8000a16:	70fb      	strb	r3, [r7, #3]
  if(result != ERR_OK) {
 8000a18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d005      	beq.n	8000a2c <mqtt_pub_request_cb+0x20>
    printf("Publish result: %d\n", result);
 8000a20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a24:	4619      	mov	r1, r3
 8000a26:	4803      	ldr	r0, [pc, #12]	; (8000a34 <mqtt_pub_request_cb+0x28>)
 8000a28:	f00f fd60 	bl	80104ec <iprintf>
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	08011b08 	.word	0x08011b08

08000a38 <mqtt_connection_cb>:

static void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af02      	add	r7, sp, #8
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	4613      	mov	r3, r2
 8000a44:	80fb      	strh	r3, [r7, #6]
  err_t err;
  if(status == MQTT_CONNECT_ACCEPTED) {
 8000a46:	88fb      	ldrh	r3, [r7, #6]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d11f      	bne.n	8000a8c <mqtt_connection_cb+0x54>
    printf("mqtt_connection_cb: Successfully connected\n");
 8000a4c:	4815      	ldr	r0, [pc, #84]	; (8000aa4 <mqtt_connection_cb+0x6c>)
 8000a4e:	f00f fdd3 	bl	80105f8 <puts>

    /* Setup callback for incoming publish requests */
    mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, arg);
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <mqtt_connection_cb+0x70>)
 8000a56:	4915      	ldr	r1, [pc, #84]	; (8000aac <mqtt_connection_cb+0x74>)
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f004 fe07 	bl	800566c <mqtt_set_inpub_callback>

    /* Subscribe to a topic named "subtopic" with QoS level 1, call mqtt_sub_request_cb with result */
    err = mqtt_subscribe(client, "STM32F4-SUB", 1, mqtt_sub_request_cb, arg);
 8000a5e:	2301      	movs	r3, #1
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <mqtt_connection_cb+0x78>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4912      	ldr	r1, [pc, #72]	; (8000ab4 <mqtt_connection_cb+0x7c>)
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f004 fd27 	bl	80054c0 <mqtt_sub_unsub>
 8000a72:	4603      	mov	r3, r0
 8000a74:	75fb      	strb	r3, [r7, #23]

    if(err != ERR_OK) {
 8000a76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d00e      	beq.n	8000a9c <mqtt_connection_cb+0x64>
      printf("mqtt_subscribe return: %d\n", err);
 8000a7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a82:	4619      	mov	r1, r3
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <mqtt_connection_cb+0x80>)
 8000a86:	f00f fd31 	bl	80104ec <iprintf>
    printf("mqtt_connection_cb: Disconnected, reason: %d\n", status);

    /* Its more nice to be connected, so try to reconnect */
    example_do_connect(client);
  }
}
 8000a8a:	e007      	b.n	8000a9c <mqtt_connection_cb+0x64>
    printf("mqtt_connection_cb: Disconnected, reason: %d\n", status);
 8000a8c:	88fb      	ldrh	r3, [r7, #6]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480a      	ldr	r0, [pc, #40]	; (8000abc <mqtt_connection_cb+0x84>)
 8000a92:	f00f fd2b 	bl	80104ec <iprintf>
    example_do_connect(client);
 8000a96:	68f8      	ldr	r0, [r7, #12]
 8000a98:	f000 f812 	bl	8000ac0 <example_do_connect>
}
 8000a9c:	bf00      	nop
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	08011b1c 	.word	0x08011b1c
 8000aa8:	08000951 	.word	0x08000951
 8000aac:	080008f9 	.word	0x080008f9
 8000ab0:	080008d5 	.word	0x080008d5
 8000ab4:	08011b48 	.word	0x08011b48
 8000ab8:	08011b54 	.word	0x08011b54
 8000abc:	08011b70 	.word	0x08011b70

08000ac0 <example_do_connect>:

void example_do_connect(mqtt_client_t *client)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08e      	sub	sp, #56	; 0x38
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	6078      	str	r0, [r7, #4]
  struct mqtt_connect_client_info_t ci;
  err_t err;

  /* Setup an empty client info structure */
  memset(&ci, 0, sizeof(ci));
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	221c      	movs	r2, #28
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f00f fd03 	bl	80104dc <memset>

  /* Minimal amount of information required is client identifier, so set it here */
  ci.client_id = "lwip_test";
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <example_do_connect+0x60>)
 8000ad8:	613b      	str	r3, [r7, #16]
  //ci.client_user = "";
  //ci.client_pass = "";
  ci.keep_alive = 120;
 8000ada:	2378      	movs	r3, #120	; 0x78
 8000adc:	83bb      	strh	r3, [r7, #28]

  ip_addr_t mqttBrokerIP;
  IP4_ADDR(&mqttBrokerIP, 18,157,124,90);
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <example_do_connect+0x64>)
 8000ae0:	60fb      	str	r3, [r7, #12]
  /* Initiate client and connect to server, if this fails immediately an error code is returned
     otherwise mqtt_connection_cb will be called with connection result after attempting
     to establish a connection with the server.
     For now MQTT version 3.1.1 is always used */

  err = mqtt_client_connect(client,&mqttBrokerIP, MQTT_PORT, mqtt_connection_cb, 0, &ci);
 8000ae2:	f107 010c 	add.w	r1, r7, #12
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	9301      	str	r3, [sp, #4]
 8000aec:	2300      	movs	r3, #0
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <example_do_connect+0x68>)
 8000af2:	f240 725b 	movw	r2, #1883	; 0x75b
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f004 fde6 	bl	80056c8 <mqtt_client_connect>
 8000afc:	4603      	mov	r3, r0
 8000afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* For now just print the result code if something goes wrong */
  if(err != ERR_OK) {
 8000b02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d005      	beq.n	8000b16 <example_do_connect+0x56>
    printf("mqtt_connect return %d\n", err);
 8000b0a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4806      	ldr	r0, [pc, #24]	; (8000b2c <example_do_connect+0x6c>)
 8000b12:	f00f fceb 	bl	80104ec <iprintf>
  }
}
 8000b16:	bf00      	nop
 8000b18:	3730      	adds	r7, #48	; 0x30
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	08011ba0 	.word	0x08011ba0
 8000b24:	5a7c9d12 	.word	0x5a7c9d12
 8000b28:	08000a39 	.word	0x08000a39
 8000b2c:	08011bac 	.word	0x08011bac

08000b30 <example_publish>:

void example_publish(mqtt_client_t *client, char *data, void *arg)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af04      	add	r7, sp, #16
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  const char *pub_payload= arg;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	617b      	str	r3, [r7, #20]
  err_t err;
  u8_t qos = 2; /* 0 1 or 2, see MQTT specification */
 8000b40:	2302      	movs	r3, #2
 8000b42:	74fb      	strb	r3, [r7, #19]
  u8_t retain = 0; /* No don't retain such crappy payload... */
 8000b44:	2300      	movs	r3, #0
 8000b46:	74bb      	strb	r3, [r7, #18]
  err = mqtt_publish(client, data, pub_payload, strlen(pub_payload), qos, retain, mqtt_pub_request_cb, arg);
 8000b48:	6978      	ldr	r0, [r7, #20]
 8000b4a:	f7ff fb4b 	bl	80001e4 <strlen>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	9303      	str	r3, [sp, #12]
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <example_publish+0x60>)
 8000b58:	9302      	str	r3, [sp, #8]
 8000b5a:	7cbb      	ldrb	r3, [r7, #18]
 8000b5c:	9301      	str	r3, [sp, #4]
 8000b5e:	7cfb      	ldrb	r3, [r7, #19]
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	4613      	mov	r3, r2
 8000b64:	697a      	ldr	r2, [r7, #20]
 8000b66:	68b9      	ldr	r1, [r7, #8]
 8000b68:	68f8      	ldr	r0, [r7, #12]
 8000b6a:	f004 fbd5 	bl	8005318 <mqtt_publish>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	747b      	strb	r3, [r7, #17]
  if(err != ERR_OK) {
 8000b72:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d005      	beq.n	8000b86 <example_publish+0x56>
    printf("Publish err: %d\n", err);
 8000b7a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4804      	ldr	r0, [pc, #16]	; (8000b94 <example_publish+0x64>)
 8000b82:	f00f fcb3 	bl	80104ec <iprintf>
  }
}
 8000b86:	bf00      	nop
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	08000a0d 	.word	0x08000a0d
 8000b94:	08011bc4 	.word	0x08011bc4

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <Error_Handler+0x8>
	...

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <HAL_ADC_MspInit+0x7c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d127      	bne.n	8000c66 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <HAL_ADC_MspInit+0x80>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a15      	ldr	r2, [pc, #84]	; (8000c74 <HAL_ADC_MspInit+0x80>)
 8000c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <HAL_ADC_MspInit+0x80>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <HAL_ADC_MspInit+0x80>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <HAL_ADC_MspInit+0x80>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <HAL_ADC_MspInit+0x80>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c52:	2303      	movs	r3, #3
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_ADC_MspInit+0x84>)
 8000c62:	f001 ffb9 	bl	8002bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40012000 	.word	0x40012000
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020000 	.word	0x40020000

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc8:	f000 f95e 	bl	8000f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
	return 1;
 8000cd4:	2301      	movs	r3, #1
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <_kill>:

int _kill(int pid, int sig)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <_kill+0x20>)
 8000cec:	2216      	movs	r2, #22
 8000cee:	601a      	str	r2, [r3, #0]
	return -1;
 8000cf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	2000695c 	.word	0x2000695c

08000d04 <_exit>:

void _exit (int status)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff ffe5 	bl	8000ce0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d16:	e7fe      	b.n	8000d16 <_exit+0x12>

08000d18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	e00a      	b.n	8000d40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d2a:	f3af 8000 	nop.w
 8000d2e:	4601      	mov	r1, r0
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	1c5a      	adds	r2, r3, #1
 8000d34:	60ba      	str	r2, [r7, #8]
 8000d36:	b2ca      	uxtb	r2, r1
 8000d38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	dbf0      	blt.n	8000d2a <_read+0x12>
	}

return len;
 8000d48:	687b      	ldr	r3, [r7, #4]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b086      	sub	sp, #24
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	e009      	b.n	8000d78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	60ba      	str	r2, [r7, #8]
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	dbf1      	blt.n	8000d64 <_write+0x12>
	}
	return len;
 8000d80:	687b      	ldr	r3, [r7, #4]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <_close>:

int _close(int file)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
	return -1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
 8000daa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000db2:	605a      	str	r2, [r3, #4]
	return 0;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <_isatty>:

int _isatty(int file)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
	return 1;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
	return 0;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b087      	sub	sp, #28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dfc:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <_sbrk+0x5c>)
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <_sbrk+0x60>)
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <_sbrk+0x64>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <_sbrk+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d205      	bcs.n	8000e30 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <_sbrk+0x6c>)
 8000e26:	220c      	movs	r2, #12
 8000e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	e009      	b.n	8000e44 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <_sbrk+0x64>)
 8000e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	371c      	adds	r7, #28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	20020000 	.word	0x20020000
 8000e54:	00000400 	.word	0x00000400
 8000e58:	20000154 	.word	0x20000154
 8000e5c:	20006970 	.word	0x20006970
 8000e60:	2000695c 	.word	0x2000695c

08000e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <SystemInit+0x28>)
 8000e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6e:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <SystemInit+0x28>)
 8000e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SystemInit+0x28>)
 8000e7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e7e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e96:	e003      	b.n	8000ea0 <LoopCopyDataInit>

08000e98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e9e:	3104      	adds	r1, #4

08000ea0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ea0:	480b      	ldr	r0, [pc, #44]	; (8000ed0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ea4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ea6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ea8:	d3f6      	bcc.n	8000e98 <CopyDataInit>
  ldr  r2, =_sbss
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000eac:	e002      	b.n	8000eb4 <LoopFillZerobss>

08000eae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000eae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000eb0:	f842 3b04 	str.w	r3, [r2], #4

08000eb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000eb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000eb8:	d3f9      	bcc.n	8000eae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eba:	f7ff ffd3 	bl	8000e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f00f fab1 	bl	8010424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec2:	f7ff fb6f 	bl	80005a4 <main>
  bx  lr    
 8000ec6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ec8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ecc:	08014fb4 	.word	0x08014fb4
  ldr  r0, =_sdata
 8000ed0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ed4:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000ed8:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000edc:	2000696c 	.word	0x2000696c

08000ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC_IRQHandler>
	...

08000ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <HAL_Init+0x40>)
 8000eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <HAL_Init+0x40>)
 8000efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a07      	ldr	r2, [pc, #28]	; (8000f24 <HAL_Init+0x40>)
 8000f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f000 fd1d 	bl	800194c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f000 f808 	bl	8000f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f18:	f7ff fe44 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023c00 	.word	0x40023c00

08000f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x54>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x58>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fd27 	bl	800199a <HAL_SYSTICK_Config>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00e      	b.n	8000f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b0f      	cmp	r3, #15
 8000f5a:	d80a      	bhi.n	8000f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f000 fcfd 	bl	8001962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f68:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <HAL_InitTick+0x5c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e000      	b.n	8000f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000004 	.word	0x20000004

08000f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	20000158 	.word	0x20000158

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000158 	.word	0x20000158

08000fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff ffee 	bl	8000fb0 <HAL_GetTick>
 8000fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe0:	d005      	beq.n	8000fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_Delay+0x44>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fee:	bf00      	nop
 8000ff0:	f7ff ffde 	bl	8000fb0 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d8f7      	bhi.n	8000ff0 <HAL_Delay+0x28>
  {
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000008 	.word	0x20000008

08001010 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e033      	b.n	800108e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	2b00      	cmp	r3, #0
 800102c:	d109      	bne.n	8001042 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff fde0 	bl	8000bf4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	2b00      	cmp	r3, #0
 800104c:	d118      	bne.n	8001080 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001056:	f023 0302 	bic.w	r3, r3, #2
 800105a:	f043 0202 	orr.w	r2, r3, #2
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 fac4 	bl	80015f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f023 0303 	bic.w	r3, r3, #3
 8001076:	f043 0201 	orr.w	r2, r3, #1
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	641a      	str	r2, [r3, #64]	; 0x40
 800107e:	e001      	b.n	8001084 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d101      	bne.n	80010b2 <HAL_ADC_Start+0x1a>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e0a5      	b.n	80011fe <HAL_ADC_Start+0x166>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d018      	beq.n	80010fa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0201 	orr.w	r2, r2, #1
 80010d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010d8:	4b4c      	ldr	r3, [pc, #304]	; (800120c <HAL_ADC_Start+0x174>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a4c      	ldr	r2, [pc, #304]	; (8001210 <HAL_ADC_Start+0x178>)
 80010de:	fba2 2303 	umull	r2, r3, r2, r3
 80010e2:	0c9a      	lsrs	r2, r3, #18
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80010ec:	e002      	b.n	80010f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f9      	bne.n	80010ee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b01      	cmp	r3, #1
 8001106:	d179      	bne.n	80011fc <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001110:	f023 0301 	bic.w	r3, r3, #1
 8001114:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001132:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001146:	d106      	bne.n	8001156 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114c:	f023 0206 	bic.w	r2, r3, #6
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	645a      	str	r2, [r3, #68]	; 0x44
 8001154:	e002      	b.n	800115c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <HAL_ADC_Start+0x17c>)
 8001166:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001170:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 031f 	and.w	r3, r3, #31
 800117a:	2b00      	cmp	r3, #0
 800117c:	d12a      	bne.n	80011d4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a25      	ldr	r2, [pc, #148]	; (8001218 <HAL_ADC_Start+0x180>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d015      	beq.n	80011b4 <HAL_ADC_Start+0x11c>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a23      	ldr	r2, [pc, #140]	; (800121c <HAL_ADC_Start+0x184>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d105      	bne.n	800119e <HAL_ADC_Start+0x106>
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <HAL_ADC_Start+0x17c>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 031f 	and.w	r3, r3, #31
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00a      	beq.n	80011b4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <HAL_ADC_Start+0x188>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d129      	bne.n	80011fc <HAL_ADC_Start+0x164>
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <HAL_ADC_Start+0x17c>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0310 	and.w	r3, r3, #16
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d123      	bne.n	80011fc <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d11c      	bne.n	80011fc <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	e013      	b.n	80011fc <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <HAL_ADC_Start+0x180>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d10e      	bne.n	80011fc <HAL_ADC_Start+0x164>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d107      	bne.n	80011fc <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011fa:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000000 	.word	0x20000000
 8001210:	431bde83 	.word	0x431bde83
 8001214:	40012300 	.word	0x40012300
 8001218:	40012000 	.word	0x40012000
 800121c:	40012100 	.word	0x40012100
 8001220:	40012200 	.word	0x40012200

08001224 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001232:	2b01      	cmp	r3, #1
 8001234:	d101      	bne.n	800123a <HAL_ADC_Stop+0x16>
 8001236:	2302      	movs	r3, #2
 8001238:	e021      	b.n	800127e <HAL_ADC_Stop+0x5a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2201      	movs	r2, #1
 800123e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0201 	bic.w	r2, r2, #1
 8001250:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b00      	cmp	r3, #0
 800125e:	d109      	bne.n	8001274 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001268:	f023 0301 	bic.w	r3, r3, #1
 800126c:	f043 0201 	orr.w	r2, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b084      	sub	sp, #16
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a6:	d113      	bne.n	80012d0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012b6:	d10b      	bne.n	80012d0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	f043 0220 	orr.w	r2, r3, #32
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e05c      	b.n	800138a <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012d0:	f7ff fe6e 	bl	8000fb0 <HAL_GetTick>
 80012d4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012d6:	e01a      	b.n	800130e <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012de:	d016      	beq.n	800130e <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d007      	beq.n	80012f6 <HAL_ADC_PollForConversion+0x6c>
 80012e6:	f7ff fe63 	bl	8000fb0 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d20b      	bcs.n	800130e <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f043 0204 	orr.w	r2, r3, #4
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e03d      	b.n	800138a <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b02      	cmp	r3, #2
 800131a:	d1dd      	bne.n	80012d8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f06f 0212 	mvn.w	r2, #18
 8001324:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d123      	bne.n	8001388 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001344:	2b00      	cmp	r3, #0
 8001346:	d11f      	bne.n	8001388 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001352:	2b00      	cmp	r3, #0
 8001354:	d006      	beq.n	8001364 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001360:	2b00      	cmp	r3, #0
 8001362:	d111      	bne.n	8001388 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d105      	bne.n	8001388 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	f043 0201 	orr.w	r2, r3, #1
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d101      	bne.n	80013c8 <HAL_ADC_ConfigChannel+0x1c>
 80013c4:	2302      	movs	r3, #2
 80013c6:	e105      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x228>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b09      	cmp	r3, #9
 80013d6:	d925      	bls.n	8001424 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68d9      	ldr	r1, [r3, #12]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	461a      	mov	r2, r3
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	3b1e      	subs	r3, #30
 80013ee:	2207      	movs	r2, #7
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43da      	mvns	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	400a      	ands	r2, r1
 80013fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68d9      	ldr	r1, [r3, #12]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	b29b      	uxth	r3, r3
 800140e:	4618      	mov	r0, r3
 8001410:	4603      	mov	r3, r0
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4403      	add	r3, r0
 8001416:	3b1e      	subs	r3, #30
 8001418:	409a      	lsls	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	e022      	b.n	800146a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6919      	ldr	r1, [r3, #16]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	461a      	mov	r2, r3
 8001432:	4613      	mov	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	2207      	movs	r2, #7
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	400a      	ands	r2, r1
 8001446:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6919      	ldr	r1, [r3, #16]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	b29b      	uxth	r3, r3
 8001458:	4618      	mov	r0, r3
 800145a:	4603      	mov	r3, r0
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4403      	add	r3, r0
 8001460:	409a      	lsls	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b06      	cmp	r3, #6
 8001470:	d824      	bhi.n	80014bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	3b05      	subs	r3, #5
 8001484:	221f      	movs	r2, #31
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	400a      	ands	r2, r1
 8001492:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	4618      	mov	r0, r3
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	3b05      	subs	r3, #5
 80014ae:	fa00 f203 	lsl.w	r2, r0, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	635a      	str	r2, [r3, #52]	; 0x34
 80014ba:	e04c      	b.n	8001556 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b0c      	cmp	r3, #12
 80014c2:	d824      	bhi.n	800150e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	3b23      	subs	r3, #35	; 0x23
 80014d6:	221f      	movs	r2, #31
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43da      	mvns	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	400a      	ands	r2, r1
 80014e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	3b23      	subs	r3, #35	; 0x23
 8001500:	fa00 f203 	lsl.w	r2, r0, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	631a      	str	r2, [r3, #48]	; 0x30
 800150c:	e023      	b.n	8001556 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	3b41      	subs	r3, #65	; 0x41
 8001520:	221f      	movs	r2, #31
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	400a      	ands	r2, r1
 800152e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	b29b      	uxth	r3, r3
 800153c:	4618      	mov	r0, r3
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	3b41      	subs	r3, #65	; 0x41
 800154a:	fa00 f203 	lsl.w	r2, r0, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001556:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <HAL_ADC_ConfigChannel+0x234>)
 8001558:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a21      	ldr	r2, [pc, #132]	; (80015e4 <HAL_ADC_ConfigChannel+0x238>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d109      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x1cc>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b12      	cmp	r3, #18
 800156a:	d105      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a19      	ldr	r2, [pc, #100]	; (80015e4 <HAL_ADC_ConfigChannel+0x238>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d123      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x21e>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b10      	cmp	r3, #16
 8001588:	d003      	beq.n	8001592 <HAL_ADC_ConfigChannel+0x1e6>
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b11      	cmp	r3, #17
 8001590:	d11b      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b10      	cmp	r3, #16
 80015a4:	d111      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <HAL_ADC_ConfigChannel+0x23c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a10      	ldr	r2, [pc, #64]	; (80015ec <HAL_ADC_ConfigChannel+0x240>)
 80015ac:	fba2 2303 	umull	r2, r3, r2, r3
 80015b0:	0c9a      	lsrs	r2, r3, #18
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015bc:	e002      	b.n	80015c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f9      	bne.n	80015be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	40012300 	.word	0x40012300
 80015e4:	40012000 	.word	0x40012000
 80015e8:	20000000 	.word	0x20000000
 80015ec:	431bde83 	.word	0x431bde83

080015f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015f8:	4b79      	ldr	r3, [pc, #484]	; (80017e0 <ADC_Init+0x1f0>)
 80015fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	431a      	orrs	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001624:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6859      	ldr	r1, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	021a      	lsls	r2, r3, #8
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001648:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6859      	ldr	r1, [r3, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800166a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6899      	ldr	r1, [r3, #8]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	4a58      	ldr	r2, [pc, #352]	; (80017e4 <ADC_Init+0x1f4>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d022      	beq.n	80016ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001696:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6899      	ldr	r1, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6899      	ldr	r1, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	e00f      	b.n	80016ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0202 	bic.w	r2, r2, #2
 80016fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6899      	ldr	r1, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7e1b      	ldrb	r3, [r3, #24]
 8001708:	005a      	lsls	r2, r3, #1
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d01b      	beq.n	8001754 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800172a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800173a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6859      	ldr	r1, [r3, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	3b01      	subs	r3, #1
 8001748:	035a      	lsls	r2, r3, #13
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	e007      	b.n	8001764 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001762:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	3b01      	subs	r3, #1
 8001780:	051a      	lsls	r2, r3, #20
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001798:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6899      	ldr	r1, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017a6:	025a      	lsls	r2, r3, #9
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6899      	ldr	r1, [r3, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	029a      	lsls	r2, r3, #10
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	609a      	str	r2, [r3, #8]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	40012300 	.word	0x40012300
 80017e4:	0f000001 	.word	0x0f000001

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db0a      	blt.n	8001876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b2da      	uxtb	r2, r3
 8001864:	490c      	ldr	r1, [pc, #48]	; (8001898 <__NVIC_SetPriority+0x4c>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	440b      	add	r3, r1
 8001870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001874:	e00a      	b.n	800188c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4908      	ldr	r1, [pc, #32]	; (800189c <__NVIC_SetPriority+0x50>)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3b04      	subs	r3, #4
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	440b      	add	r3, r1
 800188a:	761a      	strb	r2, [r3, #24]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000e100 	.word	0xe000e100
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f1c3 0307 	rsb	r3, r3, #7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	bf28      	it	cs
 80018be:	2304      	movcs	r3, #4
 80018c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3304      	adds	r3, #4
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d902      	bls.n	80018d0 <NVIC_EncodePriority+0x30>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3b03      	subs	r3, #3
 80018ce:	e000      	b.n	80018d2 <NVIC_EncodePriority+0x32>
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	401a      	ands	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43d9      	mvns	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	4313      	orrs	r3, r2
         );
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001918:	d301      	bcc.n	800191e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191a:	2301      	movs	r3, #1
 800191c:	e00f      	b.n	800193e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <SysTick_Config+0x40>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001926:	210f      	movs	r1, #15
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f7ff ff8e 	bl	800184c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <SysTick_Config+0x40>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <SysTick_Config+0x40>)
 8001938:	2207      	movs	r2, #7
 800193a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	e000e010 	.word	0xe000e010

0800194c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ff47 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001974:	f7ff ff5c 	bl	8001830 <__NVIC_GetPriorityGrouping>
 8001978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	6978      	ldr	r0, [r7, #20]
 8001980:	f7ff ff8e 	bl	80018a0 <NVIC_EncodePriority>
 8001984:	4602      	mov	r2, r0
 8001986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff5d 	bl	800184c <__NVIC_SetPriority>
}
 8001992:	bf00      	nop
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffb0 	bl	8001908 <SysTick_Config>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80019c4:	4ba1      	ldr	r3, [pc, #644]	; (8001c4c <HAL_ETH_Init+0x298>)
 80019c6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80019cc:	2300      	movs	r3, #0
 80019ce:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e182      	b.n	8001ce0 <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d106      	bne.n	80019f4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f002 f84c 	bl	8003a8c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	4b95      	ldr	r3, [pc, #596]	; (8001c50 <HAL_ETH_Init+0x29c>)
 80019fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fc:	4a94      	ldr	r2, [pc, #592]	; (8001c50 <HAL_ETH_Init+0x29c>)
 80019fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a02:	6453      	str	r3, [r2, #68]	; 0x44
 8001a04:	4b92      	ldr	r3, [pc, #584]	; (8001c50 <HAL_ETH_Init+0x29c>)
 8001a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a10:	4b90      	ldr	r3, [pc, #576]	; (8001c54 <HAL_ETH_Init+0x2a0>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	4a8f      	ldr	r2, [pc, #572]	; (8001c54 <HAL_ETH_Init+0x2a0>)
 8001a16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a1a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a1c:	4b8d      	ldr	r3, [pc, #564]	; (8001c54 <HAL_ETH_Init+0x2a0>)
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	498b      	ldr	r1, [pc, #556]	; (8001c54 <HAL_ETH_Init+0x2a0>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a40:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a42:	f7ff fab5 	bl	8000fb0 <HAL_GetTick>
 8001a46:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001a48:	e011      	b.n	8001a6e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001a4a:	f7ff fab1 	bl	8000fb0 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a58:	d909      	bls.n	8001a6e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e138      	b.n	8001ce0 <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1e4      	bne.n	8001a4a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f023 031c 	bic.w	r3, r3, #28
 8001a8e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001a90:	f001 feb2 	bl	80037f8 <HAL_RCC_GetHCLKFreq>
 8001a94:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	4a6f      	ldr	r2, [pc, #444]	; (8001c58 <HAL_ETH_Init+0x2a4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d908      	bls.n	8001ab0 <HAL_ETH_Init+0xfc>
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	4a6e      	ldr	r2, [pc, #440]	; (8001c5c <HAL_ETH_Init+0x2a8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d804      	bhi.n	8001ab0 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f043 0308 	orr.w	r3, r3, #8
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	e027      	b.n	8001b00 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	4a6a      	ldr	r2, [pc, #424]	; (8001c5c <HAL_ETH_Init+0x2a8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d908      	bls.n	8001aca <HAL_ETH_Init+0x116>
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	4a64      	ldr	r2, [pc, #400]	; (8001c4c <HAL_ETH_Init+0x298>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d204      	bcs.n	8001aca <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f043 030c 	orr.w	r3, r3, #12
 8001ac6:	61fb      	str	r3, [r7, #28]
 8001ac8:	e01a      	b.n	8001b00 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4a5f      	ldr	r2, [pc, #380]	; (8001c4c <HAL_ETH_Init+0x298>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d303      	bcc.n	8001ada <HAL_ETH_Init+0x126>
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4a62      	ldr	r2, [pc, #392]	; (8001c60 <HAL_ETH_Init+0x2ac>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d911      	bls.n	8001afe <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4a60      	ldr	r2, [pc, #384]	; (8001c60 <HAL_ETH_Init+0x2ac>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d908      	bls.n	8001af4 <HAL_ETH_Init+0x140>
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	4a5f      	ldr	r2, [pc, #380]	; (8001c64 <HAL_ETH_Init+0x2b0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d804      	bhi.n	8001af4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f043 0304 	orr.w	r3, r3, #4
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	e005      	b.n	8001b00 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f043 0310 	orr.w	r3, r3, #16
 8001afa:	61fb      	str	r3, [r7, #28]
 8001afc:	e000      	b.n	8001b00 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001afe:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	69fa      	ldr	r2, [r7, #28]
 8001b06:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001b08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 fb94 	bl	800223c <HAL_ETH_WritePHYRegister>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00b      	beq.n	8001b32 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001b1e:	6939      	ldr	r1, [r7, #16]
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 fd49 	bl	80025b8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0d6      	b.n	8001ce0 <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001b32:	20ff      	movs	r0, #255	; 0xff
 8001b34:	f7ff fa48 	bl	8000fc8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80a4 	beq.w	8001c8a <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b42:	f7ff fa35 	bl	8000fb0 <HAL_GetTick>
 8001b46:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	2101      	movs	r1, #1
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fb0b 	bl	800216c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001b56:	f7ff fa2b 	bl	8000fb0 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d90f      	bls.n	8001b88 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001b6c:	6939      	ldr	r1, [r7, #16]
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 fd22 	bl	80025b8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e0ab      	b.n	8001ce0 <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0da      	beq.n	8001b48 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001b92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b96:	2100      	movs	r1, #0
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 fb4f 	bl	800223c <HAL_ETH_WritePHYRegister>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00b      	beq.n	8001bbc <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001ba8:	6939      	ldr	r1, [r7, #16]
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 fd04 	bl	80025b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e091      	b.n	8001ce0 <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bbc:	f7ff f9f8 	bl	8000fb0 <HAL_GetTick>
 8001bc0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001bc2:	f107 030c 	add.w	r3, r7, #12
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	2101      	movs	r1, #1
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 face 	bl	800216c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001bd0:	f7ff f9ee 	bl	8000fb0 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d90f      	bls.n	8001c02 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001be6:	6939      	ldr	r1, [r7, #16]
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 fce5 	bl	80025b8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e06e      	b.n	8001ce0 <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f003 0320 	and.w	r3, r3, #32
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0da      	beq.n	8001bc2 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	461a      	mov	r2, r3
 8001c12:	211f      	movs	r1, #31
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 faa9 	bl	800216c <HAL_ETH_ReadPHYRegister>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00b      	beq.n	8001c38 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c24:	6939      	ldr	r1, [r7, #16]
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 fcc6 	bl	80025b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001c34:	2301      	movs	r3, #1
 8001c36:	e053      	b.n	8001ce0 <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d012      	beq.n	8001c68 <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	e010      	b.n	8001c6e <HAL_ETH_Init+0x2ba>
 8001c4c:	03938700 	.word	0x03938700
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40013800 	.word	0x40013800
 8001c58:	01312cff 	.word	0x01312cff
 8001c5c:	02160ebf 	.word	0x02160ebf
 8001c60:	05f5e0ff 	.word	0x05f5e0ff
 8001c64:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	e026      	b.n	8001cce <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	e021      	b.n	8001cce <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	08db      	lsrs	r3, r3, #3
 8001c90:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	085b      	lsrs	r3, r3, #1
 8001c98:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 faca 	bl	800223c <HAL_ETH_WritePHYRegister>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00b      	beq.n	8001cc6 <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001cb2:	6939      	ldr	r1, [r7, #16]
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 fc7f 	bl	80025b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00c      	b.n	8001ce0 <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001cc6:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001cca:	f7ff f97d 	bl	8000fc8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001cce:	6939      	ldr	r1, [r7, #16]
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 fc71 	bl	80025b8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3720      	adds	r7, #32
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <HAL_ETH_DMATxDescListInit+0x20>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e051      	b.n	8001dac <HAL_ETH_DMATxDescListInit+0xc4>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	e030      	b.n	8001d86 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	015b      	lsls	r3, r3, #5
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d34:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d3c:	fb02 f303 	mul.w	r3, r2, r3
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	4413      	add	r3, r2
 8001d44:	461a      	mov	r2, r3
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d105      	bne.n	8001d5e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d208      	bcs.n	8001d7a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	015b      	lsls	r3, r3, #5
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	4413      	add	r3, r2
 8001d72:	461a      	mov	r2, r3
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	60da      	str	r2, [r3, #12]
 8001d78:	e002      	b.n	8001d80 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3301      	adds	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d3ca      	bcc.n	8001d24 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d98:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	371c      	adds	r7, #28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_ETH_DMARxDescListInit+0x20>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e055      	b.n	8001e84 <HAL_ETH_DMARxDescListInit+0xcc>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	e034      	b.n	8001e5e <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	015b      	lsls	r3, r3, #5
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e04:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001e0c:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001e14:	fb02 f303 	mul.w	r3, r2, r3
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d105      	bne.n	8001e36 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d208      	bcs.n	8001e52 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	3301      	adds	r3, #1
 8001e44:	015b      	lsls	r3, r3, #5
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	4413      	add	r3, r2
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	60da      	str	r2, [r3, #12]
 8001e50:	e002      	b.n	8001e58 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d3c6      	bcc.n	8001df4 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e70:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	371c      	adds	r7, #28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_ETH_TransmitFrame+0x24>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e0cc      	b.n	800204e <HAL_ETH_TransmitFrame+0x1be>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d109      	bne.n	8001ede <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001eda:	2301      	movs	r3, #1
 8001edc:	e0b7      	b.n	800204e <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	da09      	bge.n	8001efc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2212      	movs	r2, #18
 8001eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0a8      	b.n	800204e <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d915      	bls.n	8001f32 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	4a54      	ldr	r2, [pc, #336]	; (800205c <HAL_ETH_TransmitFrame+0x1cc>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	0a9b      	lsrs	r3, r3, #10
 8001f10:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	4b51      	ldr	r3, [pc, #324]	; (800205c <HAL_ETH_TransmitFrame+0x1cc>)
 8001f16:	fba3 1302 	umull	r1, r3, r3, r2
 8001f1a:	0a9b      	lsrs	r3, r3, #10
 8001f1c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001f20:	fb01 f303 	mul.w	r3, r1, r3
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d005      	beq.n	8001f36 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	e001      	b.n	8001f36 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001f32:	2301      	movs	r3, #1
 8001f34:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d11c      	bne.n	8001f76 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f46:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001f4a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001f56:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f66:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f74:	e04b      	b.n	800200e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	e044      	b.n	8002006 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f86:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f8a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d107      	bne.n	8001fa2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fa0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001faa:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d116      	bne.n	8001fe4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001fc4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	4a25      	ldr	r2, [pc, #148]	; (8002060 <HAL_ETH_TransmitFrame+0x1d0>)
 8001fca:	fb03 f202 	mul.w	r2, r3, r2
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001fd6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001fe2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ff2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	3301      	adds	r3, #1
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	429a      	cmp	r2, r3
 800200c:	d3b6      	bcc.n	8001f7c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00d      	beq.n	800203c <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002028:	461a      	mov	r2, r3
 800202a:	2304      	movs	r3, #4
 800202c:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002036:	461a      	mov	r2, r3
 8002038:	2300      	movs	r3, #0
 800203a:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	371c      	adds	r7, #28
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	ac02b00b 	.word	0xac02b00b
 8002060:	fffffa0c 	.word	0xfffffa0c

08002064 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002076:	2b01      	cmp	r3, #1
 8002078:	d101      	bne.n	800207e <HAL_ETH_GetReceivedFrame+0x1a>
 800207a:	2302      	movs	r3, #2
 800207c:	e070      	b.n	8002160 <HAL_ETH_GetReceivedFrame+0xfc>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2202      	movs	r2, #2
 800208a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db5a      	blt.n	800214e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d030      	beq.n	8002108 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d103      	bne.n	80020c0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	0c1b      	lsrs	r3, r3, #16
 80020d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80020d4:	3b04      	subs	r3, #4
 80020d6:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	461a      	mov	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	e02b      	b.n	8002160 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002112:	2b00      	cmp	r3, #0
 8002114:	d010      	beq.n	8002138 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	461a      	mov	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	629a      	str	r2, [r3, #40]	; 0x28
 8002136:	e00a      	b.n	800214e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	461a      	mov	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	460b      	mov	r3, r1
 8002176:	607a      	str	r2, [r7, #4]
 8002178:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b82      	cmp	r3, #130	; 0x82
 800218c:	d101      	bne.n	8002192 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800218e:	2302      	movs	r3, #2
 8002190:	e050      	b.n	8002234 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2282      	movs	r2, #130	; 0x82
 8002196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f003 031c 	and.w	r3, r3, #28
 80021a8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8a1b      	ldrh	r3, [r3, #16]
 80021ae:	02db      	lsls	r3, r3, #11
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80021b8:	897b      	ldrh	r3, [r7, #10]
 80021ba:	019b      	lsls	r3, r3, #6
 80021bc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f023 0302 	bic.w	r3, r3, #2
 80021cc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80021de:	f7fe fee7 	bl	8000fb0 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021e4:	e015      	b.n	8002212 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80021e6:	f7fe fee3 	bl	8000fb0 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f4:	d309      	bcc.n	800220a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e014      	b.n	8002234 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1e4      	bne.n	80021e6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	b29b      	uxth	r3, r3
 8002224:	461a      	mov	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	460b      	mov	r3, r1
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b42      	cmp	r3, #66	; 0x42
 800225c:	d101      	bne.n	8002262 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800225e:	2302      	movs	r3, #2
 8002260:	e04e      	b.n	8002300 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2242      	movs	r2, #66	; 0x42
 8002266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f003 031c 	and.w	r3, r3, #28
 8002278:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8a1b      	ldrh	r3, [r3, #16]
 800227e:	02db      	lsls	r3, r3, #11
 8002280:	b29b      	uxth	r3, r3
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	4313      	orrs	r3, r2
 8002286:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002288:	897b      	ldrh	r3, [r7, #10]
 800228a:	019b      	lsls	r3, r3, #6
 800228c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	4313      	orrs	r3, r2
 8002294:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80022b8:	f7fe fe7a 	bl	8000fb0 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022be:	e015      	b.n	80022ec <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80022c0:	f7fe fe76 	bl	8000fb0 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ce:	d309      	bcc.n	80022e4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e00d      	b.n	8002300 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1e4      	bne.n	80022c0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_ETH_Start+0x16>
 800231a:	2302      	movs	r3, #2
 800231c:	e01f      	b.n	800235e <HAL_ETH_Start+0x56>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2202      	movs	r2, #2
 800232a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 fb40 	bl	80029b4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 fb77 	bl	8002a28 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 fc06 	bl	8002b4c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 fbab 	bl	8002a9c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fbd4 	bl	8002af4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_ETH_Stop+0x16>
 8002378:	2302      	movs	r3, #2
 800237a:	e01f      	b.n	80023bc <HAL_ETH_Stop+0x56>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 fb9b 	bl	8002ac8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fbc4 	bl	8002b20 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fb62 	bl	8002a62 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fbd4 	bl	8002b4c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 fb22 	bl	80029ee <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <HAL_ETH_ConfigMAC+0x1c>
 80023dc:	2302      	movs	r3, #2
 80023de:	e0e4      	b.n	80025aa <HAL_ETH_ConfigMAC+0x1e6>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 80b1 	beq.w	800255a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	4b6c      	ldr	r3, [pc, #432]	; (80025b4 <HAL_ETH_ConfigMAC+0x1f0>)
 8002404:	4013      	ands	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002410:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002416:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800241c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002422:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002428:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800242e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002434:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800243a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002440:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002446:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800244c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002452:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	4313      	orrs	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800246a:	2001      	movs	r0, #1
 800246c:	f7fe fdac 	bl	8000fc8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002480:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002486:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800248c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002492:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002498:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800249e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80024aa:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80024ac:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80024b6:	2001      	movs	r0, #1
 80024b8:	f7fe fd86 	bl	8000fc8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80024cc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024d6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80024e6:	4013      	ands	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ee:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80024f4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80024fa:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002500:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002506:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800250c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	4313      	orrs	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002524:	2001      	movs	r0, #1
 8002526:	f7fe fd4f 	bl	8000fc8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800254a:	2001      	movs	r0, #1
 800254c:	f7fe fd3c 	bl	8000fc8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	61da      	str	r2, [r3, #28]
 8002558:	e01e      	b.n	8002598 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002568:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800258a:	2001      	movs	r0, #1
 800258c:	f7fe fd1c 	bl	8000fc8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	ff20810f 	.word	0xff20810f

080025b8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b0b0      	sub	sp, #192	; 0xc0
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025d4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80025de:	2300      	movs	r3, #0
 80025e0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80025e6:	2300      	movs	r3, #0
 80025e8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d103      	bne.n	8002606 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80025fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002602:	663b      	str	r3, [r7, #96]	; 0x60
 8002604:	e001      	b.n	800260a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002606:	2300      	movs	r3, #0
 8002608:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800260a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800260e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002610:	2300      	movs	r3, #0
 8002612:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002614:	2300      	movs	r3, #0
 8002616:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800261c:	2300      	movs	r3, #0
 800261e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002620:	2300      	movs	r3, #0
 8002622:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002624:	2340      	movs	r3, #64	; 0x40
 8002626:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002628:	2300      	movs	r3, #0
 800262a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800262e:	2300      	movs	r3, #0
 8002630:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002634:	2300      	movs	r3, #0
 8002636:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800263a:	2300      	movs	r3, #0
 800263c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002640:	2300      	movs	r3, #0
 8002642:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002646:	2300      	movs	r3, #0
 8002648:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800264c:	2300      	movs	r3, #0
 800264e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002652:	2300      	movs	r3, #0
 8002654:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800265e:	2300      	movs	r3, #0
 8002660:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002664:	2300      	movs	r3, #0
 8002666:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800266a:	2300      	movs	r3, #0
 800266c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002676:	2300      	movs	r3, #0
 8002678:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800267c:	2300      	movs	r3, #0
 800267e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800268c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002690:	4baa      	ldr	r3, [pc, #680]	; (800293c <ETH_MACDMAConfig+0x384>)
 8002692:	4013      	ands	r3, r2
 8002694:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002698:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800269a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800269c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800269e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80026a0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80026a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80026a4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80026aa:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80026ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80026ae:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80026b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80026b2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80026b8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80026ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80026bc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80026be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80026c0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80026c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80026c4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80026c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80026c8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80026ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80026cc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80026ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026e0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026ec:	2001      	movs	r0, #1
 80026ee:	f7fe fc6b 	bl	8000fc8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026fa:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80026fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80026fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002700:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002702:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002704:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002706:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800270a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800270c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002710:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002712:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002716:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002718:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800271c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002720:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002728:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800272a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002736:	2001      	movs	r0, #1
 8002738:	f7fe fc46 	bl	8000fc8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002744:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800274e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002758:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002764:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002768:	f64f 7341 	movw	r3, #65345	; 0xff41
 800276c:	4013      	ands	r3, r2
 800276e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002772:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002776:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002778:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800277c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800277e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002782:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002784:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002788:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800278a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800278e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002790:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002794:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002796:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027a8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80027b4:	2001      	movs	r0, #1
 80027b6:	f7fe fc07 	bl	8000fc8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027c2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80027c4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80027c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027de:	2001      	movs	r0, #1
 80027e0:	f7fe fbf2 	bl	8000fc8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027ec:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80027f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027f6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80027fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002800:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800280a:	2300      	movs	r3, #0
 800280c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002812:	2304      	movs	r3, #4
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800281c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002820:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002822:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002826:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800282c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002832:	2300      	movs	r3, #0
 8002834:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002836:	2300      	movs	r3, #0
 8002838:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002848:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800284c:	4b3c      	ldr	r3, [pc, #240]	; (8002940 <ETH_MACDMAConfig+0x388>)
 800284e:	4013      	ands	r3, r2
 8002850:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002854:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002856:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002858:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800285a:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800285c:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800285e:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002860:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002862:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002864:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002866:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002868:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800286a:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800286c:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002870:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002872:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002874:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002876:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002888:	461a      	mov	r2, r3
 800288a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800288e:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800289e:	2001      	movs	r0, #1
 80028a0:	f7fe fb92 	bl	8000fc8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ac:	461a      	mov	r2, r3
 80028ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028b2:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80028b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80028b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80028b8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80028ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80028bc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80028be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80028c0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80028c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80028c4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80028c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028c8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80028ca:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80028cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80028ce:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028dc:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80028ec:	2001      	movs	r0, #1
 80028ee:	f7fe fb6b 	bl	8000fc8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028fa:	461a      	mov	r2, r3
 80028fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002900:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d10d      	bne.n	8002926 <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002920:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002924:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	461a      	mov	r2, r3
 800292c:	2100      	movs	r1, #0
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f808 	bl	8002944 <ETH_MACAddressConfig>
}
 8002934:	bf00      	nop
 8002936:	37c0      	adds	r7, #192	; 0xc0
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	ff20810f 	.word	0xff20810f
 8002940:	f8de3f23 	.word	0xf8de3f23

08002944 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002944:	b480      	push	{r7}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3305      	adds	r3, #5
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	021b      	lsls	r3, r3, #8
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	3204      	adds	r2, #4
 800295c:	7812      	ldrb	r2, [r2, #0]
 800295e:	4313      	orrs	r3, r2
 8002960:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	4b11      	ldr	r3, [pc, #68]	; (80029ac <ETH_MACAddressConfig+0x68>)
 8002966:	4413      	add	r3, r2
 8002968:	461a      	mov	r2, r3
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3303      	adds	r3, #3
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	061a      	lsls	r2, r3, #24
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3302      	adds	r3, #2
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	041b      	lsls	r3, r3, #16
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3301      	adds	r3, #1
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	4313      	orrs	r3, r2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	7812      	ldrb	r2, [r2, #0]
 800298e:	4313      	orrs	r3, r2
 8002990:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <ETH_MACAddressConfig+0x6c>)
 8002996:	4413      	add	r3, r2
 8002998:	461a      	mov	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	6013      	str	r3, [r2, #0]
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40028040 	.word	0x40028040
 80029b0:	40028044 	.word	0x40028044

080029b4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0208 	orr.w	r2, r2, #8
 80029ce:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80029d8:	2001      	movs	r0, #1
 80029da:	f000 f8dd 	bl	8002b98 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	601a      	str	r2, [r3, #0]
}
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0208 	bic.w	r2, r2, #8
 8002a08:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002a12:	2001      	movs	r0, #1
 8002a14:	f000 f8c0 	bl	8002b98 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	601a      	str	r2, [r3, #0]
}
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0204 	orr.w	r2, r2, #4
 8002a42:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	f000 f8a3 	bl	8002b98 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	601a      	str	r2, [r3, #0]
}
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0204 	bic.w	r2, r2, #4
 8002a7c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002a86:	2001      	movs	r0, #1
 8002a88:	f000 f886 	bl	8002b98 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	601a      	str	r2, [r3, #0]
}
 8002a94:	bf00      	nop
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6812      	ldr	r2, [r2, #0]
 8002ab2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ab6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002aba:	6193      	str	r3, [r2, #24]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ae2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ae6:	6193      	str	r3, [r2, #24]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	f043 0302 	orr.w	r3, r3, #2
 8002b0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b12:	6193      	str	r3, [r2, #24]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	f023 0302 	bic.w	r3, r3, #2
 8002b3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b3e:	6193      	str	r3, [r2, #24]
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b6e:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	f000 f80b 	bl	8002b98 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b8c:	6193      	str	r3, [r2, #24]
}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <ETH_Delay+0x38>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a0b      	ldr	r2, [pc, #44]	; (8002bd4 <ETH_Delay+0x3c>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	0a5b      	lsrs	r3, r3, #9
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
 8002bb2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002bb4:	bf00      	nop
  } 
  while (Delay --);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1e5a      	subs	r2, r3, #1
 8002bba:	60fa      	str	r2, [r7, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f9      	bne.n	8002bb4 <ETH_Delay+0x1c>
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	10624dd3 	.word	0x10624dd3

08002bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b089      	sub	sp, #36	; 0x24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	e16b      	b.n	8002ecc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4013      	ands	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	f040 815a 	bne.w	8002ec6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d00b      	beq.n	8002c32 <HAL_GPIO_Init+0x5a>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d007      	beq.n	8002c32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c26:	2b11      	cmp	r3, #17
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b12      	cmp	r3, #18
 8002c30:	d130      	bne.n	8002c94 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c68:	2201      	movs	r2, #1
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 0201 	and.w	r2, r3, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d003      	beq.n	8002cd4 <HAL_GPIO_Init+0xfc>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b12      	cmp	r3, #18
 8002cd2:	d123      	bne.n	8002d1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	08da      	lsrs	r2, r3, #3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3208      	adds	r2, #8
 8002cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	220f      	movs	r2, #15
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	08da      	lsrs	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3208      	adds	r2, #8
 8002d16:	69b9      	ldr	r1, [r7, #24]
 8002d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	2203      	movs	r2, #3
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 0203 	and.w	r2, r3, #3
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80b4 	beq.w	8002ec6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	4b60      	ldr	r3, [pc, #384]	; (8002ee4 <HAL_GPIO_Init+0x30c>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	4a5f      	ldr	r2, [pc, #380]	; (8002ee4 <HAL_GPIO_Init+0x30c>)
 8002d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d6e:	4b5d      	ldr	r3, [pc, #372]	; (8002ee4 <HAL_GPIO_Init+0x30c>)
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d7a:	4a5b      	ldr	r2, [pc, #364]	; (8002ee8 <HAL_GPIO_Init+0x310>)
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	089b      	lsrs	r3, r3, #2
 8002d80:	3302      	adds	r3, #2
 8002d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	220f      	movs	r2, #15
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a52      	ldr	r2, [pc, #328]	; (8002eec <HAL_GPIO_Init+0x314>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d02b      	beq.n	8002dfe <HAL_GPIO_Init+0x226>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a51      	ldr	r2, [pc, #324]	; (8002ef0 <HAL_GPIO_Init+0x318>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d025      	beq.n	8002dfa <HAL_GPIO_Init+0x222>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a50      	ldr	r2, [pc, #320]	; (8002ef4 <HAL_GPIO_Init+0x31c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d01f      	beq.n	8002df6 <HAL_GPIO_Init+0x21e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a4f      	ldr	r2, [pc, #316]	; (8002ef8 <HAL_GPIO_Init+0x320>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d019      	beq.n	8002df2 <HAL_GPIO_Init+0x21a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4e      	ldr	r2, [pc, #312]	; (8002efc <HAL_GPIO_Init+0x324>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d013      	beq.n	8002dee <HAL_GPIO_Init+0x216>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4d      	ldr	r2, [pc, #308]	; (8002f00 <HAL_GPIO_Init+0x328>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00d      	beq.n	8002dea <HAL_GPIO_Init+0x212>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a4c      	ldr	r2, [pc, #304]	; (8002f04 <HAL_GPIO_Init+0x32c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d007      	beq.n	8002de6 <HAL_GPIO_Init+0x20e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a4b      	ldr	r2, [pc, #300]	; (8002f08 <HAL_GPIO_Init+0x330>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d101      	bne.n	8002de2 <HAL_GPIO_Init+0x20a>
 8002dde:	2307      	movs	r3, #7
 8002de0:	e00e      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002de2:	2308      	movs	r3, #8
 8002de4:	e00c      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002de6:	2306      	movs	r3, #6
 8002de8:	e00a      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002dea:	2305      	movs	r3, #5
 8002dec:	e008      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002dee:	2304      	movs	r3, #4
 8002df0:	e006      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002df2:	2303      	movs	r3, #3
 8002df4:	e004      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e002      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	f002 0203 	and.w	r2, r2, #3
 8002e06:	0092      	lsls	r2, r2, #2
 8002e08:	4093      	lsls	r3, r2
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e10:	4935      	ldr	r1, [pc, #212]	; (8002ee8 <HAL_GPIO_Init+0x310>)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	089b      	lsrs	r3, r3, #2
 8002e16:	3302      	adds	r3, #2
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e1e:	4b3b      	ldr	r3, [pc, #236]	; (8002f0c <HAL_GPIO_Init+0x334>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e42:	4a32      	ldr	r2, [pc, #200]	; (8002f0c <HAL_GPIO_Init+0x334>)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e48:	4b30      	ldr	r3, [pc, #192]	; (8002f0c <HAL_GPIO_Init+0x334>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e6c:	4a27      	ldr	r2, [pc, #156]	; (8002f0c <HAL_GPIO_Init+0x334>)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e72:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <HAL_GPIO_Init+0x334>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e96:	4a1d      	ldr	r2, [pc, #116]	; (8002f0c <HAL_GPIO_Init+0x334>)
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <HAL_GPIO_Init+0x334>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ec0:	4a12      	ldr	r2, [pc, #72]	; (8002f0c <HAL_GPIO_Init+0x334>)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	61fb      	str	r3, [r7, #28]
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	2b0f      	cmp	r3, #15
 8002ed0:	f67f ae90 	bls.w	8002bf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3724      	adds	r7, #36	; 0x24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40013800 	.word	0x40013800
 8002eec:	40020000 	.word	0x40020000
 8002ef0:	40020400 	.word	0x40020400
 8002ef4:	40020800 	.word	0x40020800
 8002ef8:	40020c00 	.word	0x40020c00
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40021400 	.word	0x40021400
 8002f04:	40021800 	.word	0x40021800
 8002f08:	40021c00 	.word	0x40021c00
 8002f0c:	40013c00 	.word	0x40013c00

08002f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	807b      	strh	r3, [r7, #2]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f20:	787b      	ldrb	r3, [r7, #1]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f26:	887a      	ldrh	r2, [r7, #2]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f2c:	e003      	b.n	8002f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f2e:	887b      	ldrh	r3, [r7, #2]
 8002f30:	041a      	lsls	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	619a      	str	r2, [r3, #24]
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e25e      	b.n	8003414 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d075      	beq.n	800304e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f62:	4b88      	ldr	r3, [pc, #544]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d00c      	beq.n	8002f88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f6e:	4b85      	ldr	r3, [pc, #532]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d112      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f7a:	4b82      	ldr	r3, [pc, #520]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f86:	d10b      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f88:	4b7e      	ldr	r3, [pc, #504]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d05b      	beq.n	800304c <HAL_RCC_OscConfig+0x108>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d157      	bne.n	800304c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e239      	b.n	8003414 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa8:	d106      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x74>
 8002faa:	4b76      	ldr	r3, [pc, #472]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a75      	ldr	r2, [pc, #468]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e01d      	b.n	8002ff4 <HAL_RCC_OscConfig+0xb0>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCC_OscConfig+0x98>
 8002fc2:	4b70      	ldr	r3, [pc, #448]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a6f      	ldr	r2, [pc, #444]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	4b6d      	ldr	r3, [pc, #436]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a6c      	ldr	r2, [pc, #432]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	e00b      	b.n	8002ff4 <HAL_RCC_OscConfig+0xb0>
 8002fdc:	4b69      	ldr	r3, [pc, #420]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a68      	ldr	r2, [pc, #416]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	4b66      	ldr	r3, [pc, #408]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a65      	ldr	r2, [pc, #404]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8002fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d013      	beq.n	8003024 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffc:	f7fd ffd8 	bl	8000fb0 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003004:	f7fd ffd4 	bl	8000fb0 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b64      	cmp	r3, #100	; 0x64
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e1fe      	b.n	8003414 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003016:	4b5b      	ldr	r3, [pc, #364]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCC_OscConfig+0xc0>
 8003022:	e014      	b.n	800304e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7fd ffc4 	bl	8000fb0 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800302c:	f7fd ffc0 	bl	8000fb0 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b64      	cmp	r3, #100	; 0x64
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e1ea      	b.n	8003414 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800303e:	4b51      	ldr	r3, [pc, #324]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0xe8>
 800304a:	e000      	b.n	800304e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d063      	beq.n	8003122 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800305a:	4b4a      	ldr	r3, [pc, #296]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00b      	beq.n	800307e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003066:	4b47      	ldr	r3, [pc, #284]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800306e:	2b08      	cmp	r3, #8
 8003070:	d11c      	bne.n	80030ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003072:	4b44      	ldr	r3, [pc, #272]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d116      	bne.n	80030ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307e:	4b41      	ldr	r3, [pc, #260]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <HAL_RCC_OscConfig+0x152>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d001      	beq.n	8003096 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e1be      	b.n	8003414 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003096:	4b3b      	ldr	r3, [pc, #236]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4937      	ldr	r1, [pc, #220]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030aa:	e03a      	b.n	8003122 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d020      	beq.n	80030f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030b4:	4b34      	ldr	r3, [pc, #208]	; (8003188 <HAL_RCC_OscConfig+0x244>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ba:	f7fd ff79 	bl	8000fb0 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030c2:	f7fd ff75 	bl	8000fb0 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e19f      	b.n	8003414 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d4:	4b2b      	ldr	r3, [pc, #172]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e0:	4b28      	ldr	r3, [pc, #160]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4925      	ldr	r1, [pc, #148]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	600b      	str	r3, [r1, #0]
 80030f4:	e015      	b.n	8003122 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030f6:	4b24      	ldr	r3, [pc, #144]	; (8003188 <HAL_RCC_OscConfig+0x244>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7fd ff58 	bl	8000fb0 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003104:	f7fd ff54 	bl	8000fb0 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e17e      	b.n	8003414 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003116:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d036      	beq.n	800319c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d016      	beq.n	8003164 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003136:	4b15      	ldr	r3, [pc, #84]	; (800318c <HAL_RCC_OscConfig+0x248>)
 8003138:	2201      	movs	r2, #1
 800313a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313c:	f7fd ff38 	bl	8000fb0 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003144:	f7fd ff34 	bl	8000fb0 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e15e      	b.n	8003414 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003156:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <HAL_RCC_OscConfig+0x240>)
 8003158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0x200>
 8003162:	e01b      	b.n	800319c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003164:	4b09      	ldr	r3, [pc, #36]	; (800318c <HAL_RCC_OscConfig+0x248>)
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316a:	f7fd ff21 	bl	8000fb0 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003170:	e00e      	b.n	8003190 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003172:	f7fd ff1d 	bl	8000fb0 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d907      	bls.n	8003190 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e147      	b.n	8003414 <HAL_RCC_OscConfig+0x4d0>
 8003184:	40023800 	.word	0x40023800
 8003188:	42470000 	.word	0x42470000
 800318c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003190:	4b88      	ldr	r3, [pc, #544]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1ea      	bne.n	8003172 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 8097 	beq.w	80032d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031aa:	2300      	movs	r3, #0
 80031ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ae:	4b81      	ldr	r3, [pc, #516]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10f      	bne.n	80031da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	4b7d      	ldr	r3, [pc, #500]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	4a7c      	ldr	r2, [pc, #496]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 80031c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ca:	4b7a      	ldr	r3, [pc, #488]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d2:	60bb      	str	r3, [r7, #8]
 80031d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031d6:	2301      	movs	r3, #1
 80031d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031da:	4b77      	ldr	r3, [pc, #476]	; (80033b8 <HAL_RCC_OscConfig+0x474>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d118      	bne.n	8003218 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031e6:	4b74      	ldr	r3, [pc, #464]	; (80033b8 <HAL_RCC_OscConfig+0x474>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a73      	ldr	r2, [pc, #460]	; (80033b8 <HAL_RCC_OscConfig+0x474>)
 80031ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f2:	f7fd fedd 	bl	8000fb0 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031fa:	f7fd fed9 	bl	8000fb0 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e103      	b.n	8003414 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320c:	4b6a      	ldr	r3, [pc, #424]	; (80033b8 <HAL_RCC_OscConfig+0x474>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f0      	beq.n	80031fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d106      	bne.n	800322e <HAL_RCC_OscConfig+0x2ea>
 8003220:	4b64      	ldr	r3, [pc, #400]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003224:	4a63      	ldr	r2, [pc, #396]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6713      	str	r3, [r2, #112]	; 0x70
 800322c:	e01c      	b.n	8003268 <HAL_RCC_OscConfig+0x324>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b05      	cmp	r3, #5
 8003234:	d10c      	bne.n	8003250 <HAL_RCC_OscConfig+0x30c>
 8003236:	4b5f      	ldr	r3, [pc, #380]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323a:	4a5e      	ldr	r2, [pc, #376]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 800323c:	f043 0304 	orr.w	r3, r3, #4
 8003240:	6713      	str	r3, [r2, #112]	; 0x70
 8003242:	4b5c      	ldr	r3, [pc, #368]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	4a5b      	ldr	r2, [pc, #364]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	6713      	str	r3, [r2, #112]	; 0x70
 800324e:	e00b      	b.n	8003268 <HAL_RCC_OscConfig+0x324>
 8003250:	4b58      	ldr	r3, [pc, #352]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	4a57      	ldr	r2, [pc, #348]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003256:	f023 0301 	bic.w	r3, r3, #1
 800325a:	6713      	str	r3, [r2, #112]	; 0x70
 800325c:	4b55      	ldr	r3, [pc, #340]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	4a54      	ldr	r2, [pc, #336]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003262:	f023 0304 	bic.w	r3, r3, #4
 8003266:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d015      	beq.n	800329c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003270:	f7fd fe9e 	bl	8000fb0 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003276:	e00a      	b.n	800328e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003278:	f7fd fe9a 	bl	8000fb0 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f241 3288 	movw	r2, #5000	; 0x1388
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e0c2      	b.n	8003414 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800328e:	4b49      	ldr	r3, [pc, #292]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0ee      	beq.n	8003278 <HAL_RCC_OscConfig+0x334>
 800329a:	e014      	b.n	80032c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329c:	f7fd fe88 	bl	8000fb0 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a4:	f7fd fe84 	bl	8000fb0 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e0ac      	b.n	8003414 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ba:	4b3e      	ldr	r3, [pc, #248]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1ee      	bne.n	80032a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032c6:	7dfb      	ldrb	r3, [r7, #23]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d105      	bne.n	80032d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032cc:	4b39      	ldr	r3, [pc, #228]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	4a38      	ldr	r2, [pc, #224]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 80032d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 8098 	beq.w	8003412 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032e2:	4b34      	ldr	r3, [pc, #208]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d05c      	beq.n	80033a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d141      	bne.n	800337a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f6:	4b31      	ldr	r3, [pc, #196]	; (80033bc <HAL_RCC_OscConfig+0x478>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fc:	f7fd fe58 	bl	8000fb0 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003304:	f7fd fe54 	bl	8000fb0 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e07e      	b.n	8003414 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003316:	4b27      	ldr	r3, [pc, #156]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69da      	ldr	r2, [r3, #28]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	019b      	lsls	r3, r3, #6
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	085b      	lsrs	r3, r3, #1
 800333a:	3b01      	subs	r3, #1
 800333c:	041b      	lsls	r3, r3, #16
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	061b      	lsls	r3, r3, #24
 8003346:	491b      	ldr	r1, [pc, #108]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <HAL_RCC_OscConfig+0x478>)
 800334e:	2201      	movs	r2, #1
 8003350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003352:	f7fd fe2d 	bl	8000fb0 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335a:	f7fd fe29 	bl	8000fb0 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e053      	b.n	8003414 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x416>
 8003378:	e04b      	b.n	8003412 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <HAL_RCC_OscConfig+0x478>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7fd fe16 	bl	8000fb0 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003388:	f7fd fe12 	bl	8000fb0 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e03c      	b.n	8003414 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_RCC_OscConfig+0x470>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x444>
 80033a6:	e034      	b.n	8003412 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e02f      	b.n	8003414 <HAL_RCC_OscConfig+0x4d0>
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40007000 	.word	0x40007000
 80033bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033c0:	4b16      	ldr	r3, [pc, #88]	; (800341c <HAL_RCC_OscConfig+0x4d8>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d11c      	bne.n	800340e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d115      	bne.n	800340e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033e8:	4013      	ands	r3, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d10d      	bne.n	800340e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d106      	bne.n	800340e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800340a:	429a      	cmp	r2, r3
 800340c:	d001      	beq.n	8003412 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40023800 	.word	0x40023800

08003420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0cc      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003434:	4b68      	ldr	r3, [pc, #416]	; (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d90c      	bls.n	800345c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b65      	ldr	r3, [pc, #404]	; (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b63      	ldr	r3, [pc, #396]	; (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0b8      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d020      	beq.n	80034aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003474:	4b59      	ldr	r3, [pc, #356]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	4a58      	ldr	r2, [pc, #352]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800347e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800348c:	4b53      	ldr	r3, [pc, #332]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	4a52      	ldr	r2, [pc, #328]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003496:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003498:	4b50      	ldr	r3, [pc, #320]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	494d      	ldr	r1, [pc, #308]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d044      	beq.n	8003540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d107      	bne.n	80034ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034be:	4b47      	ldr	r3, [pc, #284]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d119      	bne.n	80034fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e07f      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d003      	beq.n	80034de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d107      	bne.n	80034ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034de:	4b3f      	ldr	r3, [pc, #252]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e06f      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ee:	4b3b      	ldr	r3, [pc, #236]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e067      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034fe:	4b37      	ldr	r3, [pc, #220]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f023 0203 	bic.w	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4934      	ldr	r1, [pc, #208]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	4313      	orrs	r3, r2
 800350e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003510:	f7fd fd4e 	bl	8000fb0 <HAL_GetTick>
 8003514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	e00a      	b.n	800352e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003518:	f7fd fd4a 	bl	8000fb0 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	; 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e04f      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352e:	4b2b      	ldr	r3, [pc, #172]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 020c 	and.w	r2, r3, #12
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	429a      	cmp	r2, r3
 800353e:	d1eb      	bne.n	8003518 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003540:	4b25      	ldr	r3, [pc, #148]	; (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d20c      	bcs.n	8003568 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354e:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003556:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e032      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003574:	4b19      	ldr	r3, [pc, #100]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	4916      	ldr	r1, [pc, #88]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003592:	4b12      	ldr	r3, [pc, #72]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	490e      	ldr	r1, [pc, #56]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035a6:	f000 f821 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 80035aa:	4602      	mov	r2, r0
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	490a      	ldr	r1, [pc, #40]	; (80035e0 <HAL_RCC_ClockConfig+0x1c0>)
 80035b8:	5ccb      	ldrb	r3, [r1, r3]
 80035ba:	fa22 f303 	lsr.w	r3, r2, r3
 80035be:	4a09      	ldr	r2, [pc, #36]	; (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035c2:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fd fcae 	bl	8000f28 <HAL_InitTick>

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40023c00 	.word	0x40023c00
 80035dc:	40023800 	.word	0x40023800
 80035e0:	08014d68 	.word	0x08014d68
 80035e4:	20000000 	.word	0x20000000
 80035e8:	20000004 	.word	0x20000004

080035ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f0:	b094      	sub	sp, #80	; 0x50
 80035f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	647b      	str	r3, [r7, #68]	; 0x44
 80035f8:	2300      	movs	r3, #0
 80035fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035fc:	2300      	movs	r3, #0
 80035fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003604:	4b79      	ldr	r3, [pc, #484]	; (80037ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 030c 	and.w	r3, r3, #12
 800360c:	2b08      	cmp	r3, #8
 800360e:	d00d      	beq.n	800362c <HAL_RCC_GetSysClockFreq+0x40>
 8003610:	2b08      	cmp	r3, #8
 8003612:	f200 80e1 	bhi.w	80037d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x34>
 800361a:	2b04      	cmp	r3, #4
 800361c:	d003      	beq.n	8003626 <HAL_RCC_GetSysClockFreq+0x3a>
 800361e:	e0db      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003620:	4b73      	ldr	r3, [pc, #460]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003622:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003624:	e0db      	b.n	80037de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003626:	4b73      	ldr	r3, [pc, #460]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003628:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800362a:	e0d8      	b.n	80037de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800362c:	4b6f      	ldr	r3, [pc, #444]	; (80037ec <HAL_RCC_GetSysClockFreq+0x200>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003634:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003636:	4b6d      	ldr	r3, [pc, #436]	; (80037ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d063      	beq.n	800370a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003642:	4b6a      	ldr	r3, [pc, #424]	; (80037ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	099b      	lsrs	r3, r3, #6
 8003648:	2200      	movs	r2, #0
 800364a:	63bb      	str	r3, [r7, #56]	; 0x38
 800364c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800364e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003654:	633b      	str	r3, [r7, #48]	; 0x30
 8003656:	2300      	movs	r3, #0
 8003658:	637b      	str	r3, [r7, #52]	; 0x34
 800365a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800365e:	4622      	mov	r2, r4
 8003660:	462b      	mov	r3, r5
 8003662:	f04f 0000 	mov.w	r0, #0
 8003666:	f04f 0100 	mov.w	r1, #0
 800366a:	0159      	lsls	r1, r3, #5
 800366c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003670:	0150      	lsls	r0, r2, #5
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4621      	mov	r1, r4
 8003678:	1a51      	subs	r1, r2, r1
 800367a:	6139      	str	r1, [r7, #16]
 800367c:	4629      	mov	r1, r5
 800367e:	eb63 0301 	sbc.w	r3, r3, r1
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003690:	4659      	mov	r1, fp
 8003692:	018b      	lsls	r3, r1, #6
 8003694:	4651      	mov	r1, sl
 8003696:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800369a:	4651      	mov	r1, sl
 800369c:	018a      	lsls	r2, r1, #6
 800369e:	4651      	mov	r1, sl
 80036a0:	ebb2 0801 	subs.w	r8, r2, r1
 80036a4:	4659      	mov	r1, fp
 80036a6:	eb63 0901 	sbc.w	r9, r3, r1
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036be:	4690      	mov	r8, r2
 80036c0:	4699      	mov	r9, r3
 80036c2:	4623      	mov	r3, r4
 80036c4:	eb18 0303 	adds.w	r3, r8, r3
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	462b      	mov	r3, r5
 80036cc:	eb49 0303 	adc.w	r3, r9, r3
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036de:	4629      	mov	r1, r5
 80036e0:	024b      	lsls	r3, r1, #9
 80036e2:	4621      	mov	r1, r4
 80036e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036e8:	4621      	mov	r1, r4
 80036ea:	024a      	lsls	r2, r1, #9
 80036ec:	4610      	mov	r0, r2
 80036ee:	4619      	mov	r1, r3
 80036f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036f2:	2200      	movs	r2, #0
 80036f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036fc:	f7fc fdd0 	bl	80002a0 <__aeabi_uldivmod>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4613      	mov	r3, r2
 8003706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003708:	e058      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800370a:	4b38      	ldr	r3, [pc, #224]	; (80037ec <HAL_RCC_GetSysClockFreq+0x200>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	099b      	lsrs	r3, r3, #6
 8003710:	2200      	movs	r2, #0
 8003712:	4618      	mov	r0, r3
 8003714:	4611      	mov	r1, r2
 8003716:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800371a:	623b      	str	r3, [r7, #32]
 800371c:	2300      	movs	r3, #0
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
 8003720:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003724:	4642      	mov	r2, r8
 8003726:	464b      	mov	r3, r9
 8003728:	f04f 0000 	mov.w	r0, #0
 800372c:	f04f 0100 	mov.w	r1, #0
 8003730:	0159      	lsls	r1, r3, #5
 8003732:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003736:	0150      	lsls	r0, r2, #5
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4641      	mov	r1, r8
 800373e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003742:	4649      	mov	r1, r9
 8003744:	eb63 0b01 	sbc.w	fp, r3, r1
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003754:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003758:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800375c:	ebb2 040a 	subs.w	r4, r2, sl
 8003760:	eb63 050b 	sbc.w	r5, r3, fp
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	00eb      	lsls	r3, r5, #3
 800376e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003772:	00e2      	lsls	r2, r4, #3
 8003774:	4614      	mov	r4, r2
 8003776:	461d      	mov	r5, r3
 8003778:	4643      	mov	r3, r8
 800377a:	18e3      	adds	r3, r4, r3
 800377c:	603b      	str	r3, [r7, #0]
 800377e:	464b      	mov	r3, r9
 8003780:	eb45 0303 	adc.w	r3, r5, r3
 8003784:	607b      	str	r3, [r7, #4]
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003792:	4629      	mov	r1, r5
 8003794:	028b      	lsls	r3, r1, #10
 8003796:	4621      	mov	r1, r4
 8003798:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800379c:	4621      	mov	r1, r4
 800379e:	028a      	lsls	r2, r1, #10
 80037a0:	4610      	mov	r0, r2
 80037a2:	4619      	mov	r1, r3
 80037a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037a6:	2200      	movs	r2, #0
 80037a8:	61bb      	str	r3, [r7, #24]
 80037aa:	61fa      	str	r2, [r7, #28]
 80037ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037b0:	f7fc fd76 	bl	80002a0 <__aeabi_uldivmod>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4613      	mov	r3, r2
 80037ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037bc:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <HAL_RCC_GetSysClockFreq+0x200>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	0c1b      	lsrs	r3, r3, #16
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	3301      	adds	r3, #1
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80037cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037d6:	e002      	b.n	80037de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037d8:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80037da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3750      	adds	r7, #80	; 0x50
 80037e4:	46bd      	mov	sp, r7
 80037e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ea:	bf00      	nop
 80037ec:	40023800 	.word	0x40023800
 80037f0:	00f42400 	.word	0x00f42400
 80037f4:	007a1200 	.word	0x007a1200

080037f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037fc:	4b03      	ldr	r3, [pc, #12]	; (800380c <HAL_RCC_GetHCLKFreq+0x14>)
 80037fe:	681b      	ldr	r3, [r3, #0]
}
 8003800:	4618      	mov	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	20000000 	.word	0x20000000

08003810 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003816:	4b8d      	ldr	r3, [pc, #564]	; (8003a4c <MX_LWIP_Init+0x23c>)
 8003818:	22c0      	movs	r2, #192	; 0xc0
 800381a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800381c:	4b8b      	ldr	r3, [pc, #556]	; (8003a4c <MX_LWIP_Init+0x23c>)
 800381e:	22a8      	movs	r2, #168	; 0xa8
 8003820:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8003822:	4b8a      	ldr	r3, [pc, #552]	; (8003a4c <MX_LWIP_Init+0x23c>)
 8003824:	2201      	movs	r2, #1
 8003826:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 25;
 8003828:	4b88      	ldr	r3, [pc, #544]	; (8003a4c <MX_LWIP_Init+0x23c>)
 800382a:	2219      	movs	r2, #25
 800382c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800382e:	4b88      	ldr	r3, [pc, #544]	; (8003a50 <MX_LWIP_Init+0x240>)
 8003830:	22ff      	movs	r2, #255	; 0xff
 8003832:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003834:	4b86      	ldr	r3, [pc, #536]	; (8003a50 <MX_LWIP_Init+0x240>)
 8003836:	22ff      	movs	r2, #255	; 0xff
 8003838:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800383a:	4b85      	ldr	r3, [pc, #532]	; (8003a50 <MX_LWIP_Init+0x240>)
 800383c:	22ff      	movs	r2, #255	; 0xff
 800383e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003840:	4b83      	ldr	r3, [pc, #524]	; (8003a50 <MX_LWIP_Init+0x240>)
 8003842:	2200      	movs	r2, #0
 8003844:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003846:	4b83      	ldr	r3, [pc, #524]	; (8003a54 <MX_LWIP_Init+0x244>)
 8003848:	22c0      	movs	r2, #192	; 0xc0
 800384a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800384c:	4b81      	ldr	r3, [pc, #516]	; (8003a54 <MX_LWIP_Init+0x244>)
 800384e:	22a8      	movs	r2, #168	; 0xa8
 8003850:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8003852:	4b80      	ldr	r3, [pc, #512]	; (8003a54 <MX_LWIP_Init+0x244>)
 8003854:	2201      	movs	r2, #1
 8003856:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003858:	4b7e      	ldr	r3, [pc, #504]	; (8003a54 <MX_LWIP_Init+0x244>)
 800385a:	2201      	movs	r2, #1
 800385c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800385e:	f002 f9dd 	bl	8005c1c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003862:	4b7a      	ldr	r3, [pc, #488]	; (8003a4c <MX_LWIP_Init+0x23c>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	061a      	lsls	r2, r3, #24
 8003868:	4b78      	ldr	r3, [pc, #480]	; (8003a4c <MX_LWIP_Init+0x23c>)
 800386a:	785b      	ldrb	r3, [r3, #1]
 800386c:	041b      	lsls	r3, r3, #16
 800386e:	431a      	orrs	r2, r3
 8003870:	4b76      	ldr	r3, [pc, #472]	; (8003a4c <MX_LWIP_Init+0x23c>)
 8003872:	789b      	ldrb	r3, [r3, #2]
 8003874:	021b      	lsls	r3, r3, #8
 8003876:	4313      	orrs	r3, r2
 8003878:	4a74      	ldr	r2, [pc, #464]	; (8003a4c <MX_LWIP_Init+0x23c>)
 800387a:	78d2      	ldrb	r2, [r2, #3]
 800387c:	4313      	orrs	r3, r2
 800387e:	061a      	lsls	r2, r3, #24
 8003880:	4b72      	ldr	r3, [pc, #456]	; (8003a4c <MX_LWIP_Init+0x23c>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	0619      	lsls	r1, r3, #24
 8003886:	4b71      	ldr	r3, [pc, #452]	; (8003a4c <MX_LWIP_Init+0x23c>)
 8003888:	785b      	ldrb	r3, [r3, #1]
 800388a:	041b      	lsls	r3, r3, #16
 800388c:	4319      	orrs	r1, r3
 800388e:	4b6f      	ldr	r3, [pc, #444]	; (8003a4c <MX_LWIP_Init+0x23c>)
 8003890:	789b      	ldrb	r3, [r3, #2]
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	430b      	orrs	r3, r1
 8003896:	496d      	ldr	r1, [pc, #436]	; (8003a4c <MX_LWIP_Init+0x23c>)
 8003898:	78c9      	ldrb	r1, [r1, #3]
 800389a:	430b      	orrs	r3, r1
 800389c:	021b      	lsls	r3, r3, #8
 800389e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80038a2:	431a      	orrs	r2, r3
 80038a4:	4b69      	ldr	r3, [pc, #420]	; (8003a4c <MX_LWIP_Init+0x23c>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	0619      	lsls	r1, r3, #24
 80038aa:	4b68      	ldr	r3, [pc, #416]	; (8003a4c <MX_LWIP_Init+0x23c>)
 80038ac:	785b      	ldrb	r3, [r3, #1]
 80038ae:	041b      	lsls	r3, r3, #16
 80038b0:	4319      	orrs	r1, r3
 80038b2:	4b66      	ldr	r3, [pc, #408]	; (8003a4c <MX_LWIP_Init+0x23c>)
 80038b4:	789b      	ldrb	r3, [r3, #2]
 80038b6:	021b      	lsls	r3, r3, #8
 80038b8:	430b      	orrs	r3, r1
 80038ba:	4964      	ldr	r1, [pc, #400]	; (8003a4c <MX_LWIP_Init+0x23c>)
 80038bc:	78c9      	ldrb	r1, [r1, #3]
 80038be:	430b      	orrs	r3, r1
 80038c0:	0a1b      	lsrs	r3, r3, #8
 80038c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80038c6:	431a      	orrs	r2, r3
 80038c8:	4b60      	ldr	r3, [pc, #384]	; (8003a4c <MX_LWIP_Init+0x23c>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	0619      	lsls	r1, r3, #24
 80038ce:	4b5f      	ldr	r3, [pc, #380]	; (8003a4c <MX_LWIP_Init+0x23c>)
 80038d0:	785b      	ldrb	r3, [r3, #1]
 80038d2:	041b      	lsls	r3, r3, #16
 80038d4:	4319      	orrs	r1, r3
 80038d6:	4b5d      	ldr	r3, [pc, #372]	; (8003a4c <MX_LWIP_Init+0x23c>)
 80038d8:	789b      	ldrb	r3, [r3, #2]
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	430b      	orrs	r3, r1
 80038de:	495b      	ldr	r1, [pc, #364]	; (8003a4c <MX_LWIP_Init+0x23c>)
 80038e0:	78c9      	ldrb	r1, [r1, #3]
 80038e2:	430b      	orrs	r3, r1
 80038e4:	0e1b      	lsrs	r3, r3, #24
 80038e6:	4313      	orrs	r3, r2
 80038e8:	4a5b      	ldr	r2, [pc, #364]	; (8003a58 <MX_LWIP_Init+0x248>)
 80038ea:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80038ec:	4b58      	ldr	r3, [pc, #352]	; (8003a50 <MX_LWIP_Init+0x240>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	061a      	lsls	r2, r3, #24
 80038f2:	4b57      	ldr	r3, [pc, #348]	; (8003a50 <MX_LWIP_Init+0x240>)
 80038f4:	785b      	ldrb	r3, [r3, #1]
 80038f6:	041b      	lsls	r3, r3, #16
 80038f8:	431a      	orrs	r2, r3
 80038fa:	4b55      	ldr	r3, [pc, #340]	; (8003a50 <MX_LWIP_Init+0x240>)
 80038fc:	789b      	ldrb	r3, [r3, #2]
 80038fe:	021b      	lsls	r3, r3, #8
 8003900:	4313      	orrs	r3, r2
 8003902:	4a53      	ldr	r2, [pc, #332]	; (8003a50 <MX_LWIP_Init+0x240>)
 8003904:	78d2      	ldrb	r2, [r2, #3]
 8003906:	4313      	orrs	r3, r2
 8003908:	061a      	lsls	r2, r3, #24
 800390a:	4b51      	ldr	r3, [pc, #324]	; (8003a50 <MX_LWIP_Init+0x240>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	0619      	lsls	r1, r3, #24
 8003910:	4b4f      	ldr	r3, [pc, #316]	; (8003a50 <MX_LWIP_Init+0x240>)
 8003912:	785b      	ldrb	r3, [r3, #1]
 8003914:	041b      	lsls	r3, r3, #16
 8003916:	4319      	orrs	r1, r3
 8003918:	4b4d      	ldr	r3, [pc, #308]	; (8003a50 <MX_LWIP_Init+0x240>)
 800391a:	789b      	ldrb	r3, [r3, #2]
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	430b      	orrs	r3, r1
 8003920:	494b      	ldr	r1, [pc, #300]	; (8003a50 <MX_LWIP_Init+0x240>)
 8003922:	78c9      	ldrb	r1, [r1, #3]
 8003924:	430b      	orrs	r3, r1
 8003926:	021b      	lsls	r3, r3, #8
 8003928:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800392c:	431a      	orrs	r2, r3
 800392e:	4b48      	ldr	r3, [pc, #288]	; (8003a50 <MX_LWIP_Init+0x240>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	0619      	lsls	r1, r3, #24
 8003934:	4b46      	ldr	r3, [pc, #280]	; (8003a50 <MX_LWIP_Init+0x240>)
 8003936:	785b      	ldrb	r3, [r3, #1]
 8003938:	041b      	lsls	r3, r3, #16
 800393a:	4319      	orrs	r1, r3
 800393c:	4b44      	ldr	r3, [pc, #272]	; (8003a50 <MX_LWIP_Init+0x240>)
 800393e:	789b      	ldrb	r3, [r3, #2]
 8003940:	021b      	lsls	r3, r3, #8
 8003942:	430b      	orrs	r3, r1
 8003944:	4942      	ldr	r1, [pc, #264]	; (8003a50 <MX_LWIP_Init+0x240>)
 8003946:	78c9      	ldrb	r1, [r1, #3]
 8003948:	430b      	orrs	r3, r1
 800394a:	0a1b      	lsrs	r3, r3, #8
 800394c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003950:	431a      	orrs	r2, r3
 8003952:	4b3f      	ldr	r3, [pc, #252]	; (8003a50 <MX_LWIP_Init+0x240>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	0619      	lsls	r1, r3, #24
 8003958:	4b3d      	ldr	r3, [pc, #244]	; (8003a50 <MX_LWIP_Init+0x240>)
 800395a:	785b      	ldrb	r3, [r3, #1]
 800395c:	041b      	lsls	r3, r3, #16
 800395e:	4319      	orrs	r1, r3
 8003960:	4b3b      	ldr	r3, [pc, #236]	; (8003a50 <MX_LWIP_Init+0x240>)
 8003962:	789b      	ldrb	r3, [r3, #2]
 8003964:	021b      	lsls	r3, r3, #8
 8003966:	430b      	orrs	r3, r1
 8003968:	4939      	ldr	r1, [pc, #228]	; (8003a50 <MX_LWIP_Init+0x240>)
 800396a:	78c9      	ldrb	r1, [r1, #3]
 800396c:	430b      	orrs	r3, r1
 800396e:	0e1b      	lsrs	r3, r3, #24
 8003970:	4313      	orrs	r3, r2
 8003972:	4a3a      	ldr	r2, [pc, #232]	; (8003a5c <MX_LWIP_Init+0x24c>)
 8003974:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003976:	4b37      	ldr	r3, [pc, #220]	; (8003a54 <MX_LWIP_Init+0x244>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	061a      	lsls	r2, r3, #24
 800397c:	4b35      	ldr	r3, [pc, #212]	; (8003a54 <MX_LWIP_Init+0x244>)
 800397e:	785b      	ldrb	r3, [r3, #1]
 8003980:	041b      	lsls	r3, r3, #16
 8003982:	431a      	orrs	r2, r3
 8003984:	4b33      	ldr	r3, [pc, #204]	; (8003a54 <MX_LWIP_Init+0x244>)
 8003986:	789b      	ldrb	r3, [r3, #2]
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	4313      	orrs	r3, r2
 800398c:	4a31      	ldr	r2, [pc, #196]	; (8003a54 <MX_LWIP_Init+0x244>)
 800398e:	78d2      	ldrb	r2, [r2, #3]
 8003990:	4313      	orrs	r3, r2
 8003992:	061a      	lsls	r2, r3, #24
 8003994:	4b2f      	ldr	r3, [pc, #188]	; (8003a54 <MX_LWIP_Init+0x244>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	0619      	lsls	r1, r3, #24
 800399a:	4b2e      	ldr	r3, [pc, #184]	; (8003a54 <MX_LWIP_Init+0x244>)
 800399c:	785b      	ldrb	r3, [r3, #1]
 800399e:	041b      	lsls	r3, r3, #16
 80039a0:	4319      	orrs	r1, r3
 80039a2:	4b2c      	ldr	r3, [pc, #176]	; (8003a54 <MX_LWIP_Init+0x244>)
 80039a4:	789b      	ldrb	r3, [r3, #2]
 80039a6:	021b      	lsls	r3, r3, #8
 80039a8:	430b      	orrs	r3, r1
 80039aa:	492a      	ldr	r1, [pc, #168]	; (8003a54 <MX_LWIP_Init+0x244>)
 80039ac:	78c9      	ldrb	r1, [r1, #3]
 80039ae:	430b      	orrs	r3, r1
 80039b0:	021b      	lsls	r3, r3, #8
 80039b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039b6:	431a      	orrs	r2, r3
 80039b8:	4b26      	ldr	r3, [pc, #152]	; (8003a54 <MX_LWIP_Init+0x244>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	0619      	lsls	r1, r3, #24
 80039be:	4b25      	ldr	r3, [pc, #148]	; (8003a54 <MX_LWIP_Init+0x244>)
 80039c0:	785b      	ldrb	r3, [r3, #1]
 80039c2:	041b      	lsls	r3, r3, #16
 80039c4:	4319      	orrs	r1, r3
 80039c6:	4b23      	ldr	r3, [pc, #140]	; (8003a54 <MX_LWIP_Init+0x244>)
 80039c8:	789b      	ldrb	r3, [r3, #2]
 80039ca:	021b      	lsls	r3, r3, #8
 80039cc:	430b      	orrs	r3, r1
 80039ce:	4921      	ldr	r1, [pc, #132]	; (8003a54 <MX_LWIP_Init+0x244>)
 80039d0:	78c9      	ldrb	r1, [r1, #3]
 80039d2:	430b      	orrs	r3, r1
 80039d4:	0a1b      	lsrs	r3, r3, #8
 80039d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80039da:	431a      	orrs	r2, r3
 80039dc:	4b1d      	ldr	r3, [pc, #116]	; (8003a54 <MX_LWIP_Init+0x244>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	0619      	lsls	r1, r3, #24
 80039e2:	4b1c      	ldr	r3, [pc, #112]	; (8003a54 <MX_LWIP_Init+0x244>)
 80039e4:	785b      	ldrb	r3, [r3, #1]
 80039e6:	041b      	lsls	r3, r3, #16
 80039e8:	4319      	orrs	r1, r3
 80039ea:	4b1a      	ldr	r3, [pc, #104]	; (8003a54 <MX_LWIP_Init+0x244>)
 80039ec:	789b      	ldrb	r3, [r3, #2]
 80039ee:	021b      	lsls	r3, r3, #8
 80039f0:	430b      	orrs	r3, r1
 80039f2:	4918      	ldr	r1, [pc, #96]	; (8003a54 <MX_LWIP_Init+0x244>)
 80039f4:	78c9      	ldrb	r1, [r1, #3]
 80039f6:	430b      	orrs	r3, r1
 80039f8:	0e1b      	lsrs	r3, r3, #24
 80039fa:	4313      	orrs	r3, r2
 80039fc:	4a18      	ldr	r2, [pc, #96]	; (8003a60 <MX_LWIP_Init+0x250>)
 80039fe:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003a00:	4b18      	ldr	r3, [pc, #96]	; (8003a64 <MX_LWIP_Init+0x254>)
 8003a02:	9302      	str	r3, [sp, #8]
 8003a04:	4b18      	ldr	r3, [pc, #96]	; (8003a68 <MX_LWIP_Init+0x258>)
 8003a06:	9301      	str	r3, [sp, #4]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <MX_LWIP_Init+0x250>)
 8003a0e:	4a13      	ldr	r2, [pc, #76]	; (8003a5c <MX_LWIP_Init+0x24c>)
 8003a10:	4911      	ldr	r1, [pc, #68]	; (8003a58 <MX_LWIP_Init+0x248>)
 8003a12:	4816      	ldr	r0, [pc, #88]	; (8003a6c <MX_LWIP_Init+0x25c>)
 8003a14:	f002 fdd0 	bl	80065b8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003a18:	4814      	ldr	r0, [pc, #80]	; (8003a6c <MX_LWIP_Init+0x25c>)
 8003a1a:	f002 ff7f 	bl	800691c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003a1e:	4b13      	ldr	r3, [pc, #76]	; (8003a6c <MX_LWIP_Init+0x25c>)
 8003a20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003a24:	089b      	lsrs	r3, r3, #2
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003a30:	480e      	ldr	r0, [pc, #56]	; (8003a6c <MX_LWIP_Init+0x25c>)
 8003a32:	f002 ff83 	bl	800693c <netif_set_up>
 8003a36:	e002      	b.n	8003a3e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003a38:	480c      	ldr	r0, [pc, #48]	; (8003a6c <MX_LWIP_Init+0x25c>)
 8003a3a:	f002 ffeb 	bl	8006a14 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003a3e:	490c      	ldr	r1, [pc, #48]	; (8003a70 <MX_LWIP_Init+0x260>)
 8003a40:	480a      	ldr	r0, [pc, #40]	; (8003a6c <MX_LWIP_Init+0x25c>)
 8003a42:	f003 f819 	bl	8006a78 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003a46:	bf00      	nop
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	2000019c 	.word	0x2000019c
 8003a50:	200001a0 	.word	0x200001a0
 8003a54:	200001a4 	.word	0x200001a4
 8003a58:	20000190 	.word	0x20000190
 8003a5c:	20000194 	.word	0x20000194
 8003a60:	20000198 	.word	0x20000198
 8003a64:	08010279 	.word	0x08010279
 8003a68:	08004015 	.word	0x08004015
 8003a6c:	2000015c 	.word	0x2000015c
 8003a70:	08004081 	.word	0x08004081

08003a74 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003a78:	4803      	ldr	r0, [pc, #12]	; (8003a88 <MX_LWIP_Process+0x14>)
 8003a7a:	f000 faab 	bl	8003fd4 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8003a7e:	f00a f80f 	bl	800daa0 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	2000015c 	.word	0x2000015c

08003a8c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08e      	sub	sp, #56	; 0x38
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	605a      	str	r2, [r3, #4]
 8003a9e:	609a      	str	r2, [r3, #8]
 8003aa0:	60da      	str	r2, [r3, #12]
 8003aa2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a46      	ldr	r2, [pc, #280]	; (8003bc4 <HAL_ETH_MspInit+0x138>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	f040 8085 	bne.w	8003bba <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	623b      	str	r3, [r7, #32]
 8003ab4:	4b44      	ldr	r3, [pc, #272]	; (8003bc8 <HAL_ETH_MspInit+0x13c>)
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	4a43      	ldr	r2, [pc, #268]	; (8003bc8 <HAL_ETH_MspInit+0x13c>)
 8003aba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003abe:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac0:	4b41      	ldr	r3, [pc, #260]	; (8003bc8 <HAL_ETH_MspInit+0x13c>)
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac8:	623b      	str	r3, [r7, #32]
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	2300      	movs	r3, #0
 8003ace:	61fb      	str	r3, [r7, #28]
 8003ad0:	4b3d      	ldr	r3, [pc, #244]	; (8003bc8 <HAL_ETH_MspInit+0x13c>)
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	4a3c      	ldr	r2, [pc, #240]	; (8003bc8 <HAL_ETH_MspInit+0x13c>)
 8003ad6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ada:	6313      	str	r3, [r2, #48]	; 0x30
 8003adc:	4b3a      	ldr	r3, [pc, #232]	; (8003bc8 <HAL_ETH_MspInit+0x13c>)
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61bb      	str	r3, [r7, #24]
 8003aec:	4b36      	ldr	r3, [pc, #216]	; (8003bc8 <HAL_ETH_MspInit+0x13c>)
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	4a35      	ldr	r2, [pc, #212]	; (8003bc8 <HAL_ETH_MspInit+0x13c>)
 8003af2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003af6:	6313      	str	r3, [r2, #48]	; 0x30
 8003af8:	4b33      	ldr	r3, [pc, #204]	; (8003bc8 <HAL_ETH_MspInit+0x13c>)
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	4b2f      	ldr	r3, [pc, #188]	; (8003bc8 <HAL_ETH_MspInit+0x13c>)
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	4a2e      	ldr	r2, [pc, #184]	; (8003bc8 <HAL_ETH_MspInit+0x13c>)
 8003b0e:	f043 0304 	orr.w	r3, r3, #4
 8003b12:	6313      	str	r3, [r2, #48]	; 0x30
 8003b14:	4b2c      	ldr	r3, [pc, #176]	; (8003bc8 <HAL_ETH_MspInit+0x13c>)
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b20:	2300      	movs	r3, #0
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	4b28      	ldr	r3, [pc, #160]	; (8003bc8 <HAL_ETH_MspInit+0x13c>)
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	4a27      	ldr	r2, [pc, #156]	; (8003bc8 <HAL_ETH_MspInit+0x13c>)
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b30:	4b25      	ldr	r3, [pc, #148]	; (8003bc8 <HAL_ETH_MspInit+0x13c>)
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	4b21      	ldr	r3, [pc, #132]	; (8003bc8 <HAL_ETH_MspInit+0x13c>)
 8003b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b44:	4a20      	ldr	r2, [pc, #128]	; (8003bc8 <HAL_ETH_MspInit+0x13c>)
 8003b46:	f043 0302 	orr.w	r3, r3, #2
 8003b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b4c:	4b1e      	ldr	r3, [pc, #120]	; (8003bc8 <HAL_ETH_MspInit+0x13c>)
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003b58:	2332      	movs	r3, #50	; 0x32
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b64:	2303      	movs	r3, #3
 8003b66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b68:	230b      	movs	r3, #11
 8003b6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b70:	4619      	mov	r1, r3
 8003b72:	4816      	ldr	r0, [pc, #88]	; (8003bcc <HAL_ETH_MspInit+0x140>)
 8003b74:	f7ff f830 	bl	8002bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003b78:	2386      	movs	r3, #134	; 0x86
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b84:	2303      	movs	r3, #3
 8003b86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b88:	230b      	movs	r3, #11
 8003b8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b90:	4619      	mov	r1, r3
 8003b92:	480f      	ldr	r0, [pc, #60]	; (8003bd0 <HAL_ETH_MspInit+0x144>)
 8003b94:	f7ff f820 	bl	8002bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003b98:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003baa:	230b      	movs	r3, #11
 8003bac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4807      	ldr	r0, [pc, #28]	; (8003bd4 <HAL_ETH_MspInit+0x148>)
 8003bb6:	f7ff f80f 	bl	8002bd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003bba:	bf00      	nop
 8003bbc:	3738      	adds	r7, #56	; 0x38
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40028000 	.word	0x40028000
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40020800 	.word	0x40020800
 8003bd0:	40020000 	.word	0x40020000
 8003bd4:	40020400 	.word	0x40020400

08003bd8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003be4:	4b4d      	ldr	r3, [pc, #308]	; (8003d1c <low_level_init+0x144>)
 8003be6:	4a4e      	ldr	r2, [pc, #312]	; (8003d20 <low_level_init+0x148>)
 8003be8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003bea:	4b4c      	ldr	r3, [pc, #304]	; (8003d1c <low_level_init+0x144>)
 8003bec:	2201      	movs	r2, #1
 8003bee:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003bf0:	4b4a      	ldr	r3, [pc, #296]	; (8003d1c <low_level_init+0x144>)
 8003bf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bf6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003bf8:	4b48      	ldr	r3, [pc, #288]	; (8003d1c <low_level_init+0x144>)
 8003bfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bfe:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003c00:	4b46      	ldr	r3, [pc, #280]	; (8003d1c <low_level_init+0x144>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003c06:	2300      	movs	r3, #0
 8003c08:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003c0e:	23e1      	movs	r3, #225	; 0xe1
 8003c10:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003c12:	2300      	movs	r3, #0
 8003c14:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003c16:	2300      	movs	r3, #0
 8003c18:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003c1e:	4a3f      	ldr	r2, [pc, #252]	; (8003d1c <low_level_init+0x144>)
 8003c20:	f107 0308 	add.w	r3, r7, #8
 8003c24:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003c26:	4b3d      	ldr	r3, [pc, #244]	; (8003d1c <low_level_init+0x144>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003c2c:	4b3b      	ldr	r3, [pc, #236]	; (8003d1c <low_level_init+0x144>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003c32:	4b3a      	ldr	r3, [pc, #232]	; (8003d1c <low_level_init+0x144>)
 8003c34:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003c38:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003c3a:	4838      	ldr	r0, [pc, #224]	; (8003d1c <low_level_init+0x144>)
 8003c3c:	f7fd feba 	bl	80019b4 <HAL_ETH_Init>
 8003c40:	4603      	mov	r3, r0
 8003c42:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003c44:	7dfb      	ldrb	r3, [r7, #23]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d108      	bne.n	8003c5c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003c50:	f043 0304 	orr.w	r3, r3, #4
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	4a31      	ldr	r2, [pc, #196]	; (8003d24 <low_level_init+0x14c>)
 8003c60:	4931      	ldr	r1, [pc, #196]	; (8003d28 <low_level_init+0x150>)
 8003c62:	482e      	ldr	r0, [pc, #184]	; (8003d1c <low_level_init+0x144>)
 8003c64:	f7fe f840 	bl	8001ce8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003c68:	2304      	movs	r3, #4
 8003c6a:	4a30      	ldr	r2, [pc, #192]	; (8003d2c <low_level_init+0x154>)
 8003c6c:	4930      	ldr	r1, [pc, #192]	; (8003d30 <low_level_init+0x158>)
 8003c6e:	482b      	ldr	r0, [pc, #172]	; (8003d1c <low_level_init+0x144>)
 8003c70:	f7fe f8a2 	bl	8001db8 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2206      	movs	r2, #6
 8003c78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003c7c:	4b27      	ldr	r3, [pc, #156]	; (8003d1c <low_level_init+0x144>)
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	781a      	ldrb	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003c88:	4b24      	ldr	r3, [pc, #144]	; (8003d1c <low_level_init+0x144>)
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	785a      	ldrb	r2, [r3, #1]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003c94:	4b21      	ldr	r3, [pc, #132]	; (8003d1c <low_level_init+0x144>)
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	789a      	ldrb	r2, [r3, #2]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003ca0:	4b1e      	ldr	r3, [pc, #120]	; (8003d1c <low_level_init+0x144>)
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	78da      	ldrb	r2, [r3, #3]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003cac:	4b1b      	ldr	r3, [pc, #108]	; (8003d1c <low_level_init+0x144>)
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	791a      	ldrb	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003cb8:	4b18      	ldr	r3, [pc, #96]	; (8003d1c <low_level_init+0x144>)
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	795a      	ldrb	r2, [r3, #5]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003cca:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003cd2:	f043 030a 	orr.w	r3, r3, #10
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003cde:	480f      	ldr	r0, [pc, #60]	; (8003d1c <low_level_init+0x144>)
 8003ce0:	f7fe fb12 	bl	8002308 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003ce4:	f107 0310 	add.w	r3, r7, #16
 8003ce8:	461a      	mov	r2, r3
 8003cea:	211d      	movs	r1, #29
 8003cec:	480b      	ldr	r0, [pc, #44]	; (8003d1c <low_level_init+0x144>)
 8003cee:	f7fe fa3d 	bl	800216c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f043 030b 	orr.w	r3, r3, #11
 8003cf8:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	211d      	movs	r1, #29
 8003d00:	4806      	ldr	r0, [pc, #24]	; (8003d1c <low_level_init+0x144>)
 8003d02:	f7fe fa9b 	bl	800223c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003d06:	f107 0310 	add.w	r3, r7, #16
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	211d      	movs	r1, #29
 8003d0e:	4803      	ldr	r0, [pc, #12]	; (8003d1c <low_level_init+0x144>)
 8003d10:	f7fe fa2c 	bl	800216c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003d14:	bf00      	nop
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20003248 	.word	0x20003248
 8003d20:	40028000 	.word	0x40028000
 8003d24:	20001a78 	.word	0x20001a78
 8003d28:	20000228 	.word	0x20000228
 8003d2c:	200002a8 	.word	0x200002a8
 8003d30:	200001a8 	.word	0x200001a8

08003d34 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003d3e:	4b4b      	ldr	r3, [pc, #300]	; (8003e6c <low_level_output+0x138>)
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003d52:	2300      	movs	r3, #0
 8003d54:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003d56:	4b45      	ldr	r3, [pc, #276]	; (8003e6c <low_level_output+0x138>)
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	623b      	str	r3, [r7, #32]
 8003d64:	e05a      	b.n	8003e1c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	da03      	bge.n	8003d76 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003d6e:	23f8      	movs	r3, #248	; 0xf8
 8003d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003d74:	e05c      	b.n	8003e30 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	895b      	ldrh	r3, [r3, #10]
 8003d7a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003d80:	e02f      	b.n	8003de2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	18d0      	adds	r0, r2, r3
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	18d1      	adds	r1, r2, r3
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003d96:	3304      	adds	r3, #4
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f00c fb77 	bl	801048c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	da03      	bge.n	8003db4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003dac:	23f8      	movs	r3, #248	; 0xf8
 8003dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003db2:	e03d      	b.n	8003e30 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003dc4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003dd0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003ddc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	4413      	add	r3, r2
 8003de8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d8c8      	bhi.n	8003d82 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	18d0      	adds	r0, r2, r3
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4619      	mov	r1, r3
 8003e02:	f00c fb43 	bl	801048c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4413      	add	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	623b      	str	r3, [r7, #32]
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1a1      	bne.n	8003d66 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003e22:	6979      	ldr	r1, [r7, #20]
 8003e24:	4811      	ldr	r0, [pc, #68]	; (8003e6c <low_level_output+0x138>)
 8003e26:	f7fe f833 	bl	8001e90 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003e30:	4b0e      	ldr	r3, [pc, #56]	; (8003e6c <low_level_output+0x138>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f003 0320 	and.w	r3, r3, #32
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00d      	beq.n	8003e5e <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003e42:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <low_level_output+0x138>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	2320      	movs	r3, #32
 8003e4e:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <low_level_output+0x138>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e58:	461a      	mov	r2, r3
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8003e5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3728      	adds	r7, #40	; 0x28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20003248 	.word	0x20003248

08003e70 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08c      	sub	sp, #48	; 0x30
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003e80:	2300      	movs	r3, #0
 8003e82:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003e90:	2300      	movs	r3, #0
 8003e92:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003e94:	484e      	ldr	r0, [pc, #312]	; (8003fd0 <low_level_input+0x160>)
 8003e96:	f7fe f8e5 	bl	8002064 <HAL_ETH_GetReceivedFrame>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <low_level_input+0x34>

    return NULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	e091      	b.n	8003fc8 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003ea4:	4b4a      	ldr	r3, [pc, #296]	; (8003fd0 <low_level_input+0x160>)
 8003ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003eaa:	4b49      	ldr	r3, [pc, #292]	; (8003fd0 <low_level_input+0x160>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003eb0:	89fb      	ldrh	r3, [r7, #14]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d007      	beq.n	8003ec6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003eb6:	89fb      	ldrh	r3, [r7, #14]
 8003eb8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	f002 fe76 	bl	8006bb0 <pbuf_alloc>
 8003ec4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d04b      	beq.n	8003f64 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003ecc:	4b40      	ldr	r3, [pc, #256]	; (8003fd0 <low_level_input+0x160>)
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eda:	e040      	b.n	8003f5e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	895b      	ldrh	r3, [r3, #10]
 8003ee0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003ee6:	e021      	b.n	8003f2c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	18d0      	adds	r0, r2, r3
 8003ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	18d1      	adds	r1, r2, r3
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003efc:	3304      	adds	r3, #4
 8003efe:	461a      	mov	r2, r3
 8003f00:	f00c fac4 	bl	801048c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003f10:	69fa      	ldr	r2, [r7, #28]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	4413      	add	r3, r2
 8003f16:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003f1a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003f26:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	4413      	add	r3, r2
 8003f32:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d8d6      	bhi.n	8003ee8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	18d0      	adds	r0, r2, r3
 8003f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	4413      	add	r3, r2
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	f00c fa9e 	bl	801048c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003f50:	69fa      	ldr	r2, [r7, #28]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	4413      	add	r3, r2
 8003f56:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1bb      	bne.n	8003edc <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003f64:	4b1a      	ldr	r3, [pc, #104]	; (8003fd0 <low_level_input+0x160>)
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f68:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	e00b      	b.n	8003f88 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	3301      	adds	r3, #1
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <low_level_input+0x160>)
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d3ee      	bcc.n	8003f70 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003f92:	4b0f      	ldr	r3, [pc, #60]	; (8003fd0 <low_level_input+0x160>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003f98:	4b0d      	ldr	r3, [pc, #52]	; (8003fd0 <low_level_input+0x160>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00d      	beq.n	8003fc6 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003faa:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <low_level_input+0x160>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	2380      	movs	r3, #128	; 0x80
 8003fb6:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003fb8:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <low_level_input+0x160>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	6093      	str	r3, [r2, #8]
  }
  return p;
 8003fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3730      	adds	r7, #48	; 0x30
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20003248 	.word	0x20003248

08003fd4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7ff ff47 	bl	8003e70 <low_level_input>
 8003fe2:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d010      	beq.n	800400c <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	4798      	blx	r3
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003ff8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d006      	beq.n	800400e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f003 f8b9 	bl	8007178 <pbuf_free>
    p = NULL;
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	e000      	b.n	800400e <ethernetif_input+0x3a>
  if (p == NULL) return;
 800400c:	bf00      	nop
  }
}
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <ethernetif_init+0x1c>
 8004022:	4b0e      	ldr	r3, [pc, #56]	; (800405c <ethernetif_init+0x48>)
 8004024:	f240 2207 	movw	r2, #519	; 0x207
 8004028:	490d      	ldr	r1, [pc, #52]	; (8004060 <ethernetif_init+0x4c>)
 800402a:	480e      	ldr	r0, [pc, #56]	; (8004064 <ethernetif_init+0x50>)
 800402c:	f00c fa5e 	bl	80104ec <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2273      	movs	r2, #115	; 0x73
 8004034:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2274      	movs	r2, #116	; 0x74
 800403c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a09      	ldr	r2, [pc, #36]	; (8004068 <ethernetif_init+0x54>)
 8004044:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a08      	ldr	r2, [pc, #32]	; (800406c <ethernetif_init+0x58>)
 800404a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff fdc3 	bl	8003bd8 <low_level_init>

  return ERR_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	08011bd8 	.word	0x08011bd8
 8004060:	08011bf4 	.word	0x08011bf4
 8004064:	08011c04 	.word	0x08011c04
 8004068:	0800e731 	.word	0x0800e731
 800406c:	08003d35 	.word	0x08003d35

08004070 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004074:	f7fc ff9c 	bl	8000fb0 <HAL_GetTick>
 8004078:	4603      	mov	r3, r0
}
 800407a:	4618      	mov	r0, r3
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004088:	2300      	movs	r3, #0
 800408a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800408c:	2300      	movs	r3, #0
 800408e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004096:	089b      	lsrs	r3, r3, #2
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d05d      	beq.n	800415e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80040a2:	4b34      	ldr	r3, [pc, #208]	; (8004174 <ethernetif_update_config+0xf4>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d03f      	beq.n	800412a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80040aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040ae:	2100      	movs	r1, #0
 80040b0:	4830      	ldr	r0, [pc, #192]	; (8004174 <ethernetif_update_config+0xf4>)
 80040b2:	f7fe f8c3 	bl	800223c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80040b6:	f7fc ff7b 	bl	8000fb0 <HAL_GetTick>
 80040ba:	4603      	mov	r3, r0
 80040bc:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80040be:	f107 0308 	add.w	r3, r7, #8
 80040c2:	461a      	mov	r2, r3
 80040c4:	2101      	movs	r1, #1
 80040c6:	482b      	ldr	r0, [pc, #172]	; (8004174 <ethernetif_update_config+0xf4>)
 80040c8:	f7fe f850 	bl	800216c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80040cc:	f7fc ff70 	bl	8000fb0 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040da:	d828      	bhi.n	800412e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0eb      	beq.n	80040be <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80040e6:	f107 0308 	add.w	r3, r7, #8
 80040ea:	461a      	mov	r2, r3
 80040ec:	211f      	movs	r1, #31
 80040ee:	4821      	ldr	r0, [pc, #132]	; (8004174 <ethernetif_update_config+0xf4>)
 80040f0:	f7fe f83c 	bl	800216c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d004      	beq.n	8004108 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80040fe:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <ethernetif_update_config+0xf4>)
 8004100:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004104:	60da      	str	r2, [r3, #12]
 8004106:	e002      	b.n	800410e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004108:	4b1a      	ldr	r3, [pc, #104]	; (8004174 <ethernetif_update_config+0xf4>)
 800410a:	2200      	movs	r2, #0
 800410c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004118:	4b16      	ldr	r3, [pc, #88]	; (8004174 <ethernetif_update_config+0xf4>)
 800411a:	2200      	movs	r2, #0
 800411c:	609a      	str	r2, [r3, #8]
 800411e:	e016      	b.n	800414e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004120:	4b14      	ldr	r3, [pc, #80]	; (8004174 <ethernetif_update_config+0xf4>)
 8004122:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004126:	609a      	str	r2, [r3, #8]
 8004128:	e011      	b.n	800414e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800412a:	bf00      	nop
 800412c:	e000      	b.n	8004130 <ethernetif_update_config+0xb0>
          goto error;
 800412e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004130:	4b10      	ldr	r3, [pc, #64]	; (8004174 <ethernetif_update_config+0xf4>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	08db      	lsrs	r3, r3, #3
 8004136:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004138:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <ethernetif_update_config+0xf4>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	085b      	lsrs	r3, r3, #1
 800413e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004140:	4313      	orrs	r3, r2
 8004142:	b29b      	uxth	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	2100      	movs	r1, #0
 8004148:	480a      	ldr	r0, [pc, #40]	; (8004174 <ethernetif_update_config+0xf4>)
 800414a:	f7fe f877 	bl	800223c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800414e:	2100      	movs	r1, #0
 8004150:	4808      	ldr	r0, [pc, #32]	; (8004174 <ethernetif_update_config+0xf4>)
 8004152:	f7fe f937 	bl	80023c4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004156:	4807      	ldr	r0, [pc, #28]	; (8004174 <ethernetif_update_config+0xf4>)
 8004158:	f7fe f8d6 	bl	8002308 <HAL_ETH_Start>
 800415c:	e002      	b.n	8004164 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800415e:	4805      	ldr	r0, [pc, #20]	; (8004174 <ethernetif_update_config+0xf4>)
 8004160:	f7fe f901 	bl	8002366 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f807 	bl	8004178 <ethernetif_notify_conn_changed>
}
 800416a:	bf00      	nop
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20003248 	.word	0x20003248

08004178 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	88db      	ldrh	r3, [r3, #6]
 8004198:	3301      	adds	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	88db      	ldrh	r3, [r3, #6]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d105      	bne.n	80041b4 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	88db      	ldrh	r3, [r3, #6]
 80041ac:	3301      	adds	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	88db      	ldrh	r3, [r3, #6]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4413      	add	r3, r2
 80041da:	78fa      	ldrb	r2, [r7, #3]
 80041dc:	711a      	strb	r2, [r3, #4]
  rb->put++;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	3301      	adds	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	2bff      	cmp	r3, #255	; 0xff
 80041f0:	d902      	bls.n	80041f8 <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	801a      	strh	r2, [r3, #0]
  }
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	885b      	ldrh	r3, [r3, #2]
 8004210:	461a      	mov	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4413      	add	r3, r2
 8004216:	3304      	adds	r3, #4
}
 8004218:	4618      	mov	r0, r3
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	460b      	mov	r3, r1
 800422e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 8004230:	887b      	ldrh	r3, [r7, #2]
 8004232:	2bff      	cmp	r3, #255	; 0xff
 8004234:	d905      	bls.n	8004242 <mqtt_ringbuf_advance_get_idx+0x1e>
 8004236:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <mqtt_ringbuf_advance_get_idx+0x4c>)
 8004238:	22cb      	movs	r2, #203	; 0xcb
 800423a:	490e      	ldr	r1, [pc, #56]	; (8004274 <mqtt_ringbuf_advance_get_idx+0x50>)
 800423c:	480e      	ldr	r0, [pc, #56]	; (8004278 <mqtt_ringbuf_advance_get_idx+0x54>)
 800423e:	f00c f955 	bl	80104ec <iprintf>

  rb->get += len;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	885a      	ldrh	r2, [r3, #2]
 8004246:	887b      	ldrh	r3, [r7, #2]
 8004248:	4413      	add	r3, r2
 800424a:	b29a      	uxth	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	885b      	ldrh	r3, [r3, #2]
 8004254:	2bff      	cmp	r3, #255	; 0xff
 8004256:	d906      	bls.n	8004266 <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	885b      	ldrh	r3, [r3, #2]
 800425c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004260:	b29a      	uxth	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	805a      	strh	r2, [r3, #2]
  }
}
 8004266:	bf00      	nop
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	08011c2c 	.word	0x08011c2c
 8004274:	08011c64 	.word	0x08011c64
 8004278:	08011ca4 	.word	0x08011ca4

0800427c <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	885b      	ldrh	r3, [r3, #2]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004298:	d303      	bcc.n	80042a2 <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80042a0:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	b29b      	uxth	r3, r3
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
	...

080042b4 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 80042b4:	b590      	push	{r4, r7, lr}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 80042be:	2300      	movs	r3, #0
 80042c0:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff ffda 	bl	800427c <mqtt_ringbuf_len>
 80042c8:	4603      	mov	r3, r0
 80042ca:	461a      	mov	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	885b      	ldrh	r3, [r3, #2]
 80042d0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80042d4:	429a      	cmp	r2, r3
 80042d6:	da04      	bge.n	80042e2 <mqtt_output_send+0x2e>
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff ffcf 	bl	800427c <mqtt_ringbuf_len>
 80042de:	4603      	mov	r3, r0
 80042e0:	e004      	b.n	80042ec <mqtt_output_send+0x38>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	885b      	ldrh	r3, [r3, #2]
 80042e6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80042f4:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d105      	bne.n	8004308 <mqtt_output_send+0x54>
 80042fc:	4b44      	ldr	r3, [pc, #272]	; (8004410 <mqtt_output_send+0x15c>)
 80042fe:	22f0      	movs	r2, #240	; 0xf0
 8004300:	4944      	ldr	r1, [pc, #272]	; (8004414 <mqtt_output_send+0x160>)
 8004302:	4845      	ldr	r0, [pc, #276]	; (8004418 <mqtt_output_send+0x164>)
 8004304:	f00c f8f2 	bl	80104ec <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 8004308:	89bb      	ldrh	r3, [r7, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d07c      	beq.n	8004408 <mqtt_output_send+0x154>
 800430e:	897b      	ldrh	r3, [r7, #10]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d079      	beq.n	8004408 <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 8004314:	89ba      	ldrh	r2, [r7, #12]
 8004316:	897b      	ldrh	r3, [r7, #10]
 8004318:	429a      	cmp	r2, r3
 800431a:	d90d      	bls.n	8004338 <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 800431c:	897b      	ldrh	r3, [r7, #10]
 800431e:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff ffab 	bl	800427c <mqtt_ringbuf_len>
 8004326:	4603      	mov	r3, r0
 8004328:	461a      	mov	r2, r3
 800432a:	897b      	ldrh	r3, [r7, #10]
 800432c:	4293      	cmp	r3, r2
 800432e:	bf34      	ite	cc
 8004330:	2301      	movcc	r3, #1
 8004332:	2300      	movcs	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7ff ff63 	bl	8004204 <mqtt_ringbuf_get_ptr>
 800433e:	4601      	mov	r1, r0
 8004340:	7bbb      	ldrb	r3, [r7, #14]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <mqtt_output_send+0x96>
 8004346:	2303      	movs	r3, #3
 8004348:	e000      	b.n	800434c <mqtt_output_send+0x98>
 800434a:	2301      	movs	r3, #1
 800434c:	89ba      	ldrh	r2, [r7, #12]
 800434e:	6838      	ldr	r0, [r7, #0]
 8004350:	f007 fd04 	bl	800bd5c <tcp_write>
 8004354:	4603      	mov	r3, r0
 8004356:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 8004358:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d146      	bne.n	80043ee <mqtt_output_send+0x13a>
 8004360:	7bbb      	ldrb	r3, [r7, #14]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d043      	beq.n	80043ee <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8004366:	89bb      	ldrh	r3, [r7, #12]
 8004368:	4619      	mov	r1, r3
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7ff ff5a 	bl	8004224 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004376:	461c      	mov	r4, r3
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7ff ff7f 	bl	800427c <mqtt_ringbuf_len>
 800437e:	4603      	mov	r3, r0
 8004380:	461a      	mov	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	885b      	ldrh	r3, [r3, #2]
 8004386:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800438a:	429a      	cmp	r2, r3
 800438c:	da04      	bge.n	8004398 <mqtt_output_send+0xe4>
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff ff74 	bl	800427c <mqtt_ringbuf_len>
 8004394:	4603      	mov	r3, r0
 8004396:	e003      	b.n	80043a0 <mqtt_output_send+0xec>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	885b      	ldrh	r3, [r3, #2]
 800439c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80043a0:	42a3      	cmp	r3, r4
 80043a2:	dd03      	ble.n	80043ac <mqtt_output_send+0xf8>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80043aa:	e014      	b.n	80043d6 <mqtt_output_send+0x122>
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff ff65 	bl	800427c <mqtt_ringbuf_len>
 80043b2:	4603      	mov	r3, r0
 80043b4:	461a      	mov	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	885b      	ldrh	r3, [r3, #2]
 80043ba:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80043be:	429a      	cmp	r2, r3
 80043c0:	da04      	bge.n	80043cc <mqtt_output_send+0x118>
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff ff5a 	bl	800427c <mqtt_ringbuf_len>
 80043c8:	4603      	mov	r3, r0
 80043ca:	e004      	b.n	80043d6 <mqtt_output_send+0x122>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	885b      	ldrh	r3, [r3, #2]
 80043d0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff ff13 	bl	8004204 <mqtt_ringbuf_get_ptr>
 80043de:	4601      	mov	r1, r0
 80043e0:	89ba      	ldrh	r2, [r7, #12]
 80043e2:	2301      	movs	r3, #1
 80043e4:	6838      	ldr	r0, [r7, #0]
 80043e6:	f007 fcb9 	bl	800bd5c <tcp_write>
 80043ea:	4603      	mov	r3, r0
 80043ec:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 80043ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d109      	bne.n	800440a <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 80043f6:	89bb      	ldrh	r3, [r7, #12]
 80043f8:	4619      	mov	r1, r3
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff ff12 	bl	8004224 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 8004400:	6838      	ldr	r0, [r7, #0]
 8004402:	f008 fa95 	bl	800c930 <tcp_output>
 8004406:	e000      	b.n	800440a <mqtt_output_send+0x156>
    return;
 8004408:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	bd90      	pop	{r4, r7, pc}
 8004410:	08011c2c 	.word	0x08011c2c
 8004414:	08011ccc 	.word	0x08011ccc
 8004418:	08011ca4 	.word	0x08011ca4

0800441c <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <mqtt_create_request+0x28>
 8004436:	4b19      	ldr	r3, [pc, #100]	; (800449c <mqtt_create_request+0x80>)
 8004438:	f240 1223 	movw	r2, #291	; 0x123
 800443c:	4918      	ldr	r1, [pc, #96]	; (80044a0 <mqtt_create_request+0x84>)
 800443e:	4819      	ldr	r0, [pc, #100]	; (80044a4 <mqtt_create_request+0x88>)
 8004440:	f00c f854 	bl	80104ec <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 8004444:	2300      	movs	r3, #0
 8004446:	74fb      	strb	r3, [r7, #19]
 8004448:	e01f      	b.n	800448a <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 800444a:	7cfb      	ldrb	r3, [r7, #19]
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4413      	add	r3, r2
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	7cfb      	ldrb	r3, [r7, #19]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	68f9      	ldr	r1, [r7, #12]
 800445a:	440b      	add	r3, r1
 800445c:	429a      	cmp	r2, r3
 800445e:	d111      	bne.n	8004484 <mqtt_create_request+0x68>
      r = &r_objs[n];
 8004460:	7cfb      	ldrb	r3, [r7, #19]
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	6a3a      	ldr	r2, [r7, #32]
 800447a:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	88fa      	ldrh	r2, [r7, #6]
 8004480:	819a      	strh	r2, [r3, #12]
      break;
 8004482:	e006      	b.n	8004492 <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 8004484:	7cfb      	ldrb	r3, [r7, #19]
 8004486:	3301      	adds	r3, #1
 8004488:	74fb      	strb	r3, [r7, #19]
 800448a:	7cfb      	ldrb	r3, [r7, #19]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	429a      	cmp	r2, r3
 8004490:	d8db      	bhi.n	800444a <mqtt_create_request+0x2e>
    }
  }
  return r;
 8004492:	697b      	ldr	r3, [r7, #20]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	08011c2c 	.word	0x08011c2c
 80044a0:	08011cec 	.word	0x08011cec
 80044a4:	08011ca4 	.word	0x08011ca4

080044a8 <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 80044b6:	2300      	movs	r3, #0
 80044b8:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d106      	bne.n	80044ce <mqtt_append_request+0x26>
 80044c0:	4b1b      	ldr	r3, [pc, #108]	; (8004530 <mqtt_append_request+0x88>)
 80044c2:	f240 123f 	movw	r2, #319	; 0x13f
 80044c6:	491b      	ldr	r1, [pc, #108]	; (8004534 <mqtt_append_request+0x8c>)
 80044c8:	481b      	ldr	r0, [pc, #108]	; (8004538 <mqtt_append_request+0x90>)
 80044ca:	f00c f80f 	bl	80104ec <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	e00a      	b.n	80044ec <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	89da      	ldrh	r2, [r3, #14]
 80044da:	8a7b      	ldrh	r3, [r7, #18]
 80044dc:	4413      	add	r3, r2
 80044de:	b29b      	uxth	r3, r3
 80044e0:	827b      	strh	r3, [r7, #18]
    head = iter;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f1      	bne.n	80044d6 <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 80044f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80044f6:	2b1e      	cmp	r3, #30
 80044f8:	dd06      	ble.n	8004508 <mqtt_append_request+0x60>
 80044fa:	4b0d      	ldr	r3, [pc, #52]	; (8004530 <mqtt_append_request+0x88>)
 80044fc:	f240 1247 	movw	r2, #327	; 0x147
 8004500:	490e      	ldr	r1, [pc, #56]	; (800453c <mqtt_append_request+0x94>)
 8004502:	480d      	ldr	r0, [pc, #52]	; (8004538 <mqtt_append_request+0x90>)
 8004504:	f00b fff2 	bl	80104ec <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 8004508:	8a7b      	ldrh	r3, [r7, #18]
 800450a:	f1c3 031e 	rsb	r3, r3, #30
 800450e:	b29a      	uxth	r2, r3
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d103      	bne.n	8004522 <mqtt_append_request+0x7a>
    *tail = r;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 8004520:	e002      	b.n	8004528 <mqtt_append_request+0x80>
    head->next = r;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	601a      	str	r2, [r3, #0]
}
 8004528:	bf00      	nop
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	08011c2c 	.word	0x08011c2c
 8004534:	08011d10 	.word	0x08011d10
 8004538:	08011ca4 	.word	0x08011ca4
 800453c:	08011d34 	.word	0x08011d34

08004540 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <mqtt_delete_request+0x14>
    r->next = r;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	601a      	str	r2, [r3, #0]
  }
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 800456c:	2300      	movs	r3, #0
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	2300      	movs	r3, #0
 8004572:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <mqtt_take_request+0x28>
 800457a:	4b1f      	ldr	r3, [pc, #124]	; (80045f8 <mqtt_take_request+0x98>)
 800457c:	f240 1267 	movw	r2, #359	; 0x167
 8004580:	491e      	ldr	r1, [pc, #120]	; (80045fc <mqtt_take_request+0x9c>)
 8004582:	481f      	ldr	r0, [pc, #124]	; (8004600 <mqtt_take_request+0xa0>)
 8004584:	f00b ffb2 	bl	80104ec <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	e009      	b.n	80045a4 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	899b      	ldrh	r3, [r3, #12]
 8004594:	887a      	ldrh	r2, [r7, #2]
 8004596:	429a      	cmp	r2, r3
 8004598:	d008      	beq.n	80045ac <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f2      	bne.n	8004590 <mqtt_take_request+0x30>
 80045aa:	e000      	b.n	80045ae <mqtt_take_request+0x4e>
      break;
 80045ac:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01c      	beq.n	80045ee <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d104      	bne.n	80045c4 <mqtt_take_request+0x64>
      *tail = iter->next;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	e003      	b.n	80045cc <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	89d9      	ldrh	r1, [r3, #14]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	89da      	ldrh	r2, [r3, #14]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	440a      	add	r2, r1
 80045e4:	b292      	uxth	r2, r2
 80045e6:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]
  }
  return iter;
 80045ee:	68fb      	ldr	r3, [r7, #12]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	08011c2c 	.word	0x08011c2c
 80045fc:	08011d6c 	.word	0x08011d6c
 8004600:	08011ca4 	.word	0x08011ca4

08004604 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	460b      	mov	r3, r1
 800460e:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <mqtt_request_time_elapsed+0x20>
 8004616:	4b21      	ldr	r3, [pc, #132]	; (800469c <mqtt_request_time_elapsed+0x98>)
 8004618:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 800461c:	4920      	ldr	r1, [pc, #128]	; (80046a0 <mqtt_request_time_elapsed+0x9c>)
 800461e:	4821      	ldr	r0, [pc, #132]	; (80046a4 <mqtt_request_time_elapsed+0xa0>)
 8004620:	f00b ff64 	bl	80104ec <iprintf>
  r = *tail;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 800462a:	e02c      	b.n	8004686 <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 800462c:	78fb      	ldrb	r3, [r7, #3]
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	89db      	ldrh	r3, [r3, #14]
 8004634:	429a      	cmp	r2, r3
 8004636:	d31c      	bcc.n	8004672 <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	89db      	ldrh	r3, [r3, #14]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	78fa      	ldrb	r2, [r7, #3]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d007      	beq.n	8004664 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	6892      	ldr	r2, [r2, #8]
 800465c:	f06f 0102 	mvn.w	r1, #2
 8004660:	4610      	mov	r0, r2
 8004662:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f7ff ff6b 	bl	8004540 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e009      	b.n	8004686 <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	89da      	ldrh	r2, [r3, #14]
 8004676:	78fb      	ldrb	r3, [r7, #3]
 8004678:	b29b      	uxth	r3, r3
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	81da      	strh	r2, [r3, #14]
      t = 0;
 8004682:	2300      	movs	r3, #0
 8004684:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 8004686:	78fb      	ldrb	r3, [r7, #3]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <mqtt_request_time_elapsed+0x8e>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1cc      	bne.n	800462c <mqtt_request_time_elapsed+0x28>
    }
  }
}
 8004692:	bf00      	nop
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	08011c2c 	.word	0x08011c2c
 80046a0:	08011d8c 	.word	0x08011d8c
 80046a4:	08011ca4 	.word	0x08011ca4

080046a8 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <mqtt_clear_requests+0x1c>
 80046b6:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <mqtt_clear_requests+0x48>)
 80046b8:	f240 12a7 	movw	r2, #423	; 0x1a7
 80046bc:	490d      	ldr	r1, [pc, #52]	; (80046f4 <mqtt_clear_requests+0x4c>)
 80046be:	480e      	ldr	r0, [pc, #56]	; (80046f8 <mqtt_clear_requests+0x50>)
 80046c0:	f00b ff14 	bl	80104ec <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	e007      	b.n	80046dc <mqtt_clear_requests+0x34>
    next = iter->next;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f7ff ff34 	bl	8004540 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f4      	bne.n	80046cc <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
}
 80046e8:	bf00      	nop
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	08011c2c 	.word	0x08011c2c
 80046f4:	08011db4 	.word	0x08011db4
 80046f8:	08011ca4 	.word	0x08011ca4

080046fc <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d106      	bne.n	800471a <mqtt_init_requests+0x1e>
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <mqtt_init_requests+0x50>)
 800470e:	f240 12b7 	movw	r2, #439	; 0x1b7
 8004712:	490f      	ldr	r1, [pc, #60]	; (8004750 <mqtt_init_requests+0x54>)
 8004714:	480f      	ldr	r0, [pc, #60]	; (8004754 <mqtt_init_requests+0x58>)
 8004716:	f00b fee9 	bl	80104ec <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 800471a:	2300      	movs	r3, #0
 800471c:	73fb      	strb	r3, [r7, #15]
 800471e:	e00b      	b.n	8004738 <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 8004720:	7bfb      	ldrb	r3, [r7, #15]
 8004722:	011a      	lsls	r2, r3, #4
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	6879      	ldr	r1, [r7, #4]
 800472a:	440b      	add	r3, r1
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	440a      	add	r2, r1
 8004730:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 8004732:	7bfb      	ldrb	r3, [r7, #15]
 8004734:	3301      	adds	r3, #1
 8004736:	73fb      	strb	r3, [r7, #15]
 8004738:	7bfb      	ldrb	r3, [r7, #15]
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	429a      	cmp	r2, r3
 800473e:	d8ef      	bhi.n	8004720 <mqtt_init_requests+0x24>
  }
}
 8004740:	bf00      	nop
 8004742:	bf00      	nop
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	08011c2c 	.word	0x08011c2c
 8004750:	08011dd8 	.word	0x08011dd8
 8004754:	08011ca4 	.word	0x08011ca4

08004758 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8004764:	78fb      	ldrb	r3, [r7, #3]
 8004766:	4619      	mov	r1, r3
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff fd2b 	bl	80041c4 <mqtt_ringbuf_put>
}
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	460b      	mov	r3, r1
 8004780:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 8004782:	887b      	ldrh	r3, [r7, #2]
 8004784:	0a1b      	lsrs	r3, r3, #8
 8004786:	b29b      	uxth	r3, r3
 8004788:	b2db      	uxtb	r3, r3
 800478a:	4619      	mov	r1, r3
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff fd19 	bl	80041c4 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 8004792:	887b      	ldrh	r3, [r7, #2]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	4619      	mov	r1, r3
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff fd13 	bl	80041c4 <mqtt_ringbuf_put>
}
 800479e:	bf00      	nop
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b086      	sub	sp, #24
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	4613      	mov	r3, r2
 80047b2:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 80047b4:	2300      	movs	r3, #0
 80047b6:	82fb      	strh	r3, [r7, #22]
 80047b8:	e00a      	b.n	80047d0 <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 80047ba:	8afb      	ldrh	r3, [r7, #22]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	4413      	add	r3, r2
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	4619      	mov	r1, r3
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f7ff fcfd 	bl	80041c4 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 80047ca:	8afb      	ldrh	r3, [r7, #22]
 80047cc:	3301      	adds	r3, #1
 80047ce:	82fb      	strh	r3, [r7, #22]
 80047d0:	8afa      	ldrh	r2, [r7, #22]
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d3f0      	bcc.n	80047ba <mqtt_output_append_buf+0x14>
  }
}
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b086      	sub	sp, #24
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	4613      	mov	r3, r2
 80047ee:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 80047f0:	88fb      	ldrh	r3, [r7, #6]
 80047f2:	0a1b      	lsrs	r3, r3, #8
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	4619      	mov	r1, r3
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7ff fce2 	bl	80041c4 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 8004800:	88fb      	ldrh	r3, [r7, #6]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	4619      	mov	r1, r3
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f7ff fcdc 	bl	80041c4 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800480c:	2300      	movs	r3, #0
 800480e:	82fb      	strh	r3, [r7, #22]
 8004810:	e00a      	b.n	8004828 <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 8004812:	8afb      	ldrh	r3, [r7, #22]
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	4413      	add	r3, r2
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	4619      	mov	r1, r3
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f7ff fcd1 	bl	80041c4 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8004822:	8afb      	ldrh	r3, [r7, #22]
 8004824:	3301      	adds	r3, #1
 8004826:	82fb      	strh	r3, [r7, #22]
 8004828:	8afa      	ldrh	r2, [r7, #22]
 800482a:	88fb      	ldrh	r3, [r7, #6]
 800482c:	429a      	cmp	r2, r3
 800482e:	d3f0      	bcc.n	8004812 <mqtt_output_append_string+0x30>
  }
}
 8004830:	bf00      	nop
 8004832:	bf00      	nop
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	4608      	mov	r0, r1
 8004844:	4611      	mov	r1, r2
 8004846:	461a      	mov	r2, r3
 8004848:	4603      	mov	r3, r0
 800484a:	70fb      	strb	r3, [r7, #3]
 800484c:	460b      	mov	r3, r1
 800484e:	70bb      	strb	r3, [r7, #2]
 8004850:	4613      	mov	r3, r2
 8004852:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	b25a      	sxtb	r2, r3
 800485a:	78bb      	ldrb	r3, [r7, #2]
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	b25b      	sxtb	r3, r3
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	b25b      	sxtb	r3, r3
 8004866:	4313      	orrs	r3, r2
 8004868:	b25a      	sxtb	r2, r3
 800486a:	787b      	ldrb	r3, [r7, #1]
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	b25b      	sxtb	r3, r3
 8004870:	f003 0306 	and.w	r3, r3, #6
 8004874:	b25b      	sxtb	r3, r3
 8004876:	4313      	orrs	r3, r2
 8004878:	b25a      	sxtb	r2, r3
 800487a:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	b25b      	sxtb	r3, r3
 8004884:	4313      	orrs	r3, r2
 8004886:	b25b      	sxtb	r3, r3
 8004888:	b2db      	uxtb	r3, r3
 800488a:	4619      	mov	r1, r3
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7ff ff63 	bl	8004758 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8004892:	8abb      	ldrh	r3, [r7, #20]
 8004894:	b25b      	sxtb	r3, r3
 8004896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800489a:	b25b      	sxtb	r3, r3
 800489c:	8aba      	ldrh	r2, [r7, #20]
 800489e:	2a7f      	cmp	r2, #127	; 0x7f
 80048a0:	d902      	bls.n	80048a8 <mqtt_output_append_fixed_header+0x6e>
 80048a2:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80048a6:	e000      	b.n	80048aa <mqtt_output_append_fixed_header+0x70>
 80048a8:	2200      	movs	r2, #0
 80048aa:	4313      	orrs	r3, r2
 80048ac:	b25b      	sxtb	r3, r3
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	4619      	mov	r1, r3
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff ff50 	bl	8004758 <mqtt_output_append_u8>
    r_length >>= 7;
 80048b8:	8abb      	ldrh	r3, [r7, #20]
 80048ba:	09db      	lsrs	r3, r3, #7
 80048bc:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 80048be:	8abb      	ldrh	r3, [r7, #20]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1e6      	bne.n	8004892 <mqtt_output_append_fixed_header+0x58>
}
 80048c4:	bf00      	nop
 80048c6:	bf00      	nop
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 80048d0:	b590      	push	{r4, r7, lr}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	460b      	mov	r3, r1
 80048da:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 80048dc:	887b      	ldrh	r3, [r7, #2]
 80048de:	3301      	adds	r3, #1
 80048e0:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d106      	bne.n	80048f6 <mqtt_output_check_space+0x26>
 80048e8:	4b0f      	ldr	r3, [pc, #60]	; (8004928 <mqtt_output_check_space+0x58>)
 80048ea:	f240 2207 	movw	r2, #519	; 0x207
 80048ee:	490f      	ldr	r1, [pc, #60]	; (800492c <mqtt_output_check_space+0x5c>)
 80048f0:	480f      	ldr	r0, [pc, #60]	; (8004930 <mqtt_output_check_space+0x60>)
 80048f2:	f00b fdfb 	bl	80104ec <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 80048f6:	89fb      	ldrh	r3, [r7, #14]
 80048f8:	3301      	adds	r3, #1
 80048fa:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 80048fc:	887b      	ldrh	r3, [r7, #2]
 80048fe:	09db      	lsrs	r3, r3, #7
 8004900:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 8004902:	887b      	ldrh	r3, [r7, #2]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1f6      	bne.n	80048f6 <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 8004908:	89fc      	ldrh	r4, [r7, #14]
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7ff fcb6 	bl	800427c <mqtt_ringbuf_len>
 8004910:	4603      	mov	r3, r0
 8004912:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004916:	429c      	cmp	r4, r3
 8004918:	bfd4      	ite	le
 800491a:	2301      	movle	r3, #1
 800491c:	2300      	movgt	r3, #0
 800491e:	b2db      	uxtb	r3, r3
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	bd90      	pop	{r4, r7, pc}
 8004928:	08011c2c 	.word	0x08011c2c
 800492c:	08011dfc 	.word	0x08011dfc
 8004930:	08011ca4 	.word	0x08011ca4

08004934 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d106      	bne.n	8004954 <mqtt_close+0x20>
 8004946:	4b27      	ldr	r3, [pc, #156]	; (80049e4 <mqtt_close+0xb0>)
 8004948:	f240 221b 	movw	r2, #539	; 0x21b
 800494c:	4926      	ldr	r1, [pc, #152]	; (80049e8 <mqtt_close+0xb4>)
 800494e:	4827      	ldr	r0, [pc, #156]	; (80049ec <mqtt_close+0xb8>)
 8004950:	f00b fdcc 	bl	80104ec <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d024      	beq.n	80049a6 <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	2100      	movs	r1, #0
 8004962:	4618      	mov	r0, r3
 8004964:	f004 fae2 	bl	8008f2c <tcp_recv>
    altcp_err(client->conn,  NULL);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2100      	movs	r1, #0
 800496e:	4618      	mov	r0, r3
 8004970:	f004 fb20 	bl	8008fb4 <tcp_err>
    altcp_sent(client->conn, NULL);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	2100      	movs	r1, #0
 800497a:	4618      	mov	r0, r3
 800497c:	f004 faf8 	bl	8008f70 <tcp_sent>
    res = altcp_close(client->conn);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	4618      	mov	r0, r3
 8004986:	f003 f8f9 	bl	8007b7c <tcp_close>
 800498a:	4603      	mov	r3, r0
 800498c:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 800498e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d004      	beq.n	80049a0 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	4618      	mov	r0, r3
 800499c:	f003 f9d8 	bl	8007d50 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3318      	adds	r3, #24
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff fe7c 	bl	80046a8 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	480f      	ldr	r0, [pc, #60]	; (80049f0 <mqtt_close+0xbc>)
 80049b4:	f009 f83a 	bl	800da2c <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	7a9b      	ldrb	r3, [r3, #10]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00d      	beq.n	80049dc <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d006      	beq.n	80049dc <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6911      	ldr	r1, [r2, #16]
 80049d6:	887a      	ldrh	r2, [r7, #2]
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	4798      	blx	r3
    }
  }
}
 80049dc:	bf00      	nop
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	08011c2c 	.word	0x08011c2c
 80049e8:	08011e20 	.word	0x08011e20
 80049ec:	08011ca4 	.word	0x08011ca4
 80049f0:	080049f5 	.word	0x080049f5

080049f4 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 80049fc:	2301      	movs	r3, #1
 80049fe:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <mqtt_cyclic_timer+0x24>
 8004a0a:	4b42      	ldr	r3, [pc, #264]	; (8004b14 <mqtt_cyclic_timer+0x120>)
 8004a0c:	f44f 7211 	mov.w	r2, #580	; 0x244
 8004a10:	4941      	ldr	r1, [pc, #260]	; (8004b18 <mqtt_cyclic_timer+0x124>)
 8004a12:	4842      	ldr	r0, [pc, #264]	; (8004b1c <mqtt_cyclic_timer+0x128>)
 8004a14:	f00b fd6a 	bl	80104ec <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	7a9b      	ldrb	r3, [r3, #10]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d115      	bne.n	8004a4c <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	3301      	adds	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	4613      	mov	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	2b63      	cmp	r3, #99	; 0x63
 8004a3a:	dd5e      	ble.n	8004afa <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8004a3c:	f240 1101 	movw	r1, #257	; 0x101
 8004a40:	68b8      	ldr	r0, [r7, #8]
 8004a42:	f7ff ff77 	bl	8004934 <mqtt_close>
      restart_timer = 0;
 8004a46:	2300      	movs	r3, #0
 8004a48:	73fb      	strb	r3, [r7, #15]
 8004a4a:	e056      	b.n	8004afa <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	7a9b      	ldrb	r3, [r3, #10]
 8004a50:	2b03      	cmp	r3, #3
 8004a52:	d150      	bne.n	8004af6 <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	3318      	adds	r3, #24
 8004a58:	2105      	movs	r1, #5
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff fdd2 	bl	8004604 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	885b      	ldrh	r3, [r3, #2]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d048      	beq.n	8004afa <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	889b      	ldrh	r3, [r3, #4]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	889b      	ldrh	r3, [r3, #4]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	441a      	add	r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	885b      	ldrh	r3, [r3, #2]
 8004a84:	4619      	mov	r1, r3
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	885b      	ldrh	r3, [r3, #2]
 8004a8a:	085b      	lsrs	r3, r3, #1
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	440b      	add	r3, r1
 8004a90:	429a      	cmp	r2, r3
 8004a92:	dd06      	ble.n	8004aa2 <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8004a94:	f240 1101 	movw	r1, #257	; 0x101
 8004a98:	68b8      	ldr	r0, [r7, #8]
 8004a9a:	f7ff ff4b 	bl	8004934 <mqtt_close>
        restart_timer = 0;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	8852      	ldrh	r2, [r2, #2]
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	db18      	blt.n	8004ae8 <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	33ec      	adds	r3, #236	; 0xec
 8004aba:	2100      	movs	r1, #0
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff ff07 	bl	80048d0 <mqtt_output_check_space>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d018      	beq.n	8004afa <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8004ace:	2300      	movs	r3, #0
 8004ad0:	9301      	str	r3, [sp, #4]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	2200      	movs	r2, #0
 8004ada:	210c      	movs	r1, #12
 8004adc:	f7ff fead 	bl	800483a <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	801a      	strh	r2, [r3, #0]
 8004ae6:	e008      	b.n	8004afa <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	3301      	adds	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	801a      	strh	r2, [r3, #0]
 8004af4:	e001      	b.n	8004afa <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 8004af6:	2300      	movs	r3, #0
 8004af8:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	4907      	ldr	r1, [pc, #28]	; (8004b20 <mqtt_cyclic_timer+0x12c>)
 8004b04:	f241 3088 	movw	r0, #5000	; 0x1388
 8004b08:	f008 ff6a 	bl	800d9e0 <sys_timeout>
  }
}
 8004b0c:	bf00      	nop
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	08011c2c 	.word	0x08011c2c
 8004b18:	08011e3c 	.word	0x08011e3c
 8004b1c:	08011ca4 	.word	0x08011ca4
 8004b20:	080049f5 	.word	0x080049f5

08004b24 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	4608      	mov	r0, r1
 8004b2e:	4611      	mov	r1, r2
 8004b30:	461a      	mov	r2, r3
 8004b32:	4603      	mov	r3, r0
 8004b34:	70fb      	strb	r3, [r7, #3]
 8004b36:	460b      	mov	r3, r1
 8004b38:	803b      	strh	r3, [r7, #0]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	33ec      	adds	r3, #236	; 0xec
 8004b46:	2102      	movs	r1, #2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff fec1 	bl	80048d0 <mqtt_output_check_space>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01c      	beq.n	8004b8e <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8004b5a:	78bb      	ldrb	r3, [r7, #2]
 8004b5c:	78f9      	ldrb	r1, [r7, #3]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	9201      	str	r2, [sp, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	9200      	str	r2, [sp, #0]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f7ff fe67 	bl	800483a <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	33ec      	adds	r3, #236	; 0xec
 8004b70:	883a      	ldrh	r2, [r7, #0]
 8004b72:	4611      	mov	r1, r2
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff fdfe 	bl	8004776 <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	4619      	mov	r1, r3
 8004b86:	4610      	mov	r0, r2
 8004b88:	f7ff fb94 	bl	80042b4 <mqtt_output_send>
 8004b8c:	e001      	b.n	8004b92 <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 8004b8e:	23ff      	movs	r3, #255	; 0xff
 8004b90:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 8004b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b082      	sub	sp, #8
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00c      	beq.n	8004bcc <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6890      	ldr	r0, [r2, #8]
 8004bba:	78fa      	ldrb	r2, [r7, #3]
 8004bbc:	2a02      	cmp	r2, #2
 8004bbe:	d801      	bhi.n	8004bc4 <mqtt_incomming_suback+0x26>
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	e001      	b.n	8004bc8 <mqtt_incomming_suback+0x2a>
 8004bc4:	f06f 020c 	mvn.w	r2, #12
 8004bc8:	4611      	mov	r1, r2
 8004bca:	4798      	blx	r3
  }
}
 8004bcc:	bf00      	nop
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 8004bd4:	b590      	push	{r4, r7, lr}
 8004bd6:	b08f      	sub	sp, #60	; 0x3c
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	607b      	str	r3, [r7, #4]
 8004bde:	460b      	mov	r3, r1
 8004be0:	72fb      	strb	r3, [r7, #11]
 8004be2:	4613      	mov	r3, r2
 8004be4:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8004be6:	2300      	movs	r3, #0
 8004be8:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8004bf0:	7afb      	ldrb	r3, [r7, #11]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 8004bf6:	7afb      	ldrb	r3, [r7, #11]
 8004bf8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004bfc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004c04:	091b      	lsrs	r3, r3, #4
 8004c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c12:	2b7f      	cmp	r3, #127	; 0x7f
 8004c14:	d906      	bls.n	8004c24 <mqtt_message_received+0x50>
 8004c16:	4b97      	ldr	r3, [pc, #604]	; (8004e74 <mqtt_message_received+0x2a0>)
 8004c18:	f240 22ab 	movw	r2, #683	; 0x2ab
 8004c1c:	4996      	ldr	r1, [pc, #600]	; (8004e78 <mqtt_message_received+0x2a4>)
 8004c1e:	4897      	ldr	r0, [pc, #604]	; (8004e7c <mqtt_message_received+0x2a8>)
 8004c20:	f00b fc64 	bl	80104ec <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 8004c24:	7afa      	ldrb	r2, [r7, #11]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d906      	bls.n	8004c3c <mqtt_message_received+0x68>
 8004c2e:	4b91      	ldr	r3, [pc, #580]	; (8004e74 <mqtt_message_received+0x2a0>)
 8004c30:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 8004c34:	4992      	ldr	r1, [pc, #584]	; (8004e80 <mqtt_message_received+0x2ac>)
 8004c36:	4891      	ldr	r0, [pc, #580]	; (8004e7c <mqtt_message_received+0x2a8>)
 8004c38:	f00b fc58 	bl	80104ec <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 8004c3c:	7afa      	ldrb	r2, [r7, #11]
 8004c3e:	893b      	ldrh	r3, [r7, #8]
 8004c40:	4413      	add	r3, r2
 8004c42:	2b80      	cmp	r3, #128	; 0x80
 8004c44:	dd09      	ble.n	8004c5a <mqtt_message_received+0x86>
 8004c46:	4b8b      	ldr	r3, [pc, #556]	; (8004e74 <mqtt_message_received+0x2a0>)
 8004c48:	f240 22ad 	movw	r2, #685	; 0x2ad
 8004c4c:	498d      	ldr	r1, [pc, #564]	; (8004e84 <mqtt_message_received+0x2b0>)
 8004c4e:	488b      	ldr	r0, [pc, #556]	; (8004e7c <mqtt_message_received+0x2a8>)
 8004c50:	f00b fc4c 	bl	80104ec <iprintf>
 8004c54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c58:	e16f      	b.n	8004f3a <mqtt_message_received+0x366>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 8004c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d123      	bne.n	8004caa <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	7a9b      	ldrb	r3, [r3, #10]
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	f040 8152 	bne.w	8004f10 <mqtt_message_received+0x33c>
      if (length < 2) {
 8004c6c:	893b      	ldrh	r3, [r7, #8]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	f240 8150 	bls.w	8004f14 <mqtt_message_received+0x340>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 8004c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c76:	3301      	adds	r3, #1
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 8004c7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f040 8146 	bne.w	8004f10 <mqtt_message_received+0x33c>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2203      	movs	r2, #3
 8004c8e:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 813b 	beq.w	8004f10 <mqtt_message_received+0x33c>
          client->connect_cb(client, client->connect_arg, res);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	6911      	ldr	r1, [r2, #16]
 8004ca2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	4798      	blx	r3
 8004ca8:	e132      	b.n	8004f10 <mqtt_message_received+0x33c>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 8004caa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cae:	2b0d      	cmp	r3, #13
 8004cb0:	f000 812e 	beq.w	8004f10 <mqtt_message_received+0x33c>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 8004cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cb8:	2b03      	cmp	r3, #3
 8004cba:	f040 80c0 	bne.w	8004e3e <mqtt_message_received+0x26a>
    u16_t payload_offset = 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 8004cc2:	893b      	ldrh	r3, [r7, #8]
 8004cc4:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004ccc:	105b      	asrs	r3, r3, #1
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cda:	2b80      	cmp	r3, #128	; 0x80
 8004cdc:	d87d      	bhi.n	8004dda <mqtt_message_received+0x206>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 8004cde:	7ffb      	ldrb	r3, [r7, #31]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <mqtt_message_received+0x114>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	e000      	b.n	8004cea <mqtt_message_received+0x116>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 8004cec:	8bbb      	ldrh	r3, [r7, #28]
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	893b      	ldrh	r3, [r7, #8]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	f280 8110 	bge.w	8004f18 <mqtt_message_received+0x344>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 8004cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 8004cfe:	8b7b      	ldrh	r3, [r7, #26]
 8004d00:	021b      	lsls	r3, r3, #8
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d06:	3301      	adds	r3, #1
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	4413      	add	r3, r2
 8004d0e:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 8004d10:	8b7a      	ldrh	r2, [r7, #26]
 8004d12:	8939      	ldrh	r1, [r7, #8]
 8004d14:	8bbb      	ldrh	r3, [r7, #28]
 8004d16:	3302      	adds	r3, #2
 8004d18:	1acb      	subs	r3, r1, r3
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	f300 80fe 	bgt.w	8004f1c <mqtt_message_received+0x348>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 8004d20:	8b7a      	ldrh	r2, [r7, #26]
 8004d22:	8bbb      	ldrh	r3, [r7, #28]
 8004d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d26:	1acb      	subs	r3, r1, r3
 8004d28:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	f200 80f6 	bhi.w	8004f1c <mqtt_message_received+0x348>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 8004d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d32:	3302      	adds	r3, #2
 8004d34:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 8004d36:	8b7b      	ldrh	r3, [r7, #26]
 8004d38:	3302      	adds	r3, #2
 8004d3a:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 8004d3c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004d3e:	7ffa      	ldrb	r2, [r7, #31]
 8004d40:	2a00      	cmp	r2, #0
 8004d42:	d001      	beq.n	8004d48 <mqtt_message_received+0x174>
 8004d44:	2202      	movs	r2, #2
 8004d46:	e000      	b.n	8004d4a <mqtt_message_received+0x176>
 8004d48:	2201      	movs	r2, #1
 8004d4a:	4413      	add	r3, r2
 8004d4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	f0c0 80e6 	bcc.w	8004f20 <mqtt_message_received+0x34c>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 8004d54:	7ffb      	ldrb	r3, [r7, #31]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d01a      	beq.n	8004d90 <mqtt_message_received+0x1bc>
        if (length < after_topic + 2U) {
 8004d5a:	893a      	ldrh	r2, [r7, #8]
 8004d5c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004d5e:	3302      	adds	r3, #2
 8004d60:	429a      	cmp	r2, r3
 8004d62:	f0c0 80df 	bcc.w	8004f24 <mqtt_message_received+0x350>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 8004d66:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d6a:	4413      	add	r3, r2
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	021b      	lsls	r3, r3, #8
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004d76:	3301      	adds	r3, #1
 8004d78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d7a:	440b      	add	r3, r1
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	4413      	add	r3, r2
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 8004d88:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004d8a:	3302      	adds	r3, #2
 8004d8c:	863b      	strh	r3, [r7, #48]	; 0x30
 8004d8e:	e002      	b.n	8004d96 <mqtt_message_received+0x1c2>
      } else {
        client->inpub_pkt_id = 0;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 8004d96:	8b7b      	ldrh	r3, [r7, #26]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 8004da0:	8b7b      	ldrh	r3, [r7, #26]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	4413      	add	r3, r2
 8004da6:	2200      	movs	r2, #0
 8004da8:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 8004daa:	893a      	ldrh	r2, [r7, #8]
 8004dac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 8004db2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004db4:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d008      	beq.n	8004dd0 <mqtt_message_received+0x1fc>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8004dc6:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	440a      	add	r2, r1
 8004dcc:	6979      	ldr	r1, [r7, #20]
 8004dce:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 8004dd0:	8b7b      	ldrh	r3, [r7, #26]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	7cfa      	ldrb	r2, [r7, #19]
 8004dd8:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 8004dda:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d103      	bne.n	8004de8 <mqtt_message_received+0x214>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f040 8094 	bne.w	8004f10 <mqtt_message_received+0x33c>
      if (length < (size_t)(payload_offset + payload_length)) {
 8004de8:	893b      	ldrh	r3, [r7, #8]
 8004dea:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8004dec:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8004dee:	440a      	add	r2, r1
 8004df0:	4293      	cmp	r3, r2
 8004df2:	f0c0 8099 	bcc.w	8004f28 <mqtt_message_received+0x354>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8004dfe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e02:	18d1      	adds	r1, r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	bf0c      	ite	eq
 8004e0a:	2301      	moveq	r3, #1
 8004e0c:	2300      	movne	r3, #0
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8004e12:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d17a      	bne.n	8004f10 <mqtt_message_received+0x33c>
 8004e1a:	7ffb      	ldrb	r3, [r7, #31]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d077      	beq.n	8004f10 <mqtt_message_received+0x33c>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 8004e20:	7ffb      	ldrb	r3, [r7, #31]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <mqtt_message_received+0x256>
 8004e26:	2304      	movs	r3, #4
 8004e28:	e000      	b.n	8004e2c <mqtt_message_received+0x258>
 8004e2a:	2305      	movs	r3, #5
 8004e2c:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	891a      	ldrh	r2, [r3, #8]
 8004e32:	7cb9      	ldrb	r1, [r7, #18]
 8004e34:	2300      	movs	r3, #0
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f7ff fe74 	bl	8004b24 <pub_ack_rec_rel_response>
 8004e3c:	e068      	b.n	8004f10 <mqtt_message_received+0x33c>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 8004e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	021b      	lsls	r3, r3, #8
 8004e46:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 8004e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e52:	4313      	orrs	r3, r2
 8004e54:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 8004e56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d067      	beq.n	8004f2c <mqtt_message_received+0x358>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 8004e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e60:	2b05      	cmp	r3, #5
 8004e62:	d111      	bne.n	8004e88 <mqtt_message_received+0x2b4>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 8004e64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e66:	2301      	movs	r3, #1
 8004e68:	2106      	movs	r1, #6
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f7ff fe5a 	bl	8004b24 <pub_ack_rec_rel_response>
 8004e70:	e04e      	b.n	8004f10 <mqtt_message_received+0x33c>
 8004e72:	bf00      	nop
 8004e74:	08011c2c 	.word	0x08011c2c
 8004e78:	08011e60 	.word	0x08011e60
 8004e7c:	08011ca4 	.word	0x08011ca4
 8004e80:	08011e90 	.word	0x08011e90
 8004e84:	08011eb4 	.word	0x08011eb4

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 8004e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e8c:	2b06      	cmp	r3, #6
 8004e8e:	d106      	bne.n	8004e9e <mqtt_message_received+0x2ca>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 8004e90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e92:	2300      	movs	r3, #0
 8004e94:	2107      	movs	r1, #7
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f7ff fe44 	bl	8004b24 <pub_ack_rec_rel_response>
 8004e9c:	e038      	b.n	8004f10 <mqtt_message_received+0x33c>

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 8004e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ea2:	2b09      	cmp	r3, #9
 8004ea4:	d00b      	beq.n	8004ebe <mqtt_message_received+0x2ea>
 8004ea6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004eaa:	2b0b      	cmp	r3, #11
 8004eac:	d007      	beq.n	8004ebe <mqtt_message_received+0x2ea>
 8004eae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004eb2:	2b07      	cmp	r3, #7
 8004eb4:	d003      	beq.n	8004ebe <mqtt_message_received+0x2ea>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8004eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d138      	bne.n	8004f30 <mqtt_message_received+0x35c>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3318      	adds	r3, #24
 8004ec2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7ff fb4a 	bl	8004560 <mqtt_take_request>
 8004ecc:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01c      	beq.n	8004f0e <mqtt_message_received+0x33a>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 8004ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ed8:	2b09      	cmp	r3, #9
 8004eda:	d10a      	bne.n	8004ef2 <mqtt_message_received+0x31e>
          if (length < 3) {
 8004edc:	893b      	ldrh	r3, [r7, #8]
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d928      	bls.n	8004f34 <mqtt_message_received+0x360>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 8004ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee4:	3302      	adds	r3, #2
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	4619      	mov	r1, r3
 8004eea:	6a38      	ldr	r0, [r7, #32]
 8004eec:	f7ff fe57 	bl	8004b9e <mqtt_incomming_suback>
 8004ef0:	e00a      	b.n	8004f08 <mqtt_message_received+0x334>
          }
        } else if (r->cb != NULL) {
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d006      	beq.n	8004f08 <mqtt_message_received+0x334>
          r->cb(r->arg, ERR_OK);
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	6a3a      	ldr	r2, [r7, #32]
 8004f00:	6892      	ldr	r2, [r2, #8]
 8004f02:	2100      	movs	r1, #0
 8004f04:	4610      	mov	r0, r2
 8004f06:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 8004f08:	6a38      	ldr	r0, [r7, #32]
 8004f0a:	f7ff fb19 	bl	8004540 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8004f0e:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 8004f10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f12:	e012      	b.n	8004f3a <mqtt_message_received+0x366>
        goto out_disconnect;
 8004f14:	bf00      	nop
 8004f16:	e00e      	b.n	8004f36 <mqtt_message_received+0x362>
        goto out_disconnect;
 8004f18:	bf00      	nop
 8004f1a:	e00c      	b.n	8004f36 <mqtt_message_received+0x362>
        goto out_disconnect;
 8004f1c:	bf00      	nop
 8004f1e:	e00a      	b.n	8004f36 <mqtt_message_received+0x362>
        goto out_disconnect;
 8004f20:	bf00      	nop
 8004f22:	e008      	b.n	8004f36 <mqtt_message_received+0x362>
          goto out_disconnect;
 8004f24:	bf00      	nop
 8004f26:	e006      	b.n	8004f36 <mqtt_message_received+0x362>
        goto out_disconnect;
 8004f28:	bf00      	nop
 8004f2a:	e004      	b.n	8004f36 <mqtt_message_received+0x362>
      goto out_disconnect;
 8004f2c:	bf00      	nop
 8004f2e:	e002      	b.n	8004f36 <mqtt_message_received+0x362>
      goto out_disconnect;
 8004f30:	bf00      	nop
 8004f32:	e000      	b.n	8004f36 <mqtt_message_received+0x362>
            goto out_disconnect;
 8004f34:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 8004f36:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	373c      	adds	r7, #60	; 0x3c
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd90      	pop	{r4, r7, pc}
 8004f42:	bf00      	nop

08004f44 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 8004f52:	2300      	movs	r3, #0
 8004f54:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 8004f56:	2300      	movs	r3, #0
 8004f58:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 8004f5e:	e0bc      	b.n	80050da <mqtt_parse_incoming+0x196>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 8004f60:	7dfb      	ldrb	r3, [r7, #23]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d903      	bls.n	8004f6e <mqtt_parse_incoming+0x2a>
 8004f66:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	da4d      	bge.n	800500a <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 8004f6e:	7dfa      	ldrb	r2, [r7, #23]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d206      	bcs.n	8004f86 <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 8004f78:	7dfb      	ldrb	r3, [r7, #23]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004f82:	75bb      	strb	r3, [r7, #22]
 8004f84:	e012      	b.n	8004fac <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 8004f86:	8bfb      	ldrh	r3, [r7, #30]
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	83fa      	strh	r2, [r7, #30]
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	6838      	ldr	r0, [r7, #0]
 8004f90:	f002 fbaa 	bl	80076e8 <pbuf_get_at>
 8004f94:	4603      	mov	r3, r0
 8004f96:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f9c:	1c59      	adds	r1, r3, #1
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6691      	str	r1, [r2, #104]	; 0x68
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	7dba      	ldrb	r2, [r7, #22]
 8004fa8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 8004fac:	7dfb      	ldrb	r3, [r7, #23]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 8004fb2:	7dfb      	ldrb	r3, [r7, #23]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	f240 8090 	bls.w	80050da <mqtt_parse_incoming+0x196>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 8004fba:	7dbb      	ldrb	r3, [r7, #22]
 8004fbc:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
 8004fc2:	1e9a      	subs	r2, r3, #2
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	1a9b      	subs	r3, r3, r2
 8004fca:	fa01 f303 	lsl.w	r3, r1, r3
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 8004fd4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	db7e      	blt.n	80050da <mqtt_parse_incoming+0x196>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10b      	bne.n	8004ffa <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 8004fe2:	7df9      	ldrb	r1, [r7, #23]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff fdf3 	bl	8004bd4 <mqtt_message_received>
            client->msg_idx = 0;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	75fb      	strb	r3, [r7, #23]
 8004ff8:	e06f      	b.n	80050da <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 8004ffa:	7dfa      	ldrb	r2, [r7, #23]
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	441a      	add	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 8005008:	e067      	b.n	80050da <mqtt_parse_incoming+0x196>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	7dfa      	ldrb	r2, [r7, #23]
 8005014:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 8005018:	fbb3 f1f2 	udiv	r1, r3, r2
 800501c:	fb01 f202 	mul.w	r2, r1, r2
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	b29a      	uxth	r2, r3
 8005024:	7dfb      	ldrb	r3, [r7, #23]
 8005026:	b29b      	uxth	r3, r3
 8005028:	4413      	add	r3, r2
 800502a:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	891a      	ldrh	r2, [r3, #8]
 8005030:	8bfb      	ldrh	r3, [r7, #30]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	b29b      	uxth	r3, r3
 8005036:	461a      	mov	r2, r3
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	4293      	cmp	r3, r2
 800503c:	d905      	bls.n	800504a <mqtt_parse_incoming+0x106>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	891a      	ldrh	r2, [r3, #8]
 8005042:	8bfb      	ldrh	r3, [r7, #30]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	b29b      	uxth	r3, r3
 8005048:	e001      	b.n	800504e <mqtt_parse_incoming+0x10a>
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	b29b      	uxth	r3, r3
 800504e:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 8005050:	8a7b      	ldrh	r3, [r7, #18]
 8005052:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8005056:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 8005058:	8aba      	ldrh	r2, [r7, #20]
 800505a:	8a3b      	ldrh	r3, [r7, #16]
 800505c:	429a      	cmp	r2, r3
 800505e:	d901      	bls.n	8005064 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 8005060:	8a3b      	ldrh	r3, [r7, #16]
 8005062:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800506a:	8a7b      	ldrh	r3, [r7, #18]
 800506c:	18d1      	adds	r1, r2, r3
 800506e:	8bfb      	ldrh	r3, [r7, #30]
 8005070:	8aba      	ldrh	r2, [r7, #20]
 8005072:	6838      	ldr	r0, [r7, #0]
 8005074:	f002 fa6a 	bl	800754c <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800507c:	8abb      	ldrh	r3, [r7, #20]
 800507e:	441a      	add	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 8005084:	8bfa      	ldrh	r2, [r7, #30]
 8005086:	8abb      	ldrh	r3, [r7, #20]
 8005088:	4413      	add	r3, r2
 800508a:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 800508c:	8abb      	ldrh	r3, [r7, #20]
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <mqtt_parse_incoming+0x15e>
 800509a:	8aba      	ldrh	r2, [r7, #20]
 800509c:	8a3b      	ldrh	r3, [r7, #16]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d11b      	bne.n	80050da <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 80050a2:	8a7a      	ldrh	r2, [r7, #18]
 80050a4:	8abb      	ldrh	r3, [r7, #20]
 80050a6:	4413      	add	r3, r2
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	7dfb      	ldrb	r3, [r7, #23]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	7df9      	ldrb	r1, [r7, #23]
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7ff fd8c 	bl	8004bd4 <mqtt_message_received>
 80050bc:	4603      	mov	r3, r0
 80050be:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 80050c0:	89fb      	ldrh	r3, [r7, #14]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <mqtt_parse_incoming+0x186>
          return res;
 80050c6:	89fb      	ldrh	r3, [r7, #14]
 80050c8:	e00e      	b.n	80050e8 <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d104      	bne.n	80050da <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 80050d6:	2300      	movs	r3, #0
 80050d8:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	891b      	ldrh	r3, [r3, #8]
 80050de:	8bfa      	ldrh	r2, [r7, #30]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	f4ff af3d 	bcc.w	8004f60 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3720      	adds	r7, #32
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d106      	bne.n	8005116 <mqtt_tcp_recv_cb+0x26>
 8005108:	4b24      	ldr	r3, [pc, #144]	; (800519c <mqtt_tcp_recv_cb+0xac>)
 800510a:	f240 32a7 	movw	r2, #935	; 0x3a7
 800510e:	4924      	ldr	r1, [pc, #144]	; (80051a0 <mqtt_tcp_recv_cb+0xb0>)
 8005110:	4824      	ldr	r0, [pc, #144]	; (80051a4 <mqtt_tcp_recv_cb+0xb4>)
 8005112:	f00b f9eb 	bl	80104ec <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	429a      	cmp	r2, r3
 800511e:	d006      	beq.n	800512e <mqtt_tcp_recv_cb+0x3e>
 8005120:	4b1e      	ldr	r3, [pc, #120]	; (800519c <mqtt_tcp_recv_cb+0xac>)
 8005122:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8005126:	4920      	ldr	r1, [pc, #128]	; (80051a8 <mqtt_tcp_recv_cb+0xb8>)
 8005128:	481e      	ldr	r0, [pc, #120]	; (80051a4 <mqtt_tcp_recv_cb+0xb4>)
 800512a:	f00b f9df 	bl	80104ec <iprintf>

  if (p == NULL) {
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d105      	bne.n	8005140 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8005134:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005138:	6978      	ldr	r0, [r7, #20]
 800513a:	f7ff fbfb 	bl	8004934 <mqtt_close>
 800513e:	e027      	b.n	8005190 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 8005140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f002 f815 	bl	8007178 <pbuf_free>
      return err;
 800514e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005152:	e01e      	b.n	8005192 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	891b      	ldrh	r3, [r3, #8]
 8005158:	4619      	mov	r1, r3
 800515a:	68b8      	ldr	r0, [r7, #8]
 800515c:	f002 fef6 	bl	8007f4c <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	6978      	ldr	r0, [r7, #20]
 8005164:	f7ff feee 	bl	8004f44 <mqtt_parse_incoming>
 8005168:	4603      	mov	r3, r0
 800516a:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f002 f803 	bl	8007178 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 8005172:	8a7b      	ldrh	r3, [r7, #18]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d004      	beq.n	8005182 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 8005178:	8a7b      	ldrh	r3, [r7, #18]
 800517a:	4619      	mov	r1, r3
 800517c:	6978      	ldr	r0, [r7, #20]
 800517e:	f7ff fbd9 	bl	8004934 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	885b      	ldrh	r3, [r3, #2]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2200      	movs	r2, #0
 800518e:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	08011c2c 	.word	0x08011c2c
 80051a0:	08011ecc 	.word	0x08011ecc
 80051a4:	08011ca4 	.word	0x08011ca4
 80051a8:	08011ef0 	.word	0x08011ef0

080051ac <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	4613      	mov	r3, r2
 80051b8:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	7a9b      	ldrb	r3, [r3, #10]
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d127      	bne.n	8005216 <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2200      	movs	r2, #0
 80051ca:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2200      	movs	r2, #0
 80051d0:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 80051d2:	e00d      	b.n	80051f0 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d006      	beq.n	80051ea <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	6892      	ldr	r2, [r2, #8]
 80051e4:	2100      	movs	r1, #0
 80051e6:	4610      	mov	r0, r2
 80051e8:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 80051ea:	6938      	ldr	r0, [r7, #16]
 80051ec:	f7ff f9a8 	bl	8004540 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	3318      	adds	r3, #24
 80051f4:	2100      	movs	r1, #0
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff f9b2 	bl	8004560 <mqtt_take_request>
 80051fc:	6138      	str	r0, [r7, #16]
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1e7      	bne.n	80051d4 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	4619      	mov	r1, r3
 8005210:	4610      	mov	r0, r2
 8005212:	f7ff f84f 	bl	80042b4 <mqtt_output_send>
  }
  return ERR_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <mqtt_tcp_err_cb+0x24>
 8005236:	4b09      	ldr	r3, [pc, #36]	; (800525c <mqtt_tcp_err_cb+0x3c>)
 8005238:	f240 32f6 	movw	r2, #1014	; 0x3f6
 800523c:	4908      	ldr	r1, [pc, #32]	; (8005260 <mqtt_tcp_err_cb+0x40>)
 800523e:	4809      	ldr	r0, [pc, #36]	; (8005264 <mqtt_tcp_err_cb+0x44>)
 8005240:	f00b f954 	bl	80104ec <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800524a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f7ff fb70 	bl	8004934 <mqtt_close>
}
 8005254:	bf00      	nop
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	08011c2c 	.word	0x08011c2c
 8005260:	08011f18 	.word	0x08011f18
 8005264:	08011ca4 	.word	0x08011ca4

08005268 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	7a9b      	ldrb	r3, [r3, #10]
 800527a:	2b03      	cmp	r3, #3
 800527c:	d105      	bne.n	800528a <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	33ec      	adds	r3, #236	; 0xec
 8005282:	6839      	ldr	r1, [r7, #0]
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff f815 	bl	80042b4 <mqtt_output_send>
  }
  return ERR_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	4613      	mov	r3, r2
 80052a0:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 80052a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 80052ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052b2:	e025      	b.n	8005300 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2200      	movs	r2, #0
 80052b8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 80052ba:	4913      	ldr	r1, [pc, #76]	; (8005308 <mqtt_tcp_connect_cb+0x74>)
 80052bc:	68b8      	ldr	r0, [r7, #8]
 80052be:	f003 fe35 	bl	8008f2c <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 80052c2:	4912      	ldr	r1, [pc, #72]	; (800530c <mqtt_tcp_connect_cb+0x78>)
 80052c4:	68b8      	ldr	r0, [r7, #8]
 80052c6:	f003 fe53 	bl	8008f70 <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 80052ca:	2202      	movs	r2, #2
 80052cc:	4910      	ldr	r1, [pc, #64]	; (8005310 <mqtt_tcp_connect_cb+0x7c>)
 80052ce:	68b8      	ldr	r0, [r7, #8]
 80052d0:	f003 fe92 	bl	8008ff8 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	2202      	movs	r2, #2
 80052d8:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	490d      	ldr	r1, [pc, #52]	; (8005314 <mqtt_tcp_connect_cb+0x80>)
 80052de:	f241 3088 	movw	r0, #5000	; 0x1388
 80052e2:	f008 fb7d 	bl	800d9e0 <sys_timeout>
  client->cyclic_tick = 0;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2200      	movs	r2, #0
 80052ea:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	4619      	mov	r1, r3
 80052f8:	4610      	mov	r0, r2
 80052fa:	f7fe ffdb 	bl	80042b4 <mqtt_output_send>

  return ERR_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3718      	adds	r7, #24
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	080050f1 	.word	0x080050f1
 800530c:	080051ad 	.word	0x080051ad
 8005310:	08005269 	.word	0x08005269
 8005314:	080049f5 	.word	0x080049f5

08005318 <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08c      	sub	sp, #48	; 0x30
 800531c:	af02      	add	r7, sp, #8
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d106      	bne.n	800533a <mqtt_publish+0x22>
 800532c:	4b5d      	ldr	r3, [pc, #372]	; (80054a4 <mqtt_publish+0x18c>)
 800532e:	f240 4254 	movw	r2, #1108	; 0x454
 8005332:	495d      	ldr	r1, [pc, #372]	; (80054a8 <mqtt_publish+0x190>)
 8005334:	485d      	ldr	r0, [pc, #372]	; (80054ac <mqtt_publish+0x194>)
 8005336:	f00b f8d9 	bl	80104ec <iprintf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d106      	bne.n	800534e <mqtt_publish+0x36>
 8005340:	4b58      	ldr	r3, [pc, #352]	; (80054a4 <mqtt_publish+0x18c>)
 8005342:	f240 4255 	movw	r2, #1109	; 0x455
 8005346:	495a      	ldr	r1, [pc, #360]	; (80054b0 <mqtt_publish+0x198>)
 8005348:	4858      	ldr	r0, [pc, #352]	; (80054ac <mqtt_publish+0x194>)
 800534a:	f00b f8cf 	bl	80104ec <iprintf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	7a9b      	ldrb	r3, [r3, #10]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d109      	bne.n	800536a <mqtt_publish+0x52>
 8005356:	4b53      	ldr	r3, [pc, #332]	; (80054a4 <mqtt_publish+0x18c>)
 8005358:	f240 4256 	movw	r2, #1110	; 0x456
 800535c:	4955      	ldr	r1, [pc, #340]	; (80054b4 <mqtt_publish+0x19c>)
 800535e:	4853      	ldr	r0, [pc, #332]	; (80054ac <mqtt_publish+0x194>)
 8005360:	f00b f8c4 	bl	80104ec <iprintf>
 8005364:	f06f 030a 	mvn.w	r3, #10
 8005368:	e097      	b.n	800549a <mqtt_publish+0x182>

  topic_strlen = strlen(topic);
 800536a:	68b8      	ldr	r0, [r7, #8]
 800536c:	f7fa ff3a 	bl	80001e4 <strlen>
 8005370:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8005378:	4293      	cmp	r3, r2
 800537a:	d909      	bls.n	8005390 <mqtt_publish+0x78>
 800537c:	4b49      	ldr	r3, [pc, #292]	; (80054a4 <mqtt_publish+0x18c>)
 800537e:	f240 4259 	movw	r2, #1113	; 0x459
 8005382:	494d      	ldr	r1, [pc, #308]	; (80054b8 <mqtt_publish+0x1a0>)
 8005384:	4849      	ldr	r0, [pc, #292]	; (80054ac <mqtt_publish+0x194>)
 8005386:	f00b f8b1 	bl	80104ec <iprintf>
 800538a:	f06f 030f 	mvn.w	r3, #15
 800538e:	e084      	b.n	800549a <mqtt_publish+0x182>
  topic_len = (u16_t)topic_strlen;
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 8005394:	8b7b      	ldrh	r3, [r7, #26]
 8005396:	1c9a      	adds	r2, r3, #2
 8005398:	887b      	ldrh	r3, [r7, #2]
 800539a:	4413      	add	r3, r2
 800539c:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 800539e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d008      	beq.n	80053b8 <mqtt_publish+0xa0>
    total_len += 2;
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	3302      	adds	r3, #2
 80053aa:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f7fe feed 	bl	800418c <msg_generate_packet_id>
 80053b2:	4603      	mov	r3, r0
 80053b4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80053b6:	e001      	b.n	80053bc <mqtt_publish+0xa4>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c2:	d309      	bcc.n	80053d8 <mqtt_publish+0xc0>
 80053c4:	4b37      	ldr	r3, [pc, #220]	; (80054a4 <mqtt_publish+0x18c>)
 80053c6:	f240 4265 	movw	r2, #1125	; 0x465
 80053ca:	493c      	ldr	r1, [pc, #240]	; (80054bc <mqtt_publish+0x1a4>)
 80053cc:	4837      	ldr	r0, [pc, #220]	; (80054ac <mqtt_publish+0x194>)
 80053ce:	f00b f88d 	bl	80104ec <iprintf>
 80053d2:	f06f 030f 	mvn.w	r3, #15
 80053d6:	e060      	b.n	800549a <mqtt_publish+0x182>
  remaining_length = (u16_t)total_len;
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f103 001c 	add.w	r0, r3, #28
 80053e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80053e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ea:	2104      	movs	r1, #4
 80053ec:	f7ff f816 	bl	800441c <mqtt_create_request>
 80053f0:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d102      	bne.n	80053fe <mqtt_publish+0xe6>
    return ERR_MEM;
 80053f8:	f04f 33ff 	mov.w	r3, #4294967295
 80053fc:	e04d      	b.n	800549a <mqtt_publish+0x182>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	33ec      	adds	r3, #236	; 0xec
 8005402:	8b3a      	ldrh	r2, [r7, #24]
 8005404:	4611      	mov	r1, r2
 8005406:	4618      	mov	r0, r3
 8005408:	f7ff fa62 	bl	80048d0 <mqtt_output_check_space>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d105      	bne.n	800541e <mqtt_publish+0x106>
    mqtt_delete_request(r);
 8005412:	6978      	ldr	r0, [r7, #20]
 8005414:	f7ff f894 	bl	8004540 <mqtt_delete_request>
    return ERR_MEM;
 8005418:	f04f 33ff 	mov.w	r3, #4294967295
 800541c:	e03d      	b.n	800549a <mqtt_publish+0x182>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8005424:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005428:	8b3b      	ldrh	r3, [r7, #24]
 800542a:	9301      	str	r3, [sp, #4]
 800542c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	4613      	mov	r3, r2
 8005434:	2200      	movs	r2, #0
 8005436:	2103      	movs	r1, #3
 8005438:	f7ff f9ff 	bl	800483a <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	33ec      	adds	r3, #236	; 0xec
 8005440:	8b7a      	ldrh	r2, [r7, #26]
 8005442:	68b9      	ldr	r1, [r7, #8]
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff f9cc 	bl	80047e2 <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 800544a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800544e:	2b00      	cmp	r3, #0
 8005450:	d006      	beq.n	8005460 <mqtt_publish+0x148>
    mqtt_output_append_u16(&client->output, pkt_id);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	33ec      	adds	r3, #236	; 0xec
 8005456:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005458:	4611      	mov	r1, r2
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff f98b 	bl	8004776 <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d009      	beq.n	800547a <mqtt_publish+0x162>
 8005466:	887b      	ldrh	r3, [r7, #2]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d006      	beq.n	800547a <mqtt_publish+0x162>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	33ec      	adds	r3, #236	; 0xec
 8005470:	887a      	ldrh	r2, [r7, #2]
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff f996 	bl	80047a6 <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	3318      	adds	r3, #24
 800547e:	6979      	ldr	r1, [r7, #20]
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff f811 	bl	80044a8 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	4619      	mov	r1, r3
 8005492:	4610      	mov	r0, r2
 8005494:	f7fe ff0e 	bl	80042b4 <mqtt_output_send>
  return ERR_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3728      	adds	r7, #40	; 0x28
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	08011c2c 	.word	0x08011c2c
 80054a8:	08011f38 	.word	0x08011f38
 80054ac:	08011ca4 	.word	0x08011ca4
 80054b0:	08011f58 	.word	0x08011f58
 80054b4:	08011f74 	.word	0x08011f74
 80054b8:	08011f94 	.word	0x08011f94
 80054bc:	08011fb8 	.word	0x08011fb8

080054c0 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b08c      	sub	sp, #48	; 0x30
 80054c4:	af02      	add	r7, sp, #8
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	603b      	str	r3, [r7, #0]
 80054cc:	4613      	mov	r3, r2
 80054ce:	71fb      	strb	r3, [r7, #7]
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d106      	bne.n	80054e4 <mqtt_sub_unsub+0x24>
 80054d6:	4b5e      	ldr	r3, [pc, #376]	; (8005650 <mqtt_sub_unsub+0x190>)
 80054d8:	f240 429f 	movw	r2, #1183	; 0x49f
 80054dc:	495d      	ldr	r1, [pc, #372]	; (8005654 <mqtt_sub_unsub+0x194>)
 80054de:	485e      	ldr	r0, [pc, #376]	; (8005658 <mqtt_sub_unsub+0x198>)
 80054e0:	f00b f804 	bl	80104ec <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d106      	bne.n	80054f8 <mqtt_sub_unsub+0x38>
 80054ea:	4b59      	ldr	r3, [pc, #356]	; (8005650 <mqtt_sub_unsub+0x190>)
 80054ec:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 80054f0:	495a      	ldr	r1, [pc, #360]	; (800565c <mqtt_sub_unsub+0x19c>)
 80054f2:	4859      	ldr	r0, [pc, #356]	; (8005658 <mqtt_sub_unsub+0x198>)
 80054f4:	f00a fffa 	bl	80104ec <iprintf>

  topic_strlen = strlen(topic);
 80054f8:	68b8      	ldr	r0, [r7, #8]
 80054fa:	f7fa fe73 	bl	80001e4 <strlen>
 80054fe:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8005506:	4293      	cmp	r3, r2
 8005508:	d909      	bls.n	800551e <mqtt_sub_unsub+0x5e>
 800550a:	4b51      	ldr	r3, [pc, #324]	; (8005650 <mqtt_sub_unsub+0x190>)
 800550c:	f240 42a3 	movw	r2, #1187	; 0x4a3
 8005510:	4953      	ldr	r1, [pc, #332]	; (8005660 <mqtt_sub_unsub+0x1a0>)
 8005512:	4851      	ldr	r0, [pc, #324]	; (8005658 <mqtt_sub_unsub+0x198>)
 8005514:	f00a ffea 	bl	80104ec <iprintf>
 8005518:	f06f 030f 	mvn.w	r3, #15
 800551c:	e093      	b.n	8005646 <mqtt_sub_unsub+0x186>
  topic_len = (u16_t)topic_strlen;
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 8005522:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005524:	3304      	adds	r3, #4
 8005526:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800552a:	2a00      	cmp	r2, #0
 800552c:	bf14      	ite	ne
 800552e:	2201      	movne	r2, #1
 8005530:	2200      	moveq	r2, #0
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	4413      	add	r3, r2
 8005536:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800553e:	d309      	bcc.n	8005554 <mqtt_sub_unsub+0x94>
 8005540:	4b43      	ldr	r3, [pc, #268]	; (8005650 <mqtt_sub_unsub+0x190>)
 8005542:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8005546:	4947      	ldr	r1, [pc, #284]	; (8005664 <mqtt_sub_unsub+0x1a4>)
 8005548:	4843      	ldr	r0, [pc, #268]	; (8005658 <mqtt_sub_unsub+0x198>)
 800554a:	f00a ffcf 	bl	80104ec <iprintf>
 800554e:	f06f 030f 	mvn.w	r3, #15
 8005552:	e078      	b.n	8005646 <mqtt_sub_unsub+0x186>
  remaining_length = (u16_t)total_len;
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 8005558:	79fb      	ldrb	r3, [r7, #7]
 800555a:	2b02      	cmp	r3, #2
 800555c:	d906      	bls.n	800556c <mqtt_sub_unsub+0xac>
 800555e:	4b3c      	ldr	r3, [pc, #240]	; (8005650 <mqtt_sub_unsub+0x190>)
 8005560:	f240 42aa 	movw	r2, #1194	; 0x4aa
 8005564:	4940      	ldr	r1, [pc, #256]	; (8005668 <mqtt_sub_unsub+0x1a8>)
 8005566:	483c      	ldr	r0, [pc, #240]	; (8005658 <mqtt_sub_unsub+0x198>)
 8005568:	f00a ffc0 	bl	80104ec <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	7a9b      	ldrb	r3, [r3, #10]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d102      	bne.n	800557a <mqtt_sub_unsub+0xba>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 8005574:	f06f 030a 	mvn.w	r3, #10
 8005578:	e065      	b.n	8005646 <mqtt_sub_unsub+0x186>
  }

  pkt_id = msg_generate_packet_id(client);
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f7fe fe06 	bl	800418c <msg_generate_packet_id>
 8005580:	4603      	mov	r3, r0
 8005582:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f103 001c 	add.w	r0, r3, #28
 800558a:	8b3a      	ldrh	r2, [r7, #24]
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	2104      	movs	r1, #4
 8005594:	f7fe ff42 	bl	800441c <mqtt_create_request>
 8005598:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d102      	bne.n	80055a6 <mqtt_sub_unsub+0xe6>
    return ERR_MEM;
 80055a0:	f04f 33ff 	mov.w	r3, #4294967295
 80055a4:	e04f      	b.n	8005646 <mqtt_sub_unsub+0x186>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	33ec      	adds	r3, #236	; 0xec
 80055aa:	8b7a      	ldrh	r2, [r7, #26]
 80055ac:	4611      	mov	r1, r2
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7ff f98e 	bl	80048d0 <mqtt_output_check_space>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d105      	bne.n	80055c6 <mqtt_sub_unsub+0x106>
    mqtt_delete_request(r);
 80055ba:	6978      	ldr	r0, [r7, #20]
 80055bc:	f7fe ffc0 	bl	8004540 <mqtt_delete_request>
    return ERR_MEM;
 80055c0:	f04f 33ff 	mov.w	r3, #4294967295
 80055c4:	e03f      	b.n	8005646 <mqtt_sub_unsub+0x186>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80055cc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <mqtt_sub_unsub+0x118>
 80055d4:	2108      	movs	r1, #8
 80055d6:	e000      	b.n	80055da <mqtt_sub_unsub+0x11a>
 80055d8:	210a      	movs	r1, #10
 80055da:	8b7b      	ldrh	r3, [r7, #26]
 80055dc:	9301      	str	r3, [sp, #4]
 80055de:	2300      	movs	r3, #0
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	2301      	movs	r3, #1
 80055e4:	2200      	movs	r2, #0
 80055e6:	f7ff f928 	bl	800483a <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	33ec      	adds	r3, #236	; 0xec
 80055ee:	8b3a      	ldrh	r2, [r7, #24]
 80055f0:	4611      	mov	r1, r2
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff f8bf 	bl	8004776 <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	33ec      	adds	r3, #236	; 0xec
 80055fc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80055fe:	68b9      	ldr	r1, [r7, #8]
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff f8ee 	bl	80047e2 <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 8005606:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00b      	beq.n	8005626 <mqtt_sub_unsub+0x166>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8005614:	79fb      	ldrb	r3, [r7, #7]
 8005616:	2b02      	cmp	r3, #2
 8005618:	bf28      	it	cs
 800561a:	2302      	movcs	r3, #2
 800561c:	b2db      	uxtb	r3, r3
 800561e:	4619      	mov	r1, r3
 8005620:	4610      	mov	r0, r2
 8005622:	f7ff f899 	bl	8004758 <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	3318      	adds	r3, #24
 800562a:	6979      	ldr	r1, [r7, #20]
 800562c:	4618      	mov	r0, r3
 800562e:	f7fe ff3b 	bl	80044a8 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	4619      	mov	r1, r3
 800563e:	4610      	mov	r0, r2
 8005640:	f7fe fe38 	bl	80042b4 <mqtt_output_send>
  return ERR_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3728      	adds	r7, #40	; 0x28
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	08011c2c 	.word	0x08011c2c
 8005654:	08011fdc 	.word	0x08011fdc
 8005658:	08011ca4 	.word	0x08011ca4
 800565c:	08011ffc 	.word	0x08011ffc
 8005660:	0801201c 	.word	0x0801201c
 8005664:	08012044 	.word	0x08012044
 8005668:	0801206c 	.word	0x0801206c

0800566c <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d106      	bne.n	800568e <mqtt_set_inpub_callback+0x22>
 8005680:	4b09      	ldr	r3, [pc, #36]	; (80056a8 <mqtt_set_inpub_callback+0x3c>)
 8005682:	f240 42da 	movw	r2, #1242	; 0x4da
 8005686:	4909      	ldr	r1, [pc, #36]	; (80056ac <mqtt_set_inpub_callback+0x40>)
 8005688:	4809      	ldr	r0, [pc, #36]	; (80056b0 <mqtt_set_inpub_callback+0x44>)
 800568a:	f00a ff2f 	bl	80104ec <iprintf>
  client->data_cb = data_cb;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = arg;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80056a0:	bf00      	nop
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	08011c2c 	.word	0x08011c2c
 80056ac:	08012084 	.word	0x08012084
 80056b0:	08011ca4 	.word	0x08011ca4

080056b4 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 80056b8:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80056bc:	2001      	movs	r0, #1
 80056be:	f000 fe61 	bl	8006384 <mem_calloc>
 80056c2:	4603      	mov	r3, r0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08c      	sub	sp, #48	; 0x30
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	4613      	mov	r3, r2
 80056d6:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 80056d8:	230a      	movs	r3, #10
 80056da:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056e2:	2300      	movs	r3, #0
 80056e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80056e8:	2300      	movs	r3, #0
 80056ea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 80056ee:	2300      	movs	r3, #0
 80056f0:	83fb      	strh	r3, [r7, #30]
 80056f2:	2300      	movs	r3, #0
 80056f4:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d106      	bne.n	800570a <mqtt_client_connect+0x42>
 80056fc:	4b9e      	ldr	r3, [pc, #632]	; (8005978 <mqtt_client_connect+0x2b0>)
 80056fe:	f240 520f 	movw	r2, #1295	; 0x50f
 8005702:	499e      	ldr	r1, [pc, #632]	; (800597c <mqtt_client_connect+0x2b4>)
 8005704:	489e      	ldr	r0, [pc, #632]	; (8005980 <mqtt_client_connect+0x2b8>)
 8005706:	f00a fef1 	bl	80104ec <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d106      	bne.n	800571e <mqtt_client_connect+0x56>
 8005710:	4b99      	ldr	r3, [pc, #612]	; (8005978 <mqtt_client_connect+0x2b0>)
 8005712:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8005716:	499b      	ldr	r1, [pc, #620]	; (8005984 <mqtt_client_connect+0x2bc>)
 8005718:	4899      	ldr	r0, [pc, #612]	; (8005980 <mqtt_client_connect+0x2b8>)
 800571a:	f00a fee7 	bl	80104ec <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 800571e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005720:	2b00      	cmp	r3, #0
 8005722:	d106      	bne.n	8005732 <mqtt_client_connect+0x6a>
 8005724:	4b94      	ldr	r3, [pc, #592]	; (8005978 <mqtt_client_connect+0x2b0>)
 8005726:	f240 5211 	movw	r2, #1297	; 0x511
 800572a:	4997      	ldr	r1, [pc, #604]	; (8005988 <mqtt_client_connect+0x2c0>)
 800572c:	4894      	ldr	r0, [pc, #592]	; (8005980 <mqtt_client_connect+0x2b8>)
 800572e:	f00a fedd 	bl	80104ec <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 8005732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d106      	bne.n	8005748 <mqtt_client_connect+0x80>
 800573a:	4b8f      	ldr	r3, [pc, #572]	; (8005978 <mqtt_client_connect+0x2b0>)
 800573c:	f240 5212 	movw	r2, #1298	; 0x512
 8005740:	4992      	ldr	r1, [pc, #584]	; (800598c <mqtt_client_connect+0x2c4>)
 8005742:	488f      	ldr	r0, [pc, #572]	; (8005980 <mqtt_client_connect+0x2b8>)
 8005744:	f00a fed2 	bl	80104ec <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	7a9b      	ldrb	r3, [r3, #10]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 8005750:	f06f 0309 	mvn.w	r3, #9
 8005754:	e21f      	b.n	8005b96 <mqtt_client_connect+0x4ce>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 8005756:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800575a:	2100      	movs	r1, #0
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f00a febd 	bl	80104dc <memset>
  client->connect_arg = arg;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005766:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 800576e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005770:	899a      	ldrh	r2, [r3, #12]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	331c      	adds	r3, #28
 800577a:	2104      	movs	r1, #4
 800577c:	4618      	mov	r0, r3
 800577e:	f7fe ffbd 	bl	80046fc <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 8005782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d073      	beq.n	8005872 <mqtt_client_connect+0x1aa>
 800578a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d06f      	beq.n	8005872 <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 8005792:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005796:	f043 0304 	orr.w	r3, r3, #4
 800579a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 800579e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a0:	7e1b      	ldrb	r3, [r3, #24]
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	b25b      	sxtb	r3, r3
 80057a6:	f003 0318 	and.w	r3, r3, #24
 80057aa:	b25a      	sxtb	r2, r3
 80057ac:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80057b0:	4313      	orrs	r3, r2
 80057b2:	b25b      	sxtb	r3, r3
 80057b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 80057b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ba:	7e5b      	ldrb	r3, [r3, #25]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 80057c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057c4:	f043 0320 	orr.w	r3, r3, #32
 80057c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 80057cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7fa fd07 	bl	80001e4 <strlen>
 80057d6:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	2bff      	cmp	r3, #255	; 0xff
 80057dc:	d909      	bls.n	80057f2 <mqtt_client_connect+0x12a>
 80057de:	4b66      	ldr	r3, [pc, #408]	; (8005978 <mqtt_client_connect+0x2b0>)
 80057e0:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 80057e4:	496a      	ldr	r1, [pc, #424]	; (8005990 <mqtt_client_connect+0x2c8>)
 80057e6:	4866      	ldr	r0, [pc, #408]	; (8005980 <mqtt_client_connect+0x2b8>)
 80057e8:	f00a fe80 	bl	80104ec <iprintf>
 80057ec:	f06f 0305 	mvn.w	r3, #5
 80057f0:	e1d1      	b.n	8005b96 <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d109      	bne.n	800580c <mqtt_client_connect+0x144>
 80057f8:	4b5f      	ldr	r3, [pc, #380]	; (8005978 <mqtt_client_connect+0x2b0>)
 80057fa:	f240 5229 	movw	r2, #1321	; 0x529
 80057fe:	4965      	ldr	r1, [pc, #404]	; (8005994 <mqtt_client_connect+0x2cc>)
 8005800:	485f      	ldr	r0, [pc, #380]	; (8005980 <mqtt_client_connect+0x2b8>)
 8005802:	f00a fe73 	bl	80104ec <iprintf>
 8005806:	f06f 0305 	mvn.w	r3, #5
 800580a:	e1c4      	b.n	8005b96 <mqtt_client_connect+0x4ce>
    will_topic_len = (u8_t)len;
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 8005812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	4618      	mov	r0, r3
 8005818:	f7fa fce4 	bl	80001e4 <strlen>
 800581c:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	2bff      	cmp	r3, #255	; 0xff
 8005822:	d909      	bls.n	8005838 <mqtt_client_connect+0x170>
 8005824:	4b54      	ldr	r3, [pc, #336]	; (8005978 <mqtt_client_connect+0x2b0>)
 8005826:	f240 522c 	movw	r2, #1324	; 0x52c
 800582a:	495b      	ldr	r1, [pc, #364]	; (8005998 <mqtt_client_connect+0x2d0>)
 800582c:	4854      	ldr	r0, [pc, #336]	; (8005980 <mqtt_client_connect+0x2b8>)
 800582e:	f00a fe5d 	bl	80104ec <iprintf>
 8005832:	f06f 0305 	mvn.w	r3, #5
 8005836:	e1ae      	b.n	8005b96 <mqtt_client_connect+0x4ce>
    will_msg_len = (u8_t)len;
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 800583e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005840:	1c9a      	adds	r2, r3, #2
 8005842:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005846:	4413      	add	r3, r2
 8005848:	1c9a      	adds	r2, r3, #2
 800584a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800584e:	4413      	add	r3, r2
 8005850:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005858:	d309      	bcc.n	800586e <mqtt_client_connect+0x1a6>
 800585a:	4b47      	ldr	r3, [pc, #284]	; (8005978 <mqtt_client_connect+0x2b0>)
 800585c:	f240 522f 	movw	r2, #1327	; 0x52f
 8005860:	494e      	ldr	r1, [pc, #312]	; (800599c <mqtt_client_connect+0x2d4>)
 8005862:	4847      	ldr	r0, [pc, #284]	; (8005980 <mqtt_client_connect+0x2b8>)
 8005864:	f00a fe42 	bl	80104ec <iprintf>
 8005868:	f06f 0305 	mvn.w	r3, #5
 800586c:	e193      	b.n	8005b96 <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 8005872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d03d      	beq.n	80058f6 <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 800587a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800587e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 8005886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	4618      	mov	r0, r3
 800588c:	f7fa fcaa 	bl	80001e4 <strlen>
 8005890:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005898:	d309      	bcc.n	80058ae <mqtt_client_connect+0x1e6>
 800589a:	4b37      	ldr	r3, [pc, #220]	; (8005978 <mqtt_client_connect+0x2b0>)
 800589c:	f240 5235 	movw	r2, #1333	; 0x535
 80058a0:	493f      	ldr	r1, [pc, #252]	; (80059a0 <mqtt_client_connect+0x2d8>)
 80058a2:	4837      	ldr	r0, [pc, #220]	; (8005980 <mqtt_client_connect+0x2b8>)
 80058a4:	f00a fe22 	bl	80104ec <iprintf>
 80058a8:	f06f 0305 	mvn.w	r3, #5
 80058ac:	e173      	b.n	8005b96 <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d109      	bne.n	80058c8 <mqtt_client_connect+0x200>
 80058b4:	4b30      	ldr	r3, [pc, #192]	; (8005978 <mqtt_client_connect+0x2b0>)
 80058b6:	f240 5236 	movw	r2, #1334	; 0x536
 80058ba:	493a      	ldr	r1, [pc, #232]	; (80059a4 <mqtt_client_connect+0x2dc>)
 80058bc:	4830      	ldr	r0, [pc, #192]	; (8005980 <mqtt_client_connect+0x2b8>)
 80058be:	f00a fe15 	bl	80104ec <iprintf>
 80058c2:	f06f 0305 	mvn.w	r3, #5
 80058c6:	e166      	b.n	8005b96 <mqtt_client_connect+0x4ce>
    client_user_len = (u16_t)len;
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 80058cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058ce:	1c9a      	adds	r2, r3, #2
 80058d0:	8bfb      	ldrh	r3, [r7, #30]
 80058d2:	4413      	add	r3, r2
 80058d4:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058dc:	d309      	bcc.n	80058f2 <mqtt_client_connect+0x22a>
 80058de:	4b26      	ldr	r3, [pc, #152]	; (8005978 <mqtt_client_connect+0x2b0>)
 80058e0:	f240 5239 	movw	r2, #1337	; 0x539
 80058e4:	492d      	ldr	r1, [pc, #180]	; (800599c <mqtt_client_connect+0x2d4>)
 80058e6:	4826      	ldr	r0, [pc, #152]	; (8005980 <mqtt_client_connect+0x2b8>)
 80058e8:	f00a fe00 	bl	80104ec <iprintf>
 80058ec:	f06f 0305 	mvn.w	r3, #5
 80058f0:	e151      	b.n	8005b96 <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 80058f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d05a      	beq.n	80059b4 <mqtt_client_connect+0x2ec>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 80058fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 800590a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	4618      	mov	r0, r3
 8005910:	f7fa fc68 	bl	80001e4 <strlen>
 8005914:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800591c:	d309      	bcc.n	8005932 <mqtt_client_connect+0x26a>
 800591e:	4b16      	ldr	r3, [pc, #88]	; (8005978 <mqtt_client_connect+0x2b0>)
 8005920:	f240 523f 	movw	r2, #1343	; 0x53f
 8005924:	4920      	ldr	r1, [pc, #128]	; (80059a8 <mqtt_client_connect+0x2e0>)
 8005926:	4816      	ldr	r0, [pc, #88]	; (8005980 <mqtt_client_connect+0x2b8>)
 8005928:	f00a fde0 	bl	80104ec <iprintf>
 800592c:	f06f 0305 	mvn.w	r3, #5
 8005930:	e131      	b.n	8005b96 <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d109      	bne.n	800594c <mqtt_client_connect+0x284>
 8005938:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <mqtt_client_connect+0x2b0>)
 800593a:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 800593e:	491b      	ldr	r1, [pc, #108]	; (80059ac <mqtt_client_connect+0x2e4>)
 8005940:	480f      	ldr	r0, [pc, #60]	; (8005980 <mqtt_client_connect+0x2b8>)
 8005942:	f00a fdd3 	bl	80104ec <iprintf>
 8005946:	f06f 0305 	mvn.w	r3, #5
 800594a:	e124      	b.n	8005b96 <mqtt_client_connect+0x4ce>
    client_pass_len = (u16_t)len;
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 8005950:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005952:	1c9a      	adds	r2, r3, #2
 8005954:	8bbb      	ldrh	r3, [r7, #28]
 8005956:	4413      	add	r3, r2
 8005958:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005960:	d326      	bcc.n	80059b0 <mqtt_client_connect+0x2e8>
 8005962:	4b05      	ldr	r3, [pc, #20]	; (8005978 <mqtt_client_connect+0x2b0>)
 8005964:	f240 5243 	movw	r2, #1347	; 0x543
 8005968:	490c      	ldr	r1, [pc, #48]	; (800599c <mqtt_client_connect+0x2d4>)
 800596a:	4805      	ldr	r0, [pc, #20]	; (8005980 <mqtt_client_connect+0x2b8>)
 800596c:	f00a fdbe 	bl	80104ec <iprintf>
 8005970:	f06f 0305 	mvn.w	r3, #5
 8005974:	e10f      	b.n	8005b96 <mqtt_client_connect+0x4ce>
 8005976:	bf00      	nop
 8005978:	08011c2c 	.word	0x08011c2c
 800597c:	080120ac 	.word	0x080120ac
 8005980:	08011ca4 	.word	0x08011ca4
 8005984:	080120d0 	.word	0x080120d0
 8005988:	080120f8 	.word	0x080120f8
 800598c:	08012124 	.word	0x08012124
 8005990:	08012158 	.word	0x08012158
 8005994:	08012198 	.word	0x08012198
 8005998:	080121d8 	.word	0x080121d8
 800599c:	08012214 	.word	0x08012214
 80059a0:	08012244 	.word	0x08012244
 80059a4:	08012284 	.word	0x08012284
 80059a8:	080122c8 	.word	0x080122c8
 80059ac:	08012308 	.word	0x08012308
    remaining_length = (u16_t)len;
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 80059b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059b8:	f043 0302 	orr.w	r3, r3, #2
 80059bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 80059c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fa fc0d 	bl	80001e4 <strlen>
 80059ca:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059d2:	d309      	bcc.n	80059e8 <mqtt_client_connect+0x320>
 80059d4:	4b72      	ldr	r3, [pc, #456]	; (8005ba0 <mqtt_client_connect+0x4d8>)
 80059d6:	f240 524b 	movw	r2, #1355	; 0x54b
 80059da:	4972      	ldr	r1, [pc, #456]	; (8005ba4 <mqtt_client_connect+0x4dc>)
 80059dc:	4872      	ldr	r0, [pc, #456]	; (8005ba8 <mqtt_client_connect+0x4e0>)
 80059de:	f00a fd85 	bl	80104ec <iprintf>
 80059e2:	f06f 0305 	mvn.w	r3, #5
 80059e6:	e0d6      	b.n	8005b96 <mqtt_client_connect+0x4ce>
  client_id_length = (u16_t)len;
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 80059ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059ee:	1c9a      	adds	r2, r3, #2
 80059f0:	8afb      	ldrh	r3, [r7, #22]
 80059f2:	4413      	add	r3, r2
 80059f4:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059fc:	d309      	bcc.n	8005a12 <mqtt_client_connect+0x34a>
 80059fe:	4b68      	ldr	r3, [pc, #416]	; (8005ba0 <mqtt_client_connect+0x4d8>)
 8005a00:	f240 524e 	movw	r2, #1358	; 0x54e
 8005a04:	4969      	ldr	r1, [pc, #420]	; (8005bac <mqtt_client_connect+0x4e4>)
 8005a06:	4868      	ldr	r0, [pc, #416]	; (8005ba8 <mqtt_client_connect+0x4e0>)
 8005a08:	f00a fd70 	bl	80104ec <iprintf>
 8005a0c:	f06f 0305 	mvn.w	r3, #5
 8005a10:	e0c1      	b.n	8005b96 <mqtt_client_connect+0x4ce>
  remaining_length = (u16_t)len;
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	33ec      	adds	r3, #236	; 0xec
 8005a1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fe ff56 	bl	80048d0 <mqtt_output_check_space>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d102      	bne.n	8005a30 <mqtt_client_connect+0x368>
    return ERR_MEM;
 8005a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a2e:	e0b2      	b.n	8005b96 <mqtt_client_connect+0x4ce>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 8005a30:	2000      	movs	r0, #0
 8005a32:	f003 fa5b 	bl	8008eec <tcp_new_ip_type>
 8005a36:	4602      	mov	r2, r0
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d102      	bne.n	8005a4a <mqtt_client_connect+0x382>
    return ERR_MEM;
 8005a44:	f04f 33ff 	mov.w	r3, #4294967295
 8005a48:	e0a5      	b.n	8005b96 <mqtt_client_connect+0x4ce>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	68f9      	ldr	r1, [r7, #12]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f003 fa59 	bl	8008f08 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	4954      	ldr	r1, [pc, #336]	; (8005bb0 <mqtt_client_connect+0x4e8>)
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f002 f982 	bl	8007d68 <tcp_bind>
 8005a64:	4603      	mov	r3, r0
 8005a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 8005a6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f040 8084 	bne.w	8005b7c <mqtt_client_connect+0x4b4>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	68d8      	ldr	r0, [r3, #12]
 8005a78:	88fa      	ldrh	r2, [r7, #6]
 8005a7a:	4b4e      	ldr	r3, [pc, #312]	; (8005bb4 <mqtt_client_connect+0x4ec>)
 8005a7c:	68b9      	ldr	r1, [r7, #8]
 8005a7e:	f002 fafb 	bl	8008078 <tcp_connect>
 8005a82:	4603      	mov	r3, r0
 8005a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 8005a88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d177      	bne.n	8005b80 <mqtt_client_connect+0x4b8>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	4948      	ldr	r1, [pc, #288]	; (8005bb8 <mqtt_client_connect+0x4f0>)
 8005a96:	4618      	mov	r0, r3
 8005a98:	f003 fa8c 	bl	8008fb4 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8005aa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	2300      	movs	r3, #0
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	f7fe fec0 	bl	800483a <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	33ec      	adds	r3, #236	; 0xec
 8005abe:	2204      	movs	r2, #4
 8005ac0:	493e      	ldr	r1, [pc, #248]	; (8005bbc <mqtt_client_connect+0x4f4>)
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe fe8d 	bl	80047e2 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	33ec      	adds	r3, #236	; 0xec
 8005acc:	2104      	movs	r1, #4
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fe fe42 	bl	8004758 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	33ec      	adds	r3, #236	; 0xec
 8005ad8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005adc:	4611      	mov	r1, r2
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fe fe3a 	bl	8004758 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8005aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aec:	899b      	ldrh	r3, [r3, #12]
 8005aee:	4619      	mov	r1, r3
 8005af0:	4610      	mov	r0, r2
 8005af2:	f7fe fe40 	bl	8004776 <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8005afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	8afa      	ldrh	r2, [r7, #22]
 8005b02:	4619      	mov	r1, r3
 8005b04:	f7fe fe6d 	bl	80047e2 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 8005b08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d015      	beq.n	8005b40 <mqtt_client_connect+0x478>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8005b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8005b22:	b292      	uxth	r2, r2
 8005b24:	4619      	mov	r1, r3
 8005b26:	f7fe fe5c 	bl	80047e2 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8005b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005b38:	b292      	uxth	r2, r2
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	f7fe fe51 	bl	80047e2 <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 8005b40:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	da08      	bge.n	8005b5a <mqtt_client_connect+0x492>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8005b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	8bfa      	ldrh	r2, [r7, #30]
 8005b54:	4619      	mov	r1, r3
 8005b56:	f7fe fe44 	bl	80047e2 <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 8005b5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d008      	beq.n	8005b78 <mqtt_client_connect+0x4b0>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8005b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	8bba      	ldrh	r2, [r7, #28]
 8005b72:	4619      	mov	r1, r3
 8005b74:	f7fe fe35 	bl	80047e2 <mqtt_output_append_string>
  }
  return ERR_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e00c      	b.n	8005b96 <mqtt_client_connect+0x4ce>
    goto tcp_fail;
 8005b7c:	bf00      	nop
 8005b7e:	e000      	b.n	8005b82 <mqtt_client_connect+0x4ba>
    goto tcp_fail;
 8005b80:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f002 f8e2 	bl	8007d50 <tcp_abort>
  client->conn = NULL;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	60da      	str	r2, [r3, #12]
  return err;
 8005b92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3728      	adds	r7, #40	; 0x28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	08011c2c 	.word	0x08011c2c
 8005ba4:	0801234c 	.word	0x0801234c
 8005ba8:	08011ca4 	.word	0x08011ca4
 8005bac:	08012214 	.word	0x08012214
 8005bb0:	08014e48 	.word	0x08014e48
 8005bb4:	08005295 	.word	0x08005295
 8005bb8:	08005221 	.word	0x08005221
 8005bbc:	08012388 	.word	0x08012388

08005bc0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005bca:	88fb      	ldrh	r3, [r7, #6]
 8005bcc:	021b      	lsls	r3, r3, #8
 8005bce:	b21a      	sxth	r2, r3
 8005bd0:	88fb      	ldrh	r3, [r7, #6]
 8005bd2:	0a1b      	lsrs	r3, r3, #8
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	b21b      	sxth	r3, r3
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	b21b      	sxth	r3, r3
 8005bdc:	b29b      	uxth	r3, r3
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	061a      	lsls	r2, r3, #24
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	021b      	lsls	r3, r3, #8
 8005bfa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	0a1b      	lsrs	r3, r3, #8
 8005c04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	0e1b      	lsrs	r3, r3, #24
 8005c0e:	4313      	orrs	r3, r2
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005c22:	2300      	movs	r3, #0
 8005c24:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005c26:	f000 f8d5 	bl	8005dd4 <mem_init>
  memp_init();
 8005c2a:	f000 fc03 	bl	8006434 <memp_init>
  pbuf_init();
  netif_init();
 8005c2e:	f000 fcbb 	bl	80065a8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005c32:	f007 ff77 	bl	800db24 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005c36:	f001 fd91 	bl	800775c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005c3a:	f007 feaf 	bl	800d99c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005c3e:	bf00      	nop
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	4603      	mov	r3, r0
 8005c50:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005c52:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <ptr_to_mem+0x20>)
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	88fb      	ldrh	r3, [r7, #6]
 8005c58:	4413      	add	r3, r2
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	200038fc 	.word	0x200038fc

08005c6c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005c74:	4b05      	ldr	r3, [pc, #20]	; (8005c8c <mem_to_ptr+0x20>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	b29b      	uxth	r3, r3
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	200038fc 	.word	0x200038fc

08005c90 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005c90:	b590      	push	{r4, r7, lr}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005c98:	4b45      	ldr	r3, [pc, #276]	; (8005db0 <plug_holes+0x120>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d206      	bcs.n	8005cb0 <plug_holes+0x20>
 8005ca2:	4b44      	ldr	r3, [pc, #272]	; (8005db4 <plug_holes+0x124>)
 8005ca4:	f240 12df 	movw	r2, #479	; 0x1df
 8005ca8:	4943      	ldr	r1, [pc, #268]	; (8005db8 <plug_holes+0x128>)
 8005caa:	4844      	ldr	r0, [pc, #272]	; (8005dbc <plug_holes+0x12c>)
 8005cac:	f00a fc1e 	bl	80104ec <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005cb0:	4b43      	ldr	r3, [pc, #268]	; (8005dc0 <plug_holes+0x130>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d306      	bcc.n	8005cc8 <plug_holes+0x38>
 8005cba:	4b3e      	ldr	r3, [pc, #248]	; (8005db4 <plug_holes+0x124>)
 8005cbc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005cc0:	4940      	ldr	r1, [pc, #256]	; (8005dc4 <plug_holes+0x134>)
 8005cc2:	483e      	ldr	r0, [pc, #248]	; (8005dbc <plug_holes+0x12c>)
 8005cc4:	f00a fc12 	bl	80104ec <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	791b      	ldrb	r3, [r3, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d006      	beq.n	8005cde <plug_holes+0x4e>
 8005cd0:	4b38      	ldr	r3, [pc, #224]	; (8005db4 <plug_holes+0x124>)
 8005cd2:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005cd6:	493c      	ldr	r1, [pc, #240]	; (8005dc8 <plug_holes+0x138>)
 8005cd8:	4838      	ldr	r0, [pc, #224]	; (8005dbc <plug_holes+0x12c>)
 8005cda:	f00a fc07 	bl	80104ec <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005ce6:	d906      	bls.n	8005cf6 <plug_holes+0x66>
 8005ce8:	4b32      	ldr	r3, [pc, #200]	; (8005db4 <plug_holes+0x124>)
 8005cea:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005cee:	4937      	ldr	r1, [pc, #220]	; (8005dcc <plug_holes+0x13c>)
 8005cf0:	4832      	ldr	r0, [pc, #200]	; (8005dbc <plug_holes+0x12c>)
 8005cf2:	f00a fbfb 	bl	80104ec <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7ff ffa4 	bl	8005c48 <ptr_to_mem>
 8005d00:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d024      	beq.n	8005d54 <plug_holes+0xc4>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	791b      	ldrb	r3, [r3, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d120      	bne.n	8005d54 <plug_holes+0xc4>
 8005d12:	4b2b      	ldr	r3, [pc, #172]	; (8005dc0 <plug_holes+0x130>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d01b      	beq.n	8005d54 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005d1c:	4b2c      	ldr	r3, [pc, #176]	; (8005dd0 <plug_holes+0x140>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d102      	bne.n	8005d2c <plug_holes+0x9c>
      lfree = mem;
 8005d26:	4a2a      	ldr	r2, [pc, #168]	; (8005dd0 <plug_holes+0x140>)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	881a      	ldrh	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005d3c:	d00a      	beq.n	8005d54 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff ff80 	bl	8005c48 <ptr_to_mem>
 8005d48:	4604      	mov	r4, r0
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7ff ff8e 	bl	8005c6c <mem_to_ptr>
 8005d50:	4603      	mov	r3, r0
 8005d52:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	885b      	ldrh	r3, [r3, #2]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7ff ff75 	bl	8005c48 <ptr_to_mem>
 8005d5e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d01f      	beq.n	8005da8 <plug_holes+0x118>
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	791b      	ldrb	r3, [r3, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d11b      	bne.n	8005da8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005d70:	4b17      	ldr	r3, [pc, #92]	; (8005dd0 <plug_holes+0x140>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d102      	bne.n	8005d80 <plug_holes+0xf0>
      lfree = pmem;
 8005d7a:	4a15      	ldr	r2, [pc, #84]	; (8005dd0 <plug_holes+0x140>)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	881a      	ldrh	r2, [r3, #0]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005d90:	d00a      	beq.n	8005da8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff ff56 	bl	8005c48 <ptr_to_mem>
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	68b8      	ldr	r0, [r7, #8]
 8005da0:	f7ff ff64 	bl	8005c6c <mem_to_ptr>
 8005da4:	4603      	mov	r3, r0
 8005da6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005da8:	bf00      	nop
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd90      	pop	{r4, r7, pc}
 8005db0:	200038fc 	.word	0x200038fc
 8005db4:	080123dc 	.word	0x080123dc
 8005db8:	0801240c 	.word	0x0801240c
 8005dbc:	08012424 	.word	0x08012424
 8005dc0:	20003900 	.word	0x20003900
 8005dc4:	0801244c 	.word	0x0801244c
 8005dc8:	08012468 	.word	0x08012468
 8005dcc:	08012484 	.word	0x08012484
 8005dd0:	20003904 	.word	0x20003904

08005dd4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005dda:	4b18      	ldr	r3, [pc, #96]	; (8005e3c <mem_init+0x68>)
 8005ddc:	3303      	adds	r3, #3
 8005dde:	f023 0303 	bic.w	r3, r3, #3
 8005de2:	461a      	mov	r2, r3
 8005de4:	4b16      	ldr	r3, [pc, #88]	; (8005e40 <mem_init+0x6c>)
 8005de6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005de8:	4b15      	ldr	r3, [pc, #84]	; (8005e40 <mem_init+0x6c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005df4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005e02:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005e06:	f7ff ff1f 	bl	8005c48 <ptr_to_mem>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	4a0d      	ldr	r2, [pc, #52]	; (8005e44 <mem_init+0x70>)
 8005e0e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005e10:	4b0c      	ldr	r3, [pc, #48]	; (8005e44 <mem_init+0x70>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2201      	movs	r2, #1
 8005e16:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005e18:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <mem_init+0x70>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005e20:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005e22:	4b08      	ldr	r3, [pc, #32]	; (8005e44 <mem_init+0x70>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005e2a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005e2c:	4b04      	ldr	r3, [pc, #16]	; (8005e40 <mem_init+0x6c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a05      	ldr	r2, [pc, #20]	; (8005e48 <mem_init+0x74>)
 8005e32:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005e34:	bf00      	nop
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	200032a8 	.word	0x200032a8
 8005e40:	200038fc 	.word	0x200038fc
 8005e44:	20003900 	.word	0x20003900
 8005e48:	20003904 	.word	0x20003904

08005e4c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7ff ff09 	bl	8005c6c <mem_to_ptr>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7ff fef0 	bl	8005c48 <ptr_to_mem>
 8005e68:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	885b      	ldrh	r3, [r3, #2]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7ff feea 	bl	8005c48 <ptr_to_mem>
 8005e74:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005e7e:	d818      	bhi.n	8005eb2 <mem_link_valid+0x66>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	885b      	ldrh	r3, [r3, #2]
 8005e84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005e88:	d813      	bhi.n	8005eb2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005e8e:	8afa      	ldrh	r2, [r7, #22]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d004      	beq.n	8005e9e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	8afa      	ldrh	r2, [r7, #22]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d109      	bne.n	8005eb2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005e9e:	4b08      	ldr	r3, [pc, #32]	; (8005ec0 <mem_link_valid+0x74>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d006      	beq.n	8005eb6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	885b      	ldrh	r3, [r3, #2]
 8005eac:	8afa      	ldrh	r2, [r7, #22]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d001      	beq.n	8005eb6 <mem_link_valid+0x6a>
    return 0;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e000      	b.n	8005eb8 <mem_link_valid+0x6c>
  }
  return 1;
 8005eb6:	2301      	movs	r3, #1
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	20003900 	.word	0x20003900

08005ec4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d04c      	beq.n	8005f6c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f003 0303 	and.w	r3, r3, #3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d007      	beq.n	8005eec <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005edc:	4b25      	ldr	r3, [pc, #148]	; (8005f74 <mem_free+0xb0>)
 8005ede:	f240 2273 	movw	r2, #627	; 0x273
 8005ee2:	4925      	ldr	r1, [pc, #148]	; (8005f78 <mem_free+0xb4>)
 8005ee4:	4825      	ldr	r0, [pc, #148]	; (8005f7c <mem_free+0xb8>)
 8005ee6:	f00a fb01 	bl	80104ec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005eea:	e040      	b.n	8005f6e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3b08      	subs	r3, #8
 8005ef0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005ef2:	4b23      	ldr	r3, [pc, #140]	; (8005f80 <mem_free+0xbc>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d306      	bcc.n	8005f0a <mem_free+0x46>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f103 020c 	add.w	r2, r3, #12
 8005f02:	4b20      	ldr	r3, [pc, #128]	; (8005f84 <mem_free+0xc0>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d907      	bls.n	8005f1a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005f0a:	4b1a      	ldr	r3, [pc, #104]	; (8005f74 <mem_free+0xb0>)
 8005f0c:	f240 227f 	movw	r2, #639	; 0x27f
 8005f10:	491d      	ldr	r1, [pc, #116]	; (8005f88 <mem_free+0xc4>)
 8005f12:	481a      	ldr	r0, [pc, #104]	; (8005f7c <mem_free+0xb8>)
 8005f14:	f00a faea 	bl	80104ec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005f18:	e029      	b.n	8005f6e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	791b      	ldrb	r3, [r3, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d107      	bne.n	8005f32 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005f22:	4b14      	ldr	r3, [pc, #80]	; (8005f74 <mem_free+0xb0>)
 8005f24:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005f28:	4918      	ldr	r1, [pc, #96]	; (8005f8c <mem_free+0xc8>)
 8005f2a:	4814      	ldr	r0, [pc, #80]	; (8005f7c <mem_free+0xb8>)
 8005f2c:	f00a fade 	bl	80104ec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005f30:	e01d      	b.n	8005f6e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f7ff ff8a 	bl	8005e4c <mem_link_valid>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d107      	bne.n	8005f4e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005f3e:	4b0d      	ldr	r3, [pc, #52]	; (8005f74 <mem_free+0xb0>)
 8005f40:	f240 2295 	movw	r2, #661	; 0x295
 8005f44:	4912      	ldr	r1, [pc, #72]	; (8005f90 <mem_free+0xcc>)
 8005f46:	480d      	ldr	r0, [pc, #52]	; (8005f7c <mem_free+0xb8>)
 8005f48:	f00a fad0 	bl	80104ec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005f4c:	e00f      	b.n	8005f6e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005f54:	4b0f      	ldr	r3, [pc, #60]	; (8005f94 <mem_free+0xd0>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d202      	bcs.n	8005f64 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005f5e:	4a0d      	ldr	r2, [pc, #52]	; (8005f94 <mem_free+0xd0>)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f7ff fe93 	bl	8005c90 <plug_holes>
 8005f6a:	e000      	b.n	8005f6e <mem_free+0xaa>
    return;
 8005f6c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	080123dc 	.word	0x080123dc
 8005f78:	080124b0 	.word	0x080124b0
 8005f7c:	08012424 	.word	0x08012424
 8005f80:	200038fc 	.word	0x200038fc
 8005f84:	20003900 	.word	0x20003900
 8005f88:	080124d4 	.word	0x080124d4
 8005f8c:	080124f0 	.word	0x080124f0
 8005f90:	08012518 	.word	0x08012518
 8005f94:	20003904 	.word	0x20003904

08005f98 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b088      	sub	sp, #32
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005fa4:	887b      	ldrh	r3, [r7, #2]
 8005fa6:	3303      	adds	r3, #3
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	f023 0303 	bic.w	r3, r3, #3
 8005fae:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005fb0:	8bfb      	ldrh	r3, [r7, #30]
 8005fb2:	2b0b      	cmp	r3, #11
 8005fb4:	d801      	bhi.n	8005fba <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005fb6:	230c      	movs	r3, #12
 8005fb8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005fba:	8bfb      	ldrh	r3, [r7, #30]
 8005fbc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005fc0:	d803      	bhi.n	8005fca <mem_trim+0x32>
 8005fc2:	8bfa      	ldrh	r2, [r7, #30]
 8005fc4:	887b      	ldrh	r3, [r7, #2]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d201      	bcs.n	8005fce <mem_trim+0x36>
    return NULL;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e0cc      	b.n	8006168 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005fce:	4b68      	ldr	r3, [pc, #416]	; (8006170 <mem_trim+0x1d8>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d304      	bcc.n	8005fe2 <mem_trim+0x4a>
 8005fd8:	4b66      	ldr	r3, [pc, #408]	; (8006174 <mem_trim+0x1dc>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d306      	bcc.n	8005ff0 <mem_trim+0x58>
 8005fe2:	4b65      	ldr	r3, [pc, #404]	; (8006178 <mem_trim+0x1e0>)
 8005fe4:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005fe8:	4964      	ldr	r1, [pc, #400]	; (800617c <mem_trim+0x1e4>)
 8005fea:	4865      	ldr	r0, [pc, #404]	; (8006180 <mem_trim+0x1e8>)
 8005fec:	f00a fa7e 	bl	80104ec <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005ff0:	4b5f      	ldr	r3, [pc, #380]	; (8006170 <mem_trim+0x1d8>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d304      	bcc.n	8006004 <mem_trim+0x6c>
 8005ffa:	4b5e      	ldr	r3, [pc, #376]	; (8006174 <mem_trim+0x1dc>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	429a      	cmp	r2, r3
 8006002:	d301      	bcc.n	8006008 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	e0af      	b.n	8006168 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3b08      	subs	r3, #8
 800600c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800600e:	69b8      	ldr	r0, [r7, #24]
 8006010:	f7ff fe2c 	bl	8005c6c <mem_to_ptr>
 8006014:	4603      	mov	r3, r0
 8006016:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	881a      	ldrh	r2, [r3, #0]
 800601c:	8afb      	ldrh	r3, [r7, #22]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	b29b      	uxth	r3, r3
 8006022:	3b08      	subs	r3, #8
 8006024:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006026:	8bfa      	ldrh	r2, [r7, #30]
 8006028:	8abb      	ldrh	r3, [r7, #20]
 800602a:	429a      	cmp	r2, r3
 800602c:	d906      	bls.n	800603c <mem_trim+0xa4>
 800602e:	4b52      	ldr	r3, [pc, #328]	; (8006178 <mem_trim+0x1e0>)
 8006030:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006034:	4953      	ldr	r1, [pc, #332]	; (8006184 <mem_trim+0x1ec>)
 8006036:	4852      	ldr	r0, [pc, #328]	; (8006180 <mem_trim+0x1e8>)
 8006038:	f00a fa58 	bl	80104ec <iprintf>
  if (newsize > size) {
 800603c:	8bfa      	ldrh	r2, [r7, #30]
 800603e:	8abb      	ldrh	r3, [r7, #20]
 8006040:	429a      	cmp	r2, r3
 8006042:	d901      	bls.n	8006048 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006044:	2300      	movs	r3, #0
 8006046:	e08f      	b.n	8006168 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006048:	8bfa      	ldrh	r2, [r7, #30]
 800604a:	8abb      	ldrh	r3, [r7, #20]
 800604c:	429a      	cmp	r2, r3
 800604e:	d101      	bne.n	8006054 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	e089      	b.n	8006168 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	4618      	mov	r0, r3
 800605a:	f7ff fdf5 	bl	8005c48 <ptr_to_mem>
 800605e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	791b      	ldrb	r3, [r3, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d13f      	bne.n	80060e8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006070:	d106      	bne.n	8006080 <mem_trim+0xe8>
 8006072:	4b41      	ldr	r3, [pc, #260]	; (8006178 <mem_trim+0x1e0>)
 8006074:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006078:	4943      	ldr	r1, [pc, #268]	; (8006188 <mem_trim+0x1f0>)
 800607a:	4841      	ldr	r0, [pc, #260]	; (8006180 <mem_trim+0x1e8>)
 800607c:	f00a fa36 	bl	80104ec <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006086:	8afa      	ldrh	r2, [r7, #22]
 8006088:	8bfb      	ldrh	r3, [r7, #30]
 800608a:	4413      	add	r3, r2
 800608c:	b29b      	uxth	r3, r3
 800608e:	3308      	adds	r3, #8
 8006090:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8006092:	4b3e      	ldr	r3, [pc, #248]	; (800618c <mem_trim+0x1f4>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	429a      	cmp	r2, r3
 800609a:	d106      	bne.n	80060aa <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800609c:	89fb      	ldrh	r3, [r7, #14]
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff fdd2 	bl	8005c48 <ptr_to_mem>
 80060a4:	4603      	mov	r3, r0
 80060a6:	4a39      	ldr	r2, [pc, #228]	; (800618c <mem_trim+0x1f4>)
 80060a8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80060aa:	89fb      	ldrh	r3, [r7, #14]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff fdcb 	bl	8005c48 <ptr_to_mem>
 80060b2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	2200      	movs	r2, #0
 80060b8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	89ba      	ldrh	r2, [r7, #12]
 80060be:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	8afa      	ldrh	r2, [r7, #22]
 80060c4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	89fa      	ldrh	r2, [r7, #14]
 80060ca:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80060d4:	d047      	beq.n	8006166 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff fdb4 	bl	8005c48 <ptr_to_mem>
 80060e0:	4602      	mov	r2, r0
 80060e2:	89fb      	ldrh	r3, [r7, #14]
 80060e4:	8053      	strh	r3, [r2, #2]
 80060e6:	e03e      	b.n	8006166 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80060e8:	8bfb      	ldrh	r3, [r7, #30]
 80060ea:	f103 0214 	add.w	r2, r3, #20
 80060ee:	8abb      	ldrh	r3, [r7, #20]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d838      	bhi.n	8006166 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80060f4:	8afa      	ldrh	r2, [r7, #22]
 80060f6:	8bfb      	ldrh	r3, [r7, #30]
 80060f8:	4413      	add	r3, r2
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	3308      	adds	r3, #8
 80060fe:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006108:	d106      	bne.n	8006118 <mem_trim+0x180>
 800610a:	4b1b      	ldr	r3, [pc, #108]	; (8006178 <mem_trim+0x1e0>)
 800610c:	f240 3216 	movw	r2, #790	; 0x316
 8006110:	491d      	ldr	r1, [pc, #116]	; (8006188 <mem_trim+0x1f0>)
 8006112:	481b      	ldr	r0, [pc, #108]	; (8006180 <mem_trim+0x1e8>)
 8006114:	f00a f9ea 	bl	80104ec <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006118:	89fb      	ldrh	r3, [r7, #14]
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff fd94 	bl	8005c48 <ptr_to_mem>
 8006120:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006122:	4b1a      	ldr	r3, [pc, #104]	; (800618c <mem_trim+0x1f4>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	429a      	cmp	r2, r3
 800612a:	d202      	bcs.n	8006132 <mem_trim+0x19a>
      lfree = mem2;
 800612c:	4a17      	ldr	r2, [pc, #92]	; (800618c <mem_trim+0x1f4>)
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	2200      	movs	r2, #0
 8006136:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	881a      	ldrh	r2, [r3, #0]
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	8afa      	ldrh	r2, [r7, #22]
 8006144:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	89fa      	ldrh	r2, [r7, #14]
 800614a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006154:	d007      	beq.n	8006166 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff fd74 	bl	8005c48 <ptr_to_mem>
 8006160:	4602      	mov	r2, r0
 8006162:	89fb      	ldrh	r3, [r7, #14]
 8006164:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006166:	687b      	ldr	r3, [r7, #4]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3720      	adds	r7, #32
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	200038fc 	.word	0x200038fc
 8006174:	20003900 	.word	0x20003900
 8006178:	080123dc 	.word	0x080123dc
 800617c:	0801254c 	.word	0x0801254c
 8006180:	08012424 	.word	0x08012424
 8006184:	08012564 	.word	0x08012564
 8006188:	08012584 	.word	0x08012584
 800618c:	20003904 	.word	0x20003904

08006190 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af00      	add	r7, sp, #0
 8006196:	4603      	mov	r3, r0
 8006198:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800619a:	88fb      	ldrh	r3, [r7, #6]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <mem_malloc+0x14>
    return NULL;
 80061a0:	2300      	movs	r3, #0
 80061a2:	e0d9      	b.n	8006358 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80061a4:	88fb      	ldrh	r3, [r7, #6]
 80061a6:	3303      	adds	r3, #3
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f023 0303 	bic.w	r3, r3, #3
 80061ae:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80061b0:	8bbb      	ldrh	r3, [r7, #28]
 80061b2:	2b0b      	cmp	r3, #11
 80061b4:	d801      	bhi.n	80061ba <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80061b6:	230c      	movs	r3, #12
 80061b8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80061ba:	8bbb      	ldrh	r3, [r7, #28]
 80061bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80061c0:	d803      	bhi.n	80061ca <mem_malloc+0x3a>
 80061c2:	8bba      	ldrh	r2, [r7, #28]
 80061c4:	88fb      	ldrh	r3, [r7, #6]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d201      	bcs.n	80061ce <mem_malloc+0x3e>
    return NULL;
 80061ca:	2300      	movs	r3, #0
 80061cc:	e0c4      	b.n	8006358 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80061ce:	4b64      	ldr	r3, [pc, #400]	; (8006360 <mem_malloc+0x1d0>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff fd4a 	bl	8005c6c <mem_to_ptr>
 80061d8:	4603      	mov	r3, r0
 80061da:	83fb      	strh	r3, [r7, #30]
 80061dc:	e0b4      	b.n	8006348 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80061de:	8bfb      	ldrh	r3, [r7, #30]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff fd31 	bl	8005c48 <ptr_to_mem>
 80061e6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	791b      	ldrb	r3, [r3, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f040 80a4 	bne.w	800633a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	8bfb      	ldrh	r3, [r7, #30]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	f1a3 0208 	sub.w	r2, r3, #8
 8006200:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006202:	429a      	cmp	r2, r3
 8006204:	f0c0 8099 	bcc.w	800633a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	8bfb      	ldrh	r3, [r7, #30]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	f1a3 0208 	sub.w	r2, r3, #8
 8006216:	8bbb      	ldrh	r3, [r7, #28]
 8006218:	3314      	adds	r3, #20
 800621a:	429a      	cmp	r2, r3
 800621c:	d333      	bcc.n	8006286 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800621e:	8bfa      	ldrh	r2, [r7, #30]
 8006220:	8bbb      	ldrh	r3, [r7, #28]
 8006222:	4413      	add	r3, r2
 8006224:	b29b      	uxth	r3, r3
 8006226:	3308      	adds	r3, #8
 8006228:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800622a:	8a7b      	ldrh	r3, [r7, #18]
 800622c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006230:	d106      	bne.n	8006240 <mem_malloc+0xb0>
 8006232:	4b4c      	ldr	r3, [pc, #304]	; (8006364 <mem_malloc+0x1d4>)
 8006234:	f240 3287 	movw	r2, #903	; 0x387
 8006238:	494b      	ldr	r1, [pc, #300]	; (8006368 <mem_malloc+0x1d8>)
 800623a:	484c      	ldr	r0, [pc, #304]	; (800636c <mem_malloc+0x1dc>)
 800623c:	f00a f956 	bl	80104ec <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006240:	8a7b      	ldrh	r3, [r7, #18]
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff fd00 	bl	8005c48 <ptr_to_mem>
 8006248:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	881a      	ldrh	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8bfa      	ldrh	r2, [r7, #30]
 800625c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	8a7a      	ldrh	r2, [r7, #18]
 8006262:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2201      	movs	r2, #1
 8006268:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	881b      	ldrh	r3, [r3, #0]
 800626e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006272:	d00b      	beq.n	800628c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	4618      	mov	r0, r3
 800627a:	f7ff fce5 	bl	8005c48 <ptr_to_mem>
 800627e:	4602      	mov	r2, r0
 8006280:	8a7b      	ldrh	r3, [r7, #18]
 8006282:	8053      	strh	r3, [r2, #2]
 8006284:	e002      	b.n	800628c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2201      	movs	r2, #1
 800628a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800628c:	4b34      	ldr	r3, [pc, #208]	; (8006360 <mem_malloc+0x1d0>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	429a      	cmp	r2, r3
 8006294:	d127      	bne.n	80062e6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006296:	4b32      	ldr	r3, [pc, #200]	; (8006360 <mem_malloc+0x1d0>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800629c:	e005      	b.n	80062aa <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7ff fcd0 	bl	8005c48 <ptr_to_mem>
 80062a8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	791b      	ldrb	r3, [r3, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d004      	beq.n	80062bc <mem_malloc+0x12c>
 80062b2:	4b2f      	ldr	r3, [pc, #188]	; (8006370 <mem_malloc+0x1e0>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d1f0      	bne.n	800629e <mem_malloc+0x10e>
          }
          lfree = cur;
 80062bc:	4a28      	ldr	r2, [pc, #160]	; (8006360 <mem_malloc+0x1d0>)
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80062c2:	4b27      	ldr	r3, [pc, #156]	; (8006360 <mem_malloc+0x1d0>)
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	4b2a      	ldr	r3, [pc, #168]	; (8006370 <mem_malloc+0x1e0>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d00b      	beq.n	80062e6 <mem_malloc+0x156>
 80062ce:	4b24      	ldr	r3, [pc, #144]	; (8006360 <mem_malloc+0x1d0>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	791b      	ldrb	r3, [r3, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d006      	beq.n	80062e6 <mem_malloc+0x156>
 80062d8:	4b22      	ldr	r3, [pc, #136]	; (8006364 <mem_malloc+0x1d4>)
 80062da:	f240 32b5 	movw	r2, #949	; 0x3b5
 80062de:	4925      	ldr	r1, [pc, #148]	; (8006374 <mem_malloc+0x1e4>)
 80062e0:	4822      	ldr	r0, [pc, #136]	; (800636c <mem_malloc+0x1dc>)
 80062e2:	f00a f903 	bl	80104ec <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80062e6:	8bba      	ldrh	r2, [r7, #28]
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	4413      	add	r3, r2
 80062ec:	3308      	adds	r3, #8
 80062ee:	4a20      	ldr	r2, [pc, #128]	; (8006370 <mem_malloc+0x1e0>)
 80062f0:	6812      	ldr	r2, [r2, #0]
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d906      	bls.n	8006304 <mem_malloc+0x174>
 80062f6:	4b1b      	ldr	r3, [pc, #108]	; (8006364 <mem_malloc+0x1d4>)
 80062f8:	f240 32b9 	movw	r2, #953	; 0x3b9
 80062fc:	491e      	ldr	r1, [pc, #120]	; (8006378 <mem_malloc+0x1e8>)
 80062fe:	481b      	ldr	r0, [pc, #108]	; (800636c <mem_malloc+0x1dc>)
 8006300:	f00a f8f4 	bl	80104ec <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d006      	beq.n	800631c <mem_malloc+0x18c>
 800630e:	4b15      	ldr	r3, [pc, #84]	; (8006364 <mem_malloc+0x1d4>)
 8006310:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006314:	4919      	ldr	r1, [pc, #100]	; (800637c <mem_malloc+0x1ec>)
 8006316:	4815      	ldr	r0, [pc, #84]	; (800636c <mem_malloc+0x1dc>)
 8006318:	f00a f8e8 	bl	80104ec <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f003 0303 	and.w	r3, r3, #3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d006      	beq.n	8006334 <mem_malloc+0x1a4>
 8006326:	4b0f      	ldr	r3, [pc, #60]	; (8006364 <mem_malloc+0x1d4>)
 8006328:	f240 32bd 	movw	r2, #957	; 0x3bd
 800632c:	4914      	ldr	r1, [pc, #80]	; (8006380 <mem_malloc+0x1f0>)
 800632e:	480f      	ldr	r0, [pc, #60]	; (800636c <mem_malloc+0x1dc>)
 8006330:	f00a f8dc 	bl	80104ec <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	3308      	adds	r3, #8
 8006338:	e00e      	b.n	8006358 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800633a:	8bfb      	ldrh	r3, [r7, #30]
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff fc83 	bl	8005c48 <ptr_to_mem>
 8006342:	4603      	mov	r3, r0
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006348:	8bfa      	ldrh	r2, [r7, #30]
 800634a:	8bbb      	ldrh	r3, [r7, #28]
 800634c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006350:	429a      	cmp	r2, r3
 8006352:	f4ff af44 	bcc.w	80061de <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3720      	adds	r7, #32
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	20003904 	.word	0x20003904
 8006364:	080123dc 	.word	0x080123dc
 8006368:	08012584 	.word	0x08012584
 800636c:	08012424 	.word	0x08012424
 8006370:	20003900 	.word	0x20003900
 8006374:	08012598 	.word	0x08012598
 8006378:	080125b4 	.word	0x080125b4
 800637c:	080125e4 	.word	0x080125e4
 8006380:	08012614 	.word	0x08012614

08006384 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	4603      	mov	r3, r0
 800638c:	460a      	mov	r2, r1
 800638e:	80fb      	strh	r3, [r7, #6]
 8006390:	4613      	mov	r3, r2
 8006392:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 8006394:	88fb      	ldrh	r3, [r7, #6]
 8006396:	88ba      	ldrh	r2, [r7, #4]
 8006398:	fb02 f303 	mul.w	r3, r2, r3
 800639c:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	461a      	mov	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d001      	beq.n	80063ae <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e00e      	b.n	80063cc <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff feec 	bl	8006190 <mem_malloc>
 80063b8:	60b8      	str	r0, [r7, #8]
  if (p) {
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d004      	beq.n	80063ca <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	2100      	movs	r1, #0
 80063c4:	68b8      	ldr	r0, [r7, #8]
 80063c6:	f00a f889 	bl	80104dc <memset>
  }
  return p;
 80063ca:	68bb      	ldr	r3, [r7, #8]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	3303      	adds	r3, #3
 80063ea:	f023 0303 	bic.w	r3, r3, #3
 80063ee:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80063f0:	2300      	movs	r3, #0
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	e011      	b.n	800641a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	461a      	mov	r2, r3
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	4413      	add	r3, r2
 8006412:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	3301      	adds	r3, #1
 8006418:	60fb      	str	r3, [r7, #12]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	885b      	ldrh	r3, [r3, #2]
 800641e:	461a      	mov	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4293      	cmp	r3, r2
 8006424:	dbe7      	blt.n	80063f6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006426:	bf00      	nop
 8006428:	bf00      	nop
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800643a:	2300      	movs	r3, #0
 800643c:	80fb      	strh	r3, [r7, #6]
 800643e:	e009      	b.n	8006454 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006440:	88fb      	ldrh	r3, [r7, #6]
 8006442:	4a08      	ldr	r2, [pc, #32]	; (8006464 <memp_init+0x30>)
 8006444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff ffc3 	bl	80063d4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800644e:	88fb      	ldrh	r3, [r7, #6]
 8006450:	3301      	adds	r3, #1
 8006452:	80fb      	strh	r3, [r7, #6]
 8006454:	88fb      	ldrh	r3, [r7, #6]
 8006456:	2b08      	cmp	r3, #8
 8006458:	d9f2      	bls.n	8006440 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800645a:	bf00      	nop
 800645c:	bf00      	nop
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	08014de4 	.word	0x08014de4

08006468 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d012      	beq.n	80064a4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	6812      	ldr	r2, [r2, #0]
 8006486:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f003 0303 	and.w	r3, r3, #3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d006      	beq.n	80064a0 <do_memp_malloc_pool+0x38>
 8006492:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <do_memp_malloc_pool+0x48>)
 8006494:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006498:	4906      	ldr	r1, [pc, #24]	; (80064b4 <do_memp_malloc_pool+0x4c>)
 800649a:	4807      	ldr	r0, [pc, #28]	; (80064b8 <do_memp_malloc_pool+0x50>)
 800649c:	f00a f826 	bl	80104ec <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	e000      	b.n	80064a6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	08012638 	.word	0x08012638
 80064b4:	08012668 	.word	0x08012668
 80064b8:	0801268c 	.word	0x0801268c

080064bc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	4603      	mov	r3, r0
 80064c4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80064c6:	79fb      	ldrb	r3, [r7, #7]
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	d908      	bls.n	80064de <memp_malloc+0x22>
 80064cc:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <memp_malloc+0x3c>)
 80064ce:	f240 1257 	movw	r2, #343	; 0x157
 80064d2:	490a      	ldr	r1, [pc, #40]	; (80064fc <memp_malloc+0x40>)
 80064d4:	480a      	ldr	r0, [pc, #40]	; (8006500 <memp_malloc+0x44>)
 80064d6:	f00a f809 	bl	80104ec <iprintf>
 80064da:	2300      	movs	r3, #0
 80064dc:	e008      	b.n	80064f0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80064de:	79fb      	ldrb	r3, [r7, #7]
 80064e0:	4a08      	ldr	r2, [pc, #32]	; (8006504 <memp_malloc+0x48>)
 80064e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7ff ffbe 	bl	8006468 <do_memp_malloc_pool>
 80064ec:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80064ee:	68fb      	ldr	r3, [r7, #12]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	08012638 	.word	0x08012638
 80064fc:	080126c8 	.word	0x080126c8
 8006500:	0801268c 	.word	0x0801268c
 8006504:	08014de4 	.word	0x08014de4

08006508 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	f003 0303 	and.w	r3, r3, #3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d006      	beq.n	800652a <do_memp_free_pool+0x22>
 800651c:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <do_memp_free_pool+0x40>)
 800651e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006522:	490a      	ldr	r1, [pc, #40]	; (800654c <do_memp_free_pool+0x44>)
 8006524:	480a      	ldr	r0, [pc, #40]	; (8006550 <do_memp_free_pool+0x48>)
 8006526:	f009 ffe1 	bl	80104ec <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006540:	bf00      	nop
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	08012638 	.word	0x08012638
 800654c:	080126e8 	.word	0x080126e8
 8006550:	0801268c 	.word	0x0801268c

08006554 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	4603      	mov	r3, r0
 800655c:	6039      	str	r1, [r7, #0]
 800655e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006560:	79fb      	ldrb	r3, [r7, #7]
 8006562:	2b08      	cmp	r3, #8
 8006564:	d907      	bls.n	8006576 <memp_free+0x22>
 8006566:	4b0c      	ldr	r3, [pc, #48]	; (8006598 <memp_free+0x44>)
 8006568:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800656c:	490b      	ldr	r1, [pc, #44]	; (800659c <memp_free+0x48>)
 800656e:	480c      	ldr	r0, [pc, #48]	; (80065a0 <memp_free+0x4c>)
 8006570:	f009 ffbc 	bl	80104ec <iprintf>
 8006574:	e00c      	b.n	8006590 <memp_free+0x3c>

  if (mem == NULL) {
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d008      	beq.n	800658e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800657c:	79fb      	ldrb	r3, [r7, #7]
 800657e:	4a09      	ldr	r2, [pc, #36]	; (80065a4 <memp_free+0x50>)
 8006580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	4618      	mov	r0, r3
 8006588:	f7ff ffbe 	bl	8006508 <do_memp_free_pool>
 800658c:	e000      	b.n	8006590 <memp_free+0x3c>
    return;
 800658e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	08012638 	.word	0x08012638
 800659c:	08012708 	.word	0x08012708
 80065a0:	0801268c 	.word	0x0801268c
 80065a4:	08014de4 	.word	0x08014de4

080065a8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80065a8:	b480      	push	{r7}
 80065aa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80065ac:	bf00      	nop
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
	...

080065b8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d108      	bne.n	80065de <netif_add+0x26>
 80065cc:	4b57      	ldr	r3, [pc, #348]	; (800672c <netif_add+0x174>)
 80065ce:	f240 1227 	movw	r2, #295	; 0x127
 80065d2:	4957      	ldr	r1, [pc, #348]	; (8006730 <netif_add+0x178>)
 80065d4:	4857      	ldr	r0, [pc, #348]	; (8006734 <netif_add+0x17c>)
 80065d6:	f009 ff89 	bl	80104ec <iprintf>
 80065da:	2300      	movs	r3, #0
 80065dc:	e0a2      	b.n	8006724 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d108      	bne.n	80065f6 <netif_add+0x3e>
 80065e4:	4b51      	ldr	r3, [pc, #324]	; (800672c <netif_add+0x174>)
 80065e6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80065ea:	4953      	ldr	r1, [pc, #332]	; (8006738 <netif_add+0x180>)
 80065ec:	4851      	ldr	r0, [pc, #324]	; (8006734 <netif_add+0x17c>)
 80065ee:	f009 ff7d 	bl	80104ec <iprintf>
 80065f2:	2300      	movs	r3, #0
 80065f4:	e096      	b.n	8006724 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80065fc:	4b4f      	ldr	r3, [pc, #316]	; (800673c <netif_add+0x184>)
 80065fe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006606:	4b4d      	ldr	r3, [pc, #308]	; (800673c <netif_add+0x184>)
 8006608:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006610:	4b4a      	ldr	r3, [pc, #296]	; (800673c <netif_add+0x184>)
 8006612:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4a45      	ldr	r2, [pc, #276]	; (8006740 <netif_add+0x188>)
 800662a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6a3a      	ldr	r2, [r7, #32]
 8006644:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006646:	4b3f      	ldr	r3, [pc, #252]	; (8006744 <netif_add+0x18c>)
 8006648:	781a      	ldrb	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006654:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	68b9      	ldr	r1, [r7, #8]
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 f913 	bl	8006888 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	4798      	blx	r3
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <netif_add+0xba>
    return NULL;
 800666e:	2300      	movs	r3, #0
 8006670:	e058      	b.n	8006724 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006678:	2bff      	cmp	r3, #255	; 0xff
 800667a:	d103      	bne.n	8006684 <netif_add+0xcc>
        netif->num = 0;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006684:	2300      	movs	r3, #0
 8006686:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006688:	4b2f      	ldr	r3, [pc, #188]	; (8006748 <netif_add+0x190>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	617b      	str	r3, [r7, #20]
 800668e:	e02b      	b.n	80066e8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	429a      	cmp	r2, r3
 8006696:	d106      	bne.n	80066a6 <netif_add+0xee>
 8006698:	4b24      	ldr	r3, [pc, #144]	; (800672c <netif_add+0x174>)
 800669a:	f240 128b 	movw	r2, #395	; 0x18b
 800669e:	492b      	ldr	r1, [pc, #172]	; (800674c <netif_add+0x194>)
 80066a0:	4824      	ldr	r0, [pc, #144]	; (8006734 <netif_add+0x17c>)
 80066a2:	f009 ff23 	bl	80104ec <iprintf>
        num_netifs++;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	3301      	adds	r3, #1
 80066aa:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	2bff      	cmp	r3, #255	; 0xff
 80066b0:	dd06      	ble.n	80066c0 <netif_add+0x108>
 80066b2:	4b1e      	ldr	r3, [pc, #120]	; (800672c <netif_add+0x174>)
 80066b4:	f240 128d 	movw	r2, #397	; 0x18d
 80066b8:	4925      	ldr	r1, [pc, #148]	; (8006750 <netif_add+0x198>)
 80066ba:	481e      	ldr	r0, [pc, #120]	; (8006734 <netif_add+0x17c>)
 80066bc:	f009 ff16 	bl	80104ec <iprintf>
        if (netif2->num == netif->num) {
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d108      	bne.n	80066e2 <netif_add+0x12a>
          netif->num++;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80066d6:	3301      	adds	r3, #1
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80066e0:	e005      	b.n	80066ee <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	617b      	str	r3, [r7, #20]
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1d0      	bne.n	8006690 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1be      	bne.n	8006672 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80066fa:	2bfe      	cmp	r3, #254	; 0xfe
 80066fc:	d103      	bne.n	8006706 <netif_add+0x14e>
    netif_num = 0;
 80066fe:	4b11      	ldr	r3, [pc, #68]	; (8006744 <netif_add+0x18c>)
 8006700:	2200      	movs	r2, #0
 8006702:	701a      	strb	r2, [r3, #0]
 8006704:	e006      	b.n	8006714 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800670c:	3301      	adds	r3, #1
 800670e:	b2da      	uxtb	r2, r3
 8006710:	4b0c      	ldr	r3, [pc, #48]	; (8006744 <netif_add+0x18c>)
 8006712:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006714:	4b0c      	ldr	r3, [pc, #48]	; (8006748 <netif_add+0x190>)
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800671c:	4a0a      	ldr	r2, [pc, #40]	; (8006748 <netif_add+0x190>)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006722:	68fb      	ldr	r3, [r7, #12]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	08012724 	.word	0x08012724
 8006730:	080127b8 	.word	0x080127b8
 8006734:	08012774 	.word	0x08012774
 8006738:	080127d4 	.word	0x080127d4
 800673c:	08014e48 	.word	0x08014e48
 8006740:	08006a9b 	.word	0x08006a9b
 8006744:	200067fc 	.word	0x200067fc
 8006748:	200067f4 	.word	0x200067f4
 800674c:	080127f8 	.word	0x080127f8
 8006750:	0801280c 	.word	0x0801280c

08006754 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f002 fdef 	bl	8009344 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f007 fb65 	bl	800de38 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800676e:	bf00      	nop
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d106      	bne.n	8006798 <netif_do_set_ipaddr+0x20>
 800678a:	4b1d      	ldr	r3, [pc, #116]	; (8006800 <netif_do_set_ipaddr+0x88>)
 800678c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006790:	491c      	ldr	r1, [pc, #112]	; (8006804 <netif_do_set_ipaddr+0x8c>)
 8006792:	481d      	ldr	r0, [pc, #116]	; (8006808 <netif_do_set_ipaddr+0x90>)
 8006794:	f009 feaa 	bl	80104ec <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <netif_do_set_ipaddr+0x34>
 800679e:	4b18      	ldr	r3, [pc, #96]	; (8006800 <netif_do_set_ipaddr+0x88>)
 80067a0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80067a4:	4917      	ldr	r1, [pc, #92]	; (8006804 <netif_do_set_ipaddr+0x8c>)
 80067a6:	4818      	ldr	r0, [pc, #96]	; (8006808 <netif_do_set_ipaddr+0x90>)
 80067a8:	f009 fea0 	bl	80104ec <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3304      	adds	r3, #4
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d01c      	beq.n	80067f4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	3304      	adds	r3, #4
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80067ca:	f107 0314 	add.w	r3, r7, #20
 80067ce:	4619      	mov	r1, r3
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f7ff ffbf 	bl	8006754 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <netif_do_set_ipaddr+0x6a>
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	e000      	b.n	80067e4 <netif_do_set_ipaddr+0x6c>
 80067e2:	2300      	movs	r3, #0
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80067e8:	2101      	movs	r1, #1
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 f8d2 	bl	8006994 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80067f0:	2301      	movs	r3, #1
 80067f2:	e000      	b.n	80067f6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	08012724 	.word	0x08012724
 8006804:	0801283c 	.word	0x0801283c
 8006808:	08012774 	.word	0x08012774

0800680c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	3308      	adds	r3, #8
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	429a      	cmp	r2, r3
 8006824:	d00a      	beq.n	800683c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <netif_do_set_netmask+0x26>
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	e000      	b.n	8006834 <netif_do_set_netmask+0x28>
 8006832:	2300      	movs	r3, #0
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006838:	2301      	movs	r3, #1
 800683a:	e000      	b.n	800683e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3714      	adds	r7, #20
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800684a:	b480      	push	{r7}
 800684c:	b085      	sub	sp, #20
 800684e:	af00      	add	r7, sp, #0
 8006850:	60f8      	str	r0, [r7, #12]
 8006852:	60b9      	str	r1, [r7, #8]
 8006854:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	330c      	adds	r3, #12
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	429a      	cmp	r2, r3
 8006862:	d00a      	beq.n	800687a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <netif_do_set_gw+0x26>
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	e000      	b.n	8006872 <netif_do_set_gw+0x28>
 8006870:	2300      	movs	r3, #0
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006876:	2301      	movs	r3, #1
 8006878:	e000      	b.n	800687c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b088      	sub	sp, #32
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
 8006894:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006896:	2300      	movs	r3, #0
 8006898:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800689a:	2300      	movs	r3, #0
 800689c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80068a4:	4b1c      	ldr	r3, [pc, #112]	; (8006918 <netif_set_addr+0x90>)
 80068a6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80068ae:	4b1a      	ldr	r3, [pc, #104]	; (8006918 <netif_set_addr+0x90>)
 80068b0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80068b8:	4b17      	ldr	r3, [pc, #92]	; (8006918 <netif_set_addr+0x90>)
 80068ba:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <netif_set_addr+0x42>
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <netif_set_addr+0x46>
 80068ca:	2301      	movs	r3, #1
 80068cc:	e000      	b.n	80068d0 <netif_set_addr+0x48>
 80068ce:	2300      	movs	r3, #0
 80068d0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d006      	beq.n	80068e6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80068d8:	f107 0310 	add.w	r3, r7, #16
 80068dc:	461a      	mov	r2, r3
 80068de:	68b9      	ldr	r1, [r7, #8]
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f7ff ff49 	bl	8006778 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80068e6:	69fa      	ldr	r2, [r7, #28]
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f7ff ff8e 	bl	800680c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80068f0:	69ba      	ldr	r2, [r7, #24]
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f7ff ffa8 	bl	800684a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d106      	bne.n	800690e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006900:	f107 0310 	add.w	r3, r7, #16
 8006904:	461a      	mov	r2, r3
 8006906:	68b9      	ldr	r1, [r7, #8]
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f7ff ff35 	bl	8006778 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800690e:	bf00      	nop
 8006910:	3720      	adds	r7, #32
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	08014e48 	.word	0x08014e48

0800691c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006924:	4a04      	ldr	r2, [pc, #16]	; (8006938 <netif_set_default+0x1c>)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800692a:	bf00      	nop
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	200067f8 	.word	0x200067f8

0800693c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d107      	bne.n	800695a <netif_set_up+0x1e>
 800694a:	4b0f      	ldr	r3, [pc, #60]	; (8006988 <netif_set_up+0x4c>)
 800694c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8006950:	490e      	ldr	r1, [pc, #56]	; (800698c <netif_set_up+0x50>)
 8006952:	480f      	ldr	r0, [pc, #60]	; (8006990 <netif_set_up+0x54>)
 8006954:	f009 fdca 	bl	80104ec <iprintf>
 8006958:	e013      	b.n	8006982 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10c      	bne.n	8006982 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800696e:	f043 0301 	orr.w	r3, r3, #1
 8006972:	b2da      	uxtb	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800697a:	2103      	movs	r1, #3
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f809 	bl	8006994 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	08012724 	.word	0x08012724
 800698c:	080128ac 	.word	0x080128ac
 8006990:	08012774 	.word	0x08012774

08006994 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	460b      	mov	r3, r1
 800699e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <netif_issue_reports+0x20>
 80069a6:	4b18      	ldr	r3, [pc, #96]	; (8006a08 <netif_issue_reports+0x74>)
 80069a8:	f240 326d 	movw	r2, #877	; 0x36d
 80069ac:	4917      	ldr	r1, [pc, #92]	; (8006a0c <netif_issue_reports+0x78>)
 80069ae:	4818      	ldr	r0, [pc, #96]	; (8006a10 <netif_issue_reports+0x7c>)
 80069b0:	f009 fd9c 	bl	80104ec <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80069ba:	f003 0304 	and.w	r3, r3, #4
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d01e      	beq.n	8006a00 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80069c8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d017      	beq.n	8006a00 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d013      	beq.n	8006a02 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	3304      	adds	r3, #4
 80069de:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00e      	beq.n	8006a02 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d007      	beq.n	8006a02 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	3304      	adds	r3, #4
 80069f6:	4619      	mov	r1, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f008 f987 	bl	800ed0c <etharp_request>
 80069fe:	e000      	b.n	8006a02 <netif_issue_reports+0x6e>
    return;
 8006a00:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	08012724 	.word	0x08012724
 8006a0c:	080128c8 	.word	0x080128c8
 8006a10:	08012774 	.word	0x08012774

08006a14 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d107      	bne.n	8006a32 <netif_set_down+0x1e>
 8006a22:	4b12      	ldr	r3, [pc, #72]	; (8006a6c <netif_set_down+0x58>)
 8006a24:	f240 329b 	movw	r2, #923	; 0x39b
 8006a28:	4911      	ldr	r1, [pc, #68]	; (8006a70 <netif_set_down+0x5c>)
 8006a2a:	4812      	ldr	r0, [pc, #72]	; (8006a74 <netif_set_down+0x60>)
 8006a2c:	f009 fd5e 	bl	80104ec <iprintf>
 8006a30:	e019      	b.n	8006a66 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d012      	beq.n	8006a66 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006a46:	f023 0301 	bic.w	r3, r3, #1
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006a58:	f003 0308 	and.w	r3, r3, #8
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f007 fd11 	bl	800e488 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	08012724 	.word	0x08012724
 8006a70:	080128ec 	.word	0x080128ec
 8006a74:	08012774 	.word	0x08012774

08006a78 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	61da      	str	r2, [r3, #28]
  }
}
 8006a8e:	bf00      	nop
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b085      	sub	sp, #20
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006aa6:	f06f 030b 	mvn.w	r3, #11
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
	...

08006ab8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	4603      	mov	r3, r0
 8006ac0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006ac2:	79fb      	ldrb	r3, [r7, #7]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d013      	beq.n	8006af0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006ac8:	4b0d      	ldr	r3, [pc, #52]	; (8006b00 <netif_get_by_index+0x48>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	60fb      	str	r3, [r7, #12]
 8006ace:	e00c      	b.n	8006aea <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	79fa      	ldrb	r2, [r7, #7]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d101      	bne.n	8006ae4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	e006      	b.n	8006af2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1ef      	bne.n	8006ad0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	200067f4 	.word	0x200067f4

08006b04 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006b0a:	4b0c      	ldr	r3, [pc, #48]	; (8006b3c <pbuf_free_ooseq+0x38>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006b10:	4b0b      	ldr	r3, [pc, #44]	; (8006b40 <pbuf_free_ooseq+0x3c>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	607b      	str	r3, [r7, #4]
 8006b16:	e00a      	b.n	8006b2e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d003      	beq.n	8006b28 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f002 fc4d 	bl	80093c0 <tcp_free_ooseq>
      return;
 8006b26:	e005      	b.n	8006b34 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	607b      	str	r3, [r7, #4]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1f1      	bne.n	8006b18 <pbuf_free_ooseq+0x14>
    }
  }
}
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	200067fd 	.word	0x200067fd
 8006b40:	2000680c 	.word	0x2000680c

08006b44 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006b44:	b480      	push	{r7}
 8006b46:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006b48:	4b03      	ldr	r3, [pc, #12]	; (8006b58 <pbuf_pool_is_empty+0x14>)
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8006b4e:	bf00      	nop
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	200067fd 	.word	0x200067fd

08006b5c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	4611      	mov	r1, r2
 8006b68:	461a      	mov	r2, r3
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	80fb      	strh	r3, [r7, #6]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	88fa      	ldrh	r2, [r7, #6]
 8006b82:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	88ba      	ldrh	r2, [r7, #4]
 8006b88:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8006b8a:	8b3b      	ldrh	r3, [r7, #24]
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	7f3a      	ldrb	r2, [r7, #28]
 8006b96:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	73da      	strb	r2, [r3, #15]
}
 8006ba4:	bf00      	nop
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b08c      	sub	sp, #48	; 0x30
 8006bb4:	af02      	add	r7, sp, #8
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	71fb      	strb	r3, [r7, #7]
 8006bba:	460b      	mov	r3, r1
 8006bbc:	80bb      	strh	r3, [r7, #4]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006bc2:	79fb      	ldrb	r3, [r7, #7]
 8006bc4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006bc6:	887b      	ldrh	r3, [r7, #2]
 8006bc8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006bcc:	d07f      	beq.n	8006cce <pbuf_alloc+0x11e>
 8006bce:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006bd2:	f300 80c8 	bgt.w	8006d66 <pbuf_alloc+0x1b6>
 8006bd6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006bda:	d010      	beq.n	8006bfe <pbuf_alloc+0x4e>
 8006bdc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006be0:	f300 80c1 	bgt.w	8006d66 <pbuf_alloc+0x1b6>
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d002      	beq.n	8006bee <pbuf_alloc+0x3e>
 8006be8:	2b41      	cmp	r3, #65	; 0x41
 8006bea:	f040 80bc 	bne.w	8006d66 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006bee:	887a      	ldrh	r2, [r7, #2]
 8006bf0:	88bb      	ldrh	r3, [r7, #4]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	f000 f8d1 	bl	8006d9c <pbuf_alloc_reference>
 8006bfa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8006bfc:	e0bd      	b.n	8006d7a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8006c02:	2300      	movs	r3, #0
 8006c04:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006c06:	88bb      	ldrh	r3, [r7, #4]
 8006c08:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006c0a:	2008      	movs	r0, #8
 8006c0c:	f7ff fc56 	bl	80064bc <memp_malloc>
 8006c10:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d109      	bne.n	8006c2c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8006c18:	f7ff ff94 	bl	8006b44 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d002      	beq.n	8006c28 <pbuf_alloc+0x78>
            pbuf_free(p);
 8006c22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c24:	f000 faa8 	bl	8007178 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	e0a7      	b.n	8006d7c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006c2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c2e:	3303      	adds	r3, #3
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	f023 0303 	bic.w	r3, r3, #3
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	8b7a      	ldrh	r2, [r7, #26]
 8006c40:	4293      	cmp	r3, r2
 8006c42:	bf28      	it	cs
 8006c44:	4613      	movcs	r3, r2
 8006c46:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006c48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c4a:	3310      	adds	r3, #16
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	4413      	add	r3, r2
 8006c50:	3303      	adds	r3, #3
 8006c52:	f023 0303 	bic.w	r3, r3, #3
 8006c56:	4618      	mov	r0, r3
 8006c58:	89f9      	ldrh	r1, [r7, #14]
 8006c5a:	8b7a      	ldrh	r2, [r7, #26]
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	9301      	str	r3, [sp, #4]
 8006c60:	887b      	ldrh	r3, [r7, #2]
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	460b      	mov	r3, r1
 8006c66:	4601      	mov	r1, r0
 8006c68:	6938      	ldr	r0, [r7, #16]
 8006c6a:	f7ff ff77 	bl	8006b5c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f003 0303 	and.w	r3, r3, #3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d006      	beq.n	8006c88 <pbuf_alloc+0xd8>
 8006c7a:	4b42      	ldr	r3, [pc, #264]	; (8006d84 <pbuf_alloc+0x1d4>)
 8006c7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c80:	4941      	ldr	r1, [pc, #260]	; (8006d88 <pbuf_alloc+0x1d8>)
 8006c82:	4842      	ldr	r0, [pc, #264]	; (8006d8c <pbuf_alloc+0x1dc>)
 8006c84:	f009 fc32 	bl	80104ec <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006c88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c8a:	3303      	adds	r3, #3
 8006c8c:	f023 0303 	bic.w	r3, r3, #3
 8006c90:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006c94:	d106      	bne.n	8006ca4 <pbuf_alloc+0xf4>
 8006c96:	4b3b      	ldr	r3, [pc, #236]	; (8006d84 <pbuf_alloc+0x1d4>)
 8006c98:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006c9c:	493c      	ldr	r1, [pc, #240]	; (8006d90 <pbuf_alloc+0x1e0>)
 8006c9e:	483b      	ldr	r0, [pc, #236]	; (8006d8c <pbuf_alloc+0x1dc>)
 8006ca0:	f009 fc24 	bl	80104ec <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d102      	bne.n	8006cb0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	627b      	str	r3, [r7, #36]	; 0x24
 8006cae:	e002      	b.n	8006cb6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006cba:	8b7a      	ldrh	r2, [r7, #26]
 8006cbc:	89fb      	ldrh	r3, [r7, #14]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006cc6:	8b7b      	ldrh	r3, [r7, #26]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d19e      	bne.n	8006c0a <pbuf_alloc+0x5a>
      break;
 8006ccc:	e055      	b.n	8006d7a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006cce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006cd0:	3303      	adds	r3, #3
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	f023 0303 	bic.w	r3, r3, #3
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	88bb      	ldrh	r3, [r7, #4]
 8006cdc:	3303      	adds	r3, #3
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	f023 0303 	bic.w	r3, r3, #3
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	4413      	add	r3, r2
 8006ce8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006cea:	8b3b      	ldrh	r3, [r7, #24]
 8006cec:	3310      	adds	r3, #16
 8006cee:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006cf0:	8b3a      	ldrh	r2, [r7, #24]
 8006cf2:	88bb      	ldrh	r3, [r7, #4]
 8006cf4:	3303      	adds	r3, #3
 8006cf6:	f023 0303 	bic.w	r3, r3, #3
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d306      	bcc.n	8006d0c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006cfe:	8afa      	ldrh	r2, [r7, #22]
 8006d00:	88bb      	ldrh	r3, [r7, #4]
 8006d02:	3303      	adds	r3, #3
 8006d04:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d201      	bcs.n	8006d10 <pbuf_alloc+0x160>
        return NULL;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	e035      	b.n	8006d7c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006d10:	8afb      	ldrh	r3, [r7, #22]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7ff fa3c 	bl	8006190 <mem_malloc>
 8006d18:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <pbuf_alloc+0x174>
        return NULL;
 8006d20:	2300      	movs	r3, #0
 8006d22:	e02b      	b.n	8006d7c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006d24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d26:	3310      	adds	r3, #16
 8006d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d2a:	4413      	add	r3, r2
 8006d2c:	3303      	adds	r3, #3
 8006d2e:	f023 0303 	bic.w	r3, r3, #3
 8006d32:	4618      	mov	r0, r3
 8006d34:	88b9      	ldrh	r1, [r7, #4]
 8006d36:	88ba      	ldrh	r2, [r7, #4]
 8006d38:	2300      	movs	r3, #0
 8006d3a:	9301      	str	r3, [sp, #4]
 8006d3c:	887b      	ldrh	r3, [r7, #2]
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	460b      	mov	r3, r1
 8006d42:	4601      	mov	r1, r0
 8006d44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d46:	f7ff ff09 	bl	8006b5c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f003 0303 	and.w	r3, r3, #3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d010      	beq.n	8006d78 <pbuf_alloc+0x1c8>
 8006d56:	4b0b      	ldr	r3, [pc, #44]	; (8006d84 <pbuf_alloc+0x1d4>)
 8006d58:	f44f 7291 	mov.w	r2, #290	; 0x122
 8006d5c:	490d      	ldr	r1, [pc, #52]	; (8006d94 <pbuf_alloc+0x1e4>)
 8006d5e:	480b      	ldr	r0, [pc, #44]	; (8006d8c <pbuf_alloc+0x1dc>)
 8006d60:	f009 fbc4 	bl	80104ec <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006d64:	e008      	b.n	8006d78 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006d66:	4b07      	ldr	r3, [pc, #28]	; (8006d84 <pbuf_alloc+0x1d4>)
 8006d68:	f240 1227 	movw	r2, #295	; 0x127
 8006d6c:	490a      	ldr	r1, [pc, #40]	; (8006d98 <pbuf_alloc+0x1e8>)
 8006d6e:	4807      	ldr	r0, [pc, #28]	; (8006d8c <pbuf_alloc+0x1dc>)
 8006d70:	f009 fbbc 	bl	80104ec <iprintf>
      return NULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	e001      	b.n	8006d7c <pbuf_alloc+0x1cc>
      break;
 8006d78:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3728      	adds	r7, #40	; 0x28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	08012954 	.word	0x08012954
 8006d88:	08012984 	.word	0x08012984
 8006d8c:	080129b4 	.word	0x080129b4
 8006d90:	080129dc 	.word	0x080129dc
 8006d94:	08012a10 	.word	0x08012a10
 8006d98:	08012a3c 	.word	0x08012a3c

08006d9c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af02      	add	r7, sp, #8
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	460b      	mov	r3, r1
 8006da6:	807b      	strh	r3, [r7, #2]
 8006da8:	4613      	mov	r3, r2
 8006daa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006dac:	883b      	ldrh	r3, [r7, #0]
 8006dae:	2b41      	cmp	r3, #65	; 0x41
 8006db0:	d009      	beq.n	8006dc6 <pbuf_alloc_reference+0x2a>
 8006db2:	883b      	ldrh	r3, [r7, #0]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d006      	beq.n	8006dc6 <pbuf_alloc_reference+0x2a>
 8006db8:	4b0f      	ldr	r3, [pc, #60]	; (8006df8 <pbuf_alloc_reference+0x5c>)
 8006dba:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006dbe:	490f      	ldr	r1, [pc, #60]	; (8006dfc <pbuf_alloc_reference+0x60>)
 8006dc0:	480f      	ldr	r0, [pc, #60]	; (8006e00 <pbuf_alloc_reference+0x64>)
 8006dc2:	f009 fb93 	bl	80104ec <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006dc6:	2007      	movs	r0, #7
 8006dc8:	f7ff fb78 	bl	80064bc <memp_malloc>
 8006dcc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	e00b      	b.n	8006df0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006dd8:	8879      	ldrh	r1, [r7, #2]
 8006dda:	887a      	ldrh	r2, [r7, #2]
 8006ddc:	2300      	movs	r3, #0
 8006dde:	9301      	str	r3, [sp, #4]
 8006de0:	883b      	ldrh	r3, [r7, #0]
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	460b      	mov	r3, r1
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f7ff feb7 	bl	8006b5c <pbuf_init_alloced_pbuf>
  return p;
 8006dee:	68fb      	ldr	r3, [r7, #12]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	08012954 	.word	0x08012954
 8006dfc:	08012a58 	.word	0x08012a58
 8006e00:	080129b4 	.word	0x080129b4

08006e04 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b088      	sub	sp, #32
 8006e08:	af02      	add	r7, sp, #8
 8006e0a:	607b      	str	r3, [r7, #4]
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	73fb      	strb	r3, [r7, #15]
 8006e10:	460b      	mov	r3, r1
 8006e12:	81bb      	strh	r3, [r7, #12]
 8006e14:	4613      	mov	r3, r2
 8006e16:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
 8006e1a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006e1c:	8a7b      	ldrh	r3, [r7, #18]
 8006e1e:	3303      	adds	r3, #3
 8006e20:	f023 0203 	bic.w	r2, r3, #3
 8006e24:	89bb      	ldrh	r3, [r7, #12]
 8006e26:	441a      	add	r2, r3
 8006e28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d901      	bls.n	8006e32 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e018      	b.n	8006e64 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d007      	beq.n	8006e48 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006e38:	8a7b      	ldrh	r3, [r7, #18]
 8006e3a:	3303      	adds	r3, #3
 8006e3c:	f023 0303 	bic.w	r3, r3, #3
 8006e40:	6a3a      	ldr	r2, [r7, #32]
 8006e42:	4413      	add	r3, r2
 8006e44:	617b      	str	r3, [r7, #20]
 8006e46:	e001      	b.n	8006e4c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	89b9      	ldrh	r1, [r7, #12]
 8006e50:	89ba      	ldrh	r2, [r7, #12]
 8006e52:	2302      	movs	r3, #2
 8006e54:	9301      	str	r3, [sp, #4]
 8006e56:	897b      	ldrh	r3, [r7, #10]
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	6979      	ldr	r1, [r7, #20]
 8006e5e:	f7ff fe7d 	bl	8006b5c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006e62:	687b      	ldr	r3, [r7, #4]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	460b      	mov	r3, r1
 8006e76:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d106      	bne.n	8006e8c <pbuf_realloc+0x20>
 8006e7e:	4b3a      	ldr	r3, [pc, #232]	; (8006f68 <pbuf_realloc+0xfc>)
 8006e80:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006e84:	4939      	ldr	r1, [pc, #228]	; (8006f6c <pbuf_realloc+0x100>)
 8006e86:	483a      	ldr	r0, [pc, #232]	; (8006f70 <pbuf_realloc+0x104>)
 8006e88:	f009 fb30 	bl	80104ec <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	891b      	ldrh	r3, [r3, #8]
 8006e90:	887a      	ldrh	r2, [r7, #2]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d263      	bcs.n	8006f5e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	891a      	ldrh	r2, [r3, #8]
 8006e9a:	887b      	ldrh	r3, [r7, #2]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006ea0:	887b      	ldrh	r3, [r7, #2]
 8006ea2:	817b      	strh	r3, [r7, #10]
  q = p;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006ea8:	e018      	b.n	8006edc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	895b      	ldrh	r3, [r3, #10]
 8006eae:	897a      	ldrh	r2, [r7, #10]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	891a      	ldrh	r2, [r3, #8]
 8006eb8:	893b      	ldrh	r3, [r7, #8]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d106      	bne.n	8006edc <pbuf_realloc+0x70>
 8006ece:	4b26      	ldr	r3, [pc, #152]	; (8006f68 <pbuf_realloc+0xfc>)
 8006ed0:	f240 12af 	movw	r2, #431	; 0x1af
 8006ed4:	4927      	ldr	r1, [pc, #156]	; (8006f74 <pbuf_realloc+0x108>)
 8006ed6:	4826      	ldr	r0, [pc, #152]	; (8006f70 <pbuf_realloc+0x104>)
 8006ed8:	f009 fb08 	bl	80104ec <iprintf>
  while (rem_len > q->len) {
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	895b      	ldrh	r3, [r3, #10]
 8006ee0:	897a      	ldrh	r2, [r7, #10]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d8e1      	bhi.n	8006eaa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	7b1b      	ldrb	r3, [r3, #12]
 8006eea:	f003 030f 	and.w	r3, r3, #15
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d121      	bne.n	8006f36 <pbuf_realloc+0xca>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	895b      	ldrh	r3, [r3, #10]
 8006ef6:	897a      	ldrh	r2, [r7, #10]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d01c      	beq.n	8006f36 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	7b5b      	ldrb	r3, [r3, #13]
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d116      	bne.n	8006f36 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	897b      	ldrh	r3, [r7, #10]
 8006f14:	4413      	add	r3, r2
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	4619      	mov	r1, r3
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f7ff f83c 	bl	8005f98 <mem_trim>
 8006f20:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d106      	bne.n	8006f36 <pbuf_realloc+0xca>
 8006f28:	4b0f      	ldr	r3, [pc, #60]	; (8006f68 <pbuf_realloc+0xfc>)
 8006f2a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006f2e:	4912      	ldr	r1, [pc, #72]	; (8006f78 <pbuf_realloc+0x10c>)
 8006f30:	480f      	ldr	r0, [pc, #60]	; (8006f70 <pbuf_realloc+0x104>)
 8006f32:	f009 fadb 	bl	80104ec <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	897a      	ldrh	r2, [r7, #10]
 8006f3a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	895a      	ldrh	r2, [r3, #10]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d004      	beq.n	8006f56 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 f911 	bl	8007178 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	e000      	b.n	8006f60 <pbuf_realloc+0xf4>
    return;
 8006f5e:	bf00      	nop

}
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	08012954 	.word	0x08012954
 8006f6c:	08012a6c 	.word	0x08012a6c
 8006f70:	080129b4 	.word	0x080129b4
 8006f74:	08012a84 	.word	0x08012a84
 8006f78:	08012a9c 	.word	0x08012a9c

08006f7c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	4613      	mov	r3, r2
 8006f88:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d106      	bne.n	8006f9e <pbuf_add_header_impl+0x22>
 8006f90:	4b2b      	ldr	r3, [pc, #172]	; (8007040 <pbuf_add_header_impl+0xc4>)
 8006f92:	f240 12df 	movw	r2, #479	; 0x1df
 8006f96:	492b      	ldr	r1, [pc, #172]	; (8007044 <pbuf_add_header_impl+0xc8>)
 8006f98:	482b      	ldr	r0, [pc, #172]	; (8007048 <pbuf_add_header_impl+0xcc>)
 8006f9a:	f009 faa7 	bl	80104ec <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d003      	beq.n	8006fac <pbuf_add_header_impl+0x30>
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006faa:	d301      	bcc.n	8006fb0 <pbuf_add_header_impl+0x34>
    return 1;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e043      	b.n	8007038 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <pbuf_add_header_impl+0x3e>
    return 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	e03e      	b.n	8007038 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	891a      	ldrh	r2, [r3, #8]
 8006fc2:	8a7b      	ldrh	r3, [r7, #18]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	8a7a      	ldrh	r2, [r7, #18]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d901      	bls.n	8006fd2 <pbuf_add_header_impl+0x56>
    return 1;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e032      	b.n	8007038 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	7b1b      	ldrb	r3, [r3, #12]
 8006fd6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006fd8:	8a3b      	ldrh	r3, [r7, #16]
 8006fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00c      	beq.n	8006ffc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	685a      	ldr	r2, [r3, #4]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	425b      	negs	r3, r3
 8006fea:	4413      	add	r3, r2
 8006fec:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	3310      	adds	r3, #16
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d20d      	bcs.n	8007014 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e01d      	b.n	8007038 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006ffc:	79fb      	ldrb	r3, [r7, #7]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d006      	beq.n	8007010 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	425b      	negs	r3, r3
 800700a:	4413      	add	r3, r2
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	e001      	b.n	8007014 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007010:	2301      	movs	r3, #1
 8007012:	e011      	b.n	8007038 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	895a      	ldrh	r2, [r3, #10]
 800701e:	8a7b      	ldrh	r3, [r7, #18]
 8007020:	4413      	add	r3, r2
 8007022:	b29a      	uxth	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	891a      	ldrh	r2, [r3, #8]
 800702c:	8a7b      	ldrh	r3, [r7, #18]
 800702e:	4413      	add	r3, r2
 8007030:	b29a      	uxth	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	811a      	strh	r2, [r3, #8]


  return 0;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	08012954 	.word	0x08012954
 8007044:	08012ab8 	.word	0x08012ab8
 8007048:	080129b4 	.word	0x080129b4

0800704c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007056:	2200      	movs	r2, #0
 8007058:	6839      	ldr	r1, [r7, #0]
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7ff ff8e 	bl	8006f7c <pbuf_add_header_impl>
 8007060:	4603      	mov	r3, r0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
	...

0800706c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d106      	bne.n	800708a <pbuf_remove_header+0x1e>
 800707c:	4b20      	ldr	r3, [pc, #128]	; (8007100 <pbuf_remove_header+0x94>)
 800707e:	f240 224b 	movw	r2, #587	; 0x24b
 8007082:	4920      	ldr	r1, [pc, #128]	; (8007104 <pbuf_remove_header+0x98>)
 8007084:	4820      	ldr	r0, [pc, #128]	; (8007108 <pbuf_remove_header+0x9c>)
 8007086:	f009 fa31 	bl	80104ec <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d003      	beq.n	8007098 <pbuf_remove_header+0x2c>
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007096:	d301      	bcc.n	800709c <pbuf_remove_header+0x30>
    return 1;
 8007098:	2301      	movs	r3, #1
 800709a:	e02c      	b.n	80070f6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <pbuf_remove_header+0x3a>
    return 0;
 80070a2:	2300      	movs	r3, #0
 80070a4:	e027      	b.n	80070f6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	895b      	ldrh	r3, [r3, #10]
 80070ae:	89fa      	ldrh	r2, [r7, #14]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d908      	bls.n	80070c6 <pbuf_remove_header+0x5a>
 80070b4:	4b12      	ldr	r3, [pc, #72]	; (8007100 <pbuf_remove_header+0x94>)
 80070b6:	f240 2255 	movw	r2, #597	; 0x255
 80070ba:	4914      	ldr	r1, [pc, #80]	; (800710c <pbuf_remove_header+0xa0>)
 80070bc:	4812      	ldr	r0, [pc, #72]	; (8007108 <pbuf_remove_header+0x9c>)
 80070be:	f009 fa15 	bl	80104ec <iprintf>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e017      	b.n	80070f6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	441a      	add	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	895a      	ldrh	r2, [r3, #10]
 80070dc:	89fb      	ldrh	r3, [r7, #14]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	891a      	ldrh	r2, [r3, #8]
 80070ea:	89fb      	ldrh	r3, [r7, #14]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	08012954 	.word	0x08012954
 8007104:	08012ab8 	.word	0x08012ab8
 8007108:	080129b4 	.word	0x080129b4
 800710c:	08012ac4 	.word	0x08012ac4

08007110 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	807b      	strh	r3, [r7, #2]
 800711c:	4613      	mov	r3, r2
 800711e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007120:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007124:	2b00      	cmp	r3, #0
 8007126:	da08      	bge.n	800713a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007128:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800712c:	425b      	negs	r3, r3
 800712e:	4619      	mov	r1, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7ff ff9b 	bl	800706c <pbuf_remove_header>
 8007136:	4603      	mov	r3, r0
 8007138:	e007      	b.n	800714a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800713a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800713e:	787a      	ldrb	r2, [r7, #1]
 8007140:	4619      	mov	r1, r3
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7ff ff1a 	bl	8006f7c <pbuf_add_header_impl>
 8007148:	4603      	mov	r3, r0
  }
}
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b082      	sub	sp, #8
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	460b      	mov	r3, r1
 800715c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800715e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007162:	2201      	movs	r2, #1
 8007164:	4619      	mov	r1, r3
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7ff ffd2 	bl	8007110 <pbuf_header_impl>
 800716c:	4603      	mov	r3, r0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
	...

08007178 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10b      	bne.n	800719e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d106      	bne.n	800719a <pbuf_free+0x22>
 800718c:	4b38      	ldr	r3, [pc, #224]	; (8007270 <pbuf_free+0xf8>)
 800718e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007192:	4938      	ldr	r1, [pc, #224]	; (8007274 <pbuf_free+0xfc>)
 8007194:	4838      	ldr	r0, [pc, #224]	; (8007278 <pbuf_free+0x100>)
 8007196:	f009 f9a9 	bl	80104ec <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800719a:	2300      	movs	r3, #0
 800719c:	e063      	b.n	8007266 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800719e:	2300      	movs	r3, #0
 80071a0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80071a2:	e05c      	b.n	800725e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	7b9b      	ldrb	r3, [r3, #14]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d106      	bne.n	80071ba <pbuf_free+0x42>
 80071ac:	4b30      	ldr	r3, [pc, #192]	; (8007270 <pbuf_free+0xf8>)
 80071ae:	f240 22f1 	movw	r2, #753	; 0x2f1
 80071b2:	4932      	ldr	r1, [pc, #200]	; (800727c <pbuf_free+0x104>)
 80071b4:	4830      	ldr	r0, [pc, #192]	; (8007278 <pbuf_free+0x100>)
 80071b6:	f009 f999 	bl	80104ec <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	7b9b      	ldrb	r3, [r3, #14]
 80071be:	3b01      	subs	r3, #1
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	739a      	strb	r2, [r3, #14]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	7b9b      	ldrb	r3, [r3, #14]
 80071ca:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80071cc:	7dbb      	ldrb	r3, [r7, #22]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d143      	bne.n	800725a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	7b1b      	ldrb	r3, [r3, #12]
 80071dc:	f003 030f 	and.w	r3, r3, #15
 80071e0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	7b5b      	ldrb	r3, [r3, #13]
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d011      	beq.n	8007212 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d106      	bne.n	8007208 <pbuf_free+0x90>
 80071fa:	4b1d      	ldr	r3, [pc, #116]	; (8007270 <pbuf_free+0xf8>)
 80071fc:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007200:	491f      	ldr	r1, [pc, #124]	; (8007280 <pbuf_free+0x108>)
 8007202:	481d      	ldr	r0, [pc, #116]	; (8007278 <pbuf_free+0x100>)
 8007204:	f009 f972 	bl	80104ec <iprintf>
        pc->custom_free_function(p);
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	4798      	blx	r3
 8007210:	e01d      	b.n	800724e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007212:	7bfb      	ldrb	r3, [r7, #15]
 8007214:	2b02      	cmp	r3, #2
 8007216:	d104      	bne.n	8007222 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007218:	6879      	ldr	r1, [r7, #4]
 800721a:	2008      	movs	r0, #8
 800721c:	f7ff f99a 	bl	8006554 <memp_free>
 8007220:	e015      	b.n	800724e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007222:	7bfb      	ldrb	r3, [r7, #15]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d104      	bne.n	8007232 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	2007      	movs	r0, #7
 800722c:	f7ff f992 	bl	8006554 <memp_free>
 8007230:	e00d      	b.n	800724e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007232:	7bfb      	ldrb	r3, [r7, #15]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d103      	bne.n	8007240 <pbuf_free+0xc8>
          mem_free(p);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7fe fe43 	bl	8005ec4 <mem_free>
 800723e:	e006      	b.n	800724e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007240:	4b0b      	ldr	r3, [pc, #44]	; (8007270 <pbuf_free+0xf8>)
 8007242:	f240 320f 	movw	r2, #783	; 0x30f
 8007246:	490f      	ldr	r1, [pc, #60]	; (8007284 <pbuf_free+0x10c>)
 8007248:	480b      	ldr	r0, [pc, #44]	; (8007278 <pbuf_free+0x100>)
 800724a:	f009 f94f 	bl	80104ec <iprintf>
        }
      }
      count++;
 800724e:	7dfb      	ldrb	r3, [r7, #23]
 8007250:	3301      	adds	r3, #1
 8007252:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	607b      	str	r3, [r7, #4]
 8007258:	e001      	b.n	800725e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800725a:	2300      	movs	r3, #0
 800725c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d19f      	bne.n	80071a4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007264:	7dfb      	ldrb	r3, [r7, #23]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	08012954 	.word	0x08012954
 8007274:	08012ab8 	.word	0x08012ab8
 8007278:	080129b4 	.word	0x080129b4
 800727c:	08012ae4 	.word	0x08012ae4
 8007280:	08012afc 	.word	0x08012afc
 8007284:	08012b20 	.word	0x08012b20

08007288 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007290:	2300      	movs	r3, #0
 8007292:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007294:	e005      	b.n	80072a2 <pbuf_clen+0x1a>
    ++len;
 8007296:	89fb      	ldrh	r3, [r7, #14]
 8007298:	3301      	adds	r3, #1
 800729a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1f6      	bne.n	8007296 <pbuf_clen+0xe>
  }
  return len;
 80072a8:	89fb      	ldrh	r3, [r7, #14]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
	...

080072b8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d010      	beq.n	80072e8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	7b9b      	ldrb	r3, [r3, #14]
 80072ca:	3301      	adds	r3, #1
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	7b9b      	ldrb	r3, [r3, #14]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d106      	bne.n	80072e8 <pbuf_ref+0x30>
 80072da:	4b05      	ldr	r3, [pc, #20]	; (80072f0 <pbuf_ref+0x38>)
 80072dc:	f240 3242 	movw	r2, #834	; 0x342
 80072e0:	4904      	ldr	r1, [pc, #16]	; (80072f4 <pbuf_ref+0x3c>)
 80072e2:	4805      	ldr	r0, [pc, #20]	; (80072f8 <pbuf_ref+0x40>)
 80072e4:	f009 f902 	bl	80104ec <iprintf>
  }
}
 80072e8:	bf00      	nop
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	08012954 	.word	0x08012954
 80072f4:	08012b34 	.word	0x08012b34
 80072f8:	080129b4 	.word	0x080129b4

080072fc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d002      	beq.n	8007312 <pbuf_cat+0x16>
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d107      	bne.n	8007322 <pbuf_cat+0x26>
 8007312:	4b20      	ldr	r3, [pc, #128]	; (8007394 <pbuf_cat+0x98>)
 8007314:	f240 3259 	movw	r2, #857	; 0x359
 8007318:	491f      	ldr	r1, [pc, #124]	; (8007398 <pbuf_cat+0x9c>)
 800731a:	4820      	ldr	r0, [pc, #128]	; (800739c <pbuf_cat+0xa0>)
 800731c:	f009 f8e6 	bl	80104ec <iprintf>
 8007320:	e034      	b.n	800738c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	60fb      	str	r3, [r7, #12]
 8007326:	e00a      	b.n	800733e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	891a      	ldrh	r2, [r3, #8]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	891b      	ldrh	r3, [r3, #8]
 8007330:	4413      	add	r3, r2
 8007332:	b29a      	uxth	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	60fb      	str	r3, [r7, #12]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1f0      	bne.n	8007328 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	891a      	ldrh	r2, [r3, #8]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	895b      	ldrh	r3, [r3, #10]
 800734e:	429a      	cmp	r2, r3
 8007350:	d006      	beq.n	8007360 <pbuf_cat+0x64>
 8007352:	4b10      	ldr	r3, [pc, #64]	; (8007394 <pbuf_cat+0x98>)
 8007354:	f240 3262 	movw	r2, #866	; 0x362
 8007358:	4911      	ldr	r1, [pc, #68]	; (80073a0 <pbuf_cat+0xa4>)
 800735a:	4810      	ldr	r0, [pc, #64]	; (800739c <pbuf_cat+0xa0>)
 800735c:	f009 f8c6 	bl	80104ec <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d006      	beq.n	8007376 <pbuf_cat+0x7a>
 8007368:	4b0a      	ldr	r3, [pc, #40]	; (8007394 <pbuf_cat+0x98>)
 800736a:	f240 3263 	movw	r2, #867	; 0x363
 800736e:	490d      	ldr	r1, [pc, #52]	; (80073a4 <pbuf_cat+0xa8>)
 8007370:	480a      	ldr	r0, [pc, #40]	; (800739c <pbuf_cat+0xa0>)
 8007372:	f009 f8bb 	bl	80104ec <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	891a      	ldrh	r2, [r3, #8]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	891b      	ldrh	r3, [r3, #8]
 800737e:	4413      	add	r3, r2
 8007380:	b29a      	uxth	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	08012954 	.word	0x08012954
 8007398:	08012b48 	.word	0x08012b48
 800739c:	080129b4 	.word	0x080129b4
 80073a0:	08012b80 	.word	0x08012b80
 80073a4:	08012bb0 	.word	0x08012bb0

080073a8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80073b2:	2300      	movs	r3, #0
 80073b4:	617b      	str	r3, [r7, #20]
 80073b6:	2300      	movs	r3, #0
 80073b8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d008      	beq.n	80073d2 <pbuf_copy+0x2a>
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d005      	beq.n	80073d2 <pbuf_copy+0x2a>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	891a      	ldrh	r2, [r3, #8]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	891b      	ldrh	r3, [r3, #8]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d209      	bcs.n	80073e6 <pbuf_copy+0x3e>
 80073d2:	4b57      	ldr	r3, [pc, #348]	; (8007530 <pbuf_copy+0x188>)
 80073d4:	f240 32c9 	movw	r2, #969	; 0x3c9
 80073d8:	4956      	ldr	r1, [pc, #344]	; (8007534 <pbuf_copy+0x18c>)
 80073da:	4857      	ldr	r0, [pc, #348]	; (8007538 <pbuf_copy+0x190>)
 80073dc:	f009 f886 	bl	80104ec <iprintf>
 80073e0:	f06f 030f 	mvn.w	r3, #15
 80073e4:	e09f      	b.n	8007526 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	895b      	ldrh	r3, [r3, #10]
 80073ea:	461a      	mov	r2, r3
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	1ad2      	subs	r2, r2, r3
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	895b      	ldrh	r3, [r3, #10]
 80073f4:	4619      	mov	r1, r3
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	1acb      	subs	r3, r1, r3
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d306      	bcc.n	800740c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	895b      	ldrh	r3, [r3, #10]
 8007402:	461a      	mov	r2, r3
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	60fb      	str	r3, [r7, #12]
 800740a:	e005      	b.n	8007418 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	895b      	ldrh	r3, [r3, #10]
 8007410:	461a      	mov	r2, r3
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	18d0      	adds	r0, r2, r3
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	4413      	add	r3, r2
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4619      	mov	r1, r3
 800742c:	f009 f82e 	bl	801048c <memcpy>
    offset_to += len;
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	4413      	add	r3, r2
 8007436:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	4413      	add	r3, r2
 800743e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	895b      	ldrh	r3, [r3, #10]
 8007444:	461a      	mov	r2, r3
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	4293      	cmp	r3, r2
 800744a:	d906      	bls.n	800745a <pbuf_copy+0xb2>
 800744c:	4b38      	ldr	r3, [pc, #224]	; (8007530 <pbuf_copy+0x188>)
 800744e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007452:	493a      	ldr	r1, [pc, #232]	; (800753c <pbuf_copy+0x194>)
 8007454:	4838      	ldr	r0, [pc, #224]	; (8007538 <pbuf_copy+0x190>)
 8007456:	f009 f849 	bl	80104ec <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	895b      	ldrh	r3, [r3, #10]
 800745e:	461a      	mov	r2, r3
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	4293      	cmp	r3, r2
 8007464:	d906      	bls.n	8007474 <pbuf_copy+0xcc>
 8007466:	4b32      	ldr	r3, [pc, #200]	; (8007530 <pbuf_copy+0x188>)
 8007468:	f240 32da 	movw	r2, #986	; 0x3da
 800746c:	4934      	ldr	r1, [pc, #208]	; (8007540 <pbuf_copy+0x198>)
 800746e:	4832      	ldr	r0, [pc, #200]	; (8007538 <pbuf_copy+0x190>)
 8007470:	f009 f83c 	bl	80104ec <iprintf>
    if (offset_from >= p_from->len) {
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	895b      	ldrh	r3, [r3, #10]
 8007478:	461a      	mov	r2, r3
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	4293      	cmp	r3, r2
 800747e:	d304      	bcc.n	800748a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	895b      	ldrh	r3, [r3, #10]
 800748e:	461a      	mov	r2, r3
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	4293      	cmp	r3, r2
 8007494:	d114      	bne.n	80074c0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007496:	2300      	movs	r3, #0
 8007498:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10c      	bne.n	80074c0 <pbuf_copy+0x118>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d009      	beq.n	80074c0 <pbuf_copy+0x118>
 80074ac:	4b20      	ldr	r3, [pc, #128]	; (8007530 <pbuf_copy+0x188>)
 80074ae:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80074b2:	4924      	ldr	r1, [pc, #144]	; (8007544 <pbuf_copy+0x19c>)
 80074b4:	4820      	ldr	r0, [pc, #128]	; (8007538 <pbuf_copy+0x190>)
 80074b6:	f009 f819 	bl	80104ec <iprintf>
 80074ba:	f06f 030f 	mvn.w	r3, #15
 80074be:	e032      	b.n	8007526 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d013      	beq.n	80074ee <pbuf_copy+0x146>
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	895a      	ldrh	r2, [r3, #10]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	891b      	ldrh	r3, [r3, #8]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d10d      	bne.n	80074ee <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d009      	beq.n	80074ee <pbuf_copy+0x146>
 80074da:	4b15      	ldr	r3, [pc, #84]	; (8007530 <pbuf_copy+0x188>)
 80074dc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80074e0:	4919      	ldr	r1, [pc, #100]	; (8007548 <pbuf_copy+0x1a0>)
 80074e2:	4815      	ldr	r0, [pc, #84]	; (8007538 <pbuf_copy+0x190>)
 80074e4:	f009 f802 	bl	80104ec <iprintf>
 80074e8:	f06f 0305 	mvn.w	r3, #5
 80074ec:	e01b      	b.n	8007526 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d013      	beq.n	800751c <pbuf_copy+0x174>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	895a      	ldrh	r2, [r3, #10]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	891b      	ldrh	r3, [r3, #8]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d10d      	bne.n	800751c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d009      	beq.n	800751c <pbuf_copy+0x174>
 8007508:	4b09      	ldr	r3, [pc, #36]	; (8007530 <pbuf_copy+0x188>)
 800750a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800750e:	490e      	ldr	r1, [pc, #56]	; (8007548 <pbuf_copy+0x1a0>)
 8007510:	4809      	ldr	r0, [pc, #36]	; (8007538 <pbuf_copy+0x190>)
 8007512:	f008 ffeb 	bl	80104ec <iprintf>
 8007516:	f06f 0305 	mvn.w	r3, #5
 800751a:	e004      	b.n	8007526 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	f47f af61 	bne.w	80073e6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3718      	adds	r7, #24
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	08012954 	.word	0x08012954
 8007534:	08012bfc 	.word	0x08012bfc
 8007538:	080129b4 	.word	0x080129b4
 800753c:	08012c2c 	.word	0x08012c2c
 8007540:	08012c44 	.word	0x08012c44
 8007544:	08012c60 	.word	0x08012c60
 8007548:	08012c70 	.word	0x08012c70

0800754c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b088      	sub	sp, #32
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	4611      	mov	r1, r2
 8007558:	461a      	mov	r2, r3
 800755a:	460b      	mov	r3, r1
 800755c:	80fb      	strh	r3, [r7, #6]
 800755e:	4613      	mov	r3, r2
 8007560:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007562:	2300      	movs	r3, #0
 8007564:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007566:	2300      	movs	r3, #0
 8007568:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d108      	bne.n	8007582 <pbuf_copy_partial+0x36>
 8007570:	4b2b      	ldr	r3, [pc, #172]	; (8007620 <pbuf_copy_partial+0xd4>)
 8007572:	f240 420a 	movw	r2, #1034	; 0x40a
 8007576:	492b      	ldr	r1, [pc, #172]	; (8007624 <pbuf_copy_partial+0xd8>)
 8007578:	482b      	ldr	r0, [pc, #172]	; (8007628 <pbuf_copy_partial+0xdc>)
 800757a:	f008 ffb7 	bl	80104ec <iprintf>
 800757e:	2300      	movs	r3, #0
 8007580:	e04a      	b.n	8007618 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d108      	bne.n	800759a <pbuf_copy_partial+0x4e>
 8007588:	4b25      	ldr	r3, [pc, #148]	; (8007620 <pbuf_copy_partial+0xd4>)
 800758a:	f240 420b 	movw	r2, #1035	; 0x40b
 800758e:	4927      	ldr	r1, [pc, #156]	; (800762c <pbuf_copy_partial+0xe0>)
 8007590:	4825      	ldr	r0, [pc, #148]	; (8007628 <pbuf_copy_partial+0xdc>)
 8007592:	f008 ffab 	bl	80104ec <iprintf>
 8007596:	2300      	movs	r3, #0
 8007598:	e03e      	b.n	8007618 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	61fb      	str	r3, [r7, #28]
 800759e:	e034      	b.n	800760a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80075a0:	88bb      	ldrh	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00a      	beq.n	80075bc <pbuf_copy_partial+0x70>
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	895b      	ldrh	r3, [r3, #10]
 80075aa:	88ba      	ldrh	r2, [r7, #4]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d305      	bcc.n	80075bc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	895b      	ldrh	r3, [r3, #10]
 80075b4:	88ba      	ldrh	r2, [r7, #4]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	80bb      	strh	r3, [r7, #4]
 80075ba:	e023      	b.n	8007604 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	895a      	ldrh	r2, [r3, #10]
 80075c0:	88bb      	ldrh	r3, [r7, #4]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80075c6:	8b3a      	ldrh	r2, [r7, #24]
 80075c8:	88fb      	ldrh	r3, [r7, #6]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d901      	bls.n	80075d2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80075ce:	88fb      	ldrh	r3, [r7, #6]
 80075d0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80075d2:	8b7b      	ldrh	r3, [r7, #26]
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	18d0      	adds	r0, r2, r3
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	88bb      	ldrh	r3, [r7, #4]
 80075de:	4413      	add	r3, r2
 80075e0:	8b3a      	ldrh	r2, [r7, #24]
 80075e2:	4619      	mov	r1, r3
 80075e4:	f008 ff52 	bl	801048c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80075e8:	8afa      	ldrh	r2, [r7, #22]
 80075ea:	8b3b      	ldrh	r3, [r7, #24]
 80075ec:	4413      	add	r3, r2
 80075ee:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80075f0:	8b7a      	ldrh	r2, [r7, #26]
 80075f2:	8b3b      	ldrh	r3, [r7, #24]
 80075f4:	4413      	add	r3, r2
 80075f6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80075f8:	88fa      	ldrh	r2, [r7, #6]
 80075fa:	8b3b      	ldrh	r3, [r7, #24]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007600:	2300      	movs	r3, #0
 8007602:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	61fb      	str	r3, [r7, #28]
 800760a:	88fb      	ldrh	r3, [r7, #6]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d002      	beq.n	8007616 <pbuf_copy_partial+0xca>
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1c4      	bne.n	80075a0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007616:	8afb      	ldrh	r3, [r7, #22]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3720      	adds	r7, #32
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	08012954 	.word	0x08012954
 8007624:	08012c9c 	.word	0x08012c9c
 8007628:	080129b4 	.word	0x080129b4
 800762c:	08012cbc 	.word	0x08012cbc

08007630 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8007630:	b480      	push	{r7}
 8007632:	b087      	sub	sp, #28
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	460b      	mov	r3, r1
 800763a:	607a      	str	r2, [r7, #4]
 800763c:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800763e:	897b      	ldrh	r3, [r7, #10]
 8007640:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8007646:	e007      	b.n	8007658 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	895b      	ldrh	r3, [r3, #10]
 800764c:	8afa      	ldrh	r2, [r7, #22]
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d004      	beq.n	8007668 <pbuf_skip_const+0x38>
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	895b      	ldrh	r3, [r3, #10]
 8007662:	8afa      	ldrh	r2, [r7, #22]
 8007664:	429a      	cmp	r2, r3
 8007666:	d2ef      	bcs.n	8007648 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d002      	beq.n	8007674 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	8afa      	ldrh	r2, [r7, #22]
 8007672:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8007674:	693b      	ldr	r3, [r7, #16]
}
 8007676:	4618      	mov	r0, r3
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
	...

08007684 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	4603      	mov	r3, r0
 800768c:	603a      	str	r2, [r7, #0]
 800768e:	71fb      	strb	r3, [r7, #7]
 8007690:	460b      	mov	r3, r1
 8007692:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	8919      	ldrh	r1, [r3, #8]
 8007698:	88ba      	ldrh	r2, [r7, #4]
 800769a:	79fb      	ldrb	r3, [r7, #7]
 800769c:	4618      	mov	r0, r3
 800769e:	f7ff fa87 	bl	8006bb0 <pbuf_alloc>
 80076a2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <pbuf_clone+0x2a>
    return NULL;
 80076aa:	2300      	movs	r3, #0
 80076ac:	e011      	b.n	80076d2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f7ff fe79 	bl	80073a8 <pbuf_copy>
 80076b6:	4603      	mov	r3, r0
 80076b8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80076ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d006      	beq.n	80076d0 <pbuf_clone+0x4c>
 80076c2:	4b06      	ldr	r3, [pc, #24]	; (80076dc <pbuf_clone+0x58>)
 80076c4:	f240 5224 	movw	r2, #1316	; 0x524
 80076c8:	4905      	ldr	r1, [pc, #20]	; (80076e0 <pbuf_clone+0x5c>)
 80076ca:	4806      	ldr	r0, [pc, #24]	; (80076e4 <pbuf_clone+0x60>)
 80076cc:	f008 ff0e 	bl	80104ec <iprintf>
  return q;
 80076d0:	68fb      	ldr	r3, [r7, #12]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	08012954 	.word	0x08012954
 80076e0:	08012dc8 	.word	0x08012dc8
 80076e4:	080129b4 	.word	0x080129b4

080076e8 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 80076f4:	887b      	ldrh	r3, [r7, #2]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f80c 	bl	8007716 <pbuf_try_get_at>
 80076fe:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2b00      	cmp	r3, #0
 8007704:	db02      	blt.n	800770c <pbuf_get_at+0x24>
    return (u8_t)ret;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	b2db      	uxtb	r3, r3
 800770a:	e000      	b.n	800770e <pbuf_get_at+0x26>
  }
  return 0;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	460b      	mov	r3, r1
 8007720:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8007722:	f107 020a 	add.w	r2, r7, #10
 8007726:	887b      	ldrh	r3, [r7, #2]
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7ff ff80 	bl	8007630 <pbuf_skip_const>
 8007730:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00a      	beq.n	800774e <pbuf_try_get_at+0x38>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	895a      	ldrh	r2, [r3, #10]
 800773c:	897b      	ldrh	r3, [r7, #10]
 800773e:	429a      	cmp	r2, r3
 8007740:	d905      	bls.n	800774e <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	897a      	ldrh	r2, [r7, #10]
 8007748:	4413      	add	r3, r2
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	e001      	b.n	8007752 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800774e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
	...

0800775c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007760:	f008 ff52 	bl	8010608 <rand>
 8007764:	4603      	mov	r3, r0
 8007766:	b29b      	uxth	r3, r3
 8007768:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800776c:	b29b      	uxth	r3, r3
 800776e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007772:	b29a      	uxth	r2, r3
 8007774:	4b01      	ldr	r3, [pc, #4]	; (800777c <tcp_init+0x20>)
 8007776:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007778:	bf00      	nop
 800777a:	bd80      	pop	{r7, pc}
 800777c:	2000000a 	.word	0x2000000a

08007780 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	7d1b      	ldrb	r3, [r3, #20]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d105      	bne.n	800779c <tcp_free+0x1c>
 8007790:	4b06      	ldr	r3, [pc, #24]	; (80077ac <tcp_free+0x2c>)
 8007792:	22d4      	movs	r2, #212	; 0xd4
 8007794:	4906      	ldr	r1, [pc, #24]	; (80077b0 <tcp_free+0x30>)
 8007796:	4807      	ldr	r0, [pc, #28]	; (80077b4 <tcp_free+0x34>)
 8007798:	f008 fea8 	bl	80104ec <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800779c:	6879      	ldr	r1, [r7, #4]
 800779e:	2001      	movs	r0, #1
 80077a0:	f7fe fed8 	bl	8006554 <memp_free>
}
 80077a4:	bf00      	nop
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	08012e54 	.word	0x08012e54
 80077b0:	08012e84 	.word	0x08012e84
 80077b4:	08012e98 	.word	0x08012e98

080077b8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	7d1b      	ldrb	r3, [r3, #20]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d105      	bne.n	80077d4 <tcp_free_listen+0x1c>
 80077c8:	4b06      	ldr	r3, [pc, #24]	; (80077e4 <tcp_free_listen+0x2c>)
 80077ca:	22df      	movs	r2, #223	; 0xdf
 80077cc:	4906      	ldr	r1, [pc, #24]	; (80077e8 <tcp_free_listen+0x30>)
 80077ce:	4807      	ldr	r0, [pc, #28]	; (80077ec <tcp_free_listen+0x34>)
 80077d0:	f008 fe8c 	bl	80104ec <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80077d4:	6879      	ldr	r1, [r7, #4]
 80077d6:	2002      	movs	r0, #2
 80077d8:	f7fe febc 	bl	8006554 <memp_free>
}
 80077dc:	bf00      	nop
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	08012e54 	.word	0x08012e54
 80077e8:	08012ec0 	.word	0x08012ec0
 80077ec:	08012e98 	.word	0x08012e98

080077f0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80077f4:	f001 f898 	bl	8008928 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80077f8:	4b07      	ldr	r3, [pc, #28]	; (8007818 <tcp_tmr+0x28>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	3301      	adds	r3, #1
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	4b05      	ldr	r3, [pc, #20]	; (8007818 <tcp_tmr+0x28>)
 8007802:	701a      	strb	r2, [r3, #0]
 8007804:	4b04      	ldr	r3, [pc, #16]	; (8007818 <tcp_tmr+0x28>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b00      	cmp	r3, #0
 800780e:	d001      	beq.n	8007814 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007810:	f000 fd4a 	bl	80082a8 <tcp_slowtmr>
  }
}
 8007814:	bf00      	nop
 8007816:	bd80      	pop	{r7, pc}
 8007818:	20006815 	.word	0x20006815

0800781c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d105      	bne.n	8007838 <tcp_remove_listener+0x1c>
 800782c:	4b0d      	ldr	r3, [pc, #52]	; (8007864 <tcp_remove_listener+0x48>)
 800782e:	22ff      	movs	r2, #255	; 0xff
 8007830:	490d      	ldr	r1, [pc, #52]	; (8007868 <tcp_remove_listener+0x4c>)
 8007832:	480e      	ldr	r0, [pc, #56]	; (800786c <tcp_remove_listener+0x50>)
 8007834:	f008 fe5a 	bl	80104ec <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	e00a      	b.n	8007854 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	429a      	cmp	r2, r3
 8007846:	d102      	bne.n	800784e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	60fb      	str	r3, [r7, #12]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1f1      	bne.n	800783e <tcp_remove_listener+0x22>
    }
  }
}
 800785a:	bf00      	nop
 800785c:	bf00      	nop
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	08012e54 	.word	0x08012e54
 8007868:	08012edc 	.word	0x08012edc
 800786c:	08012e98 	.word	0x08012e98

08007870 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d106      	bne.n	800788c <tcp_listen_closed+0x1c>
 800787e:	4b14      	ldr	r3, [pc, #80]	; (80078d0 <tcp_listen_closed+0x60>)
 8007880:	f240 1211 	movw	r2, #273	; 0x111
 8007884:	4913      	ldr	r1, [pc, #76]	; (80078d4 <tcp_listen_closed+0x64>)
 8007886:	4814      	ldr	r0, [pc, #80]	; (80078d8 <tcp_listen_closed+0x68>)
 8007888:	f008 fe30 	bl	80104ec <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	7d1b      	ldrb	r3, [r3, #20]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d006      	beq.n	80078a2 <tcp_listen_closed+0x32>
 8007894:	4b0e      	ldr	r3, [pc, #56]	; (80078d0 <tcp_listen_closed+0x60>)
 8007896:	f44f 7289 	mov.w	r2, #274	; 0x112
 800789a:	4910      	ldr	r1, [pc, #64]	; (80078dc <tcp_listen_closed+0x6c>)
 800789c:	480e      	ldr	r0, [pc, #56]	; (80078d8 <tcp_listen_closed+0x68>)
 800789e:	f008 fe25 	bl	80104ec <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80078a2:	2301      	movs	r3, #1
 80078a4:	60fb      	str	r3, [r7, #12]
 80078a6:	e00b      	b.n	80078c0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80078a8:	4a0d      	ldr	r2, [pc, #52]	; (80078e0 <tcp_listen_closed+0x70>)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6879      	ldr	r1, [r7, #4]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7ff ffb1 	bl	800781c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	3301      	adds	r3, #1
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d9f0      	bls.n	80078a8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80078c6:	bf00      	nop
 80078c8:	bf00      	nop
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	08012e54 	.word	0x08012e54
 80078d4:	08012f04 	.word	0x08012f04
 80078d8:	08012e98 	.word	0x08012e98
 80078dc:	08012f10 	.word	0x08012f10
 80078e0:	08014e20 	.word	0x08014e20

080078e4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80078e4:	b5b0      	push	{r4, r5, r7, lr}
 80078e6:	b088      	sub	sp, #32
 80078e8:	af04      	add	r7, sp, #16
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	460b      	mov	r3, r1
 80078ee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d106      	bne.n	8007904 <tcp_close_shutdown+0x20>
 80078f6:	4b63      	ldr	r3, [pc, #396]	; (8007a84 <tcp_close_shutdown+0x1a0>)
 80078f8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80078fc:	4962      	ldr	r1, [pc, #392]	; (8007a88 <tcp_close_shutdown+0x1a4>)
 80078fe:	4863      	ldr	r0, [pc, #396]	; (8007a8c <tcp_close_shutdown+0x1a8>)
 8007900:	f008 fdf4 	bl	80104ec <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007904:	78fb      	ldrb	r3, [r7, #3]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d066      	beq.n	80079d8 <tcp_close_shutdown+0xf4>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	7d1b      	ldrb	r3, [r3, #20]
 800790e:	2b04      	cmp	r3, #4
 8007910:	d003      	beq.n	800791a <tcp_close_shutdown+0x36>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	7d1b      	ldrb	r3, [r3, #20]
 8007916:	2b07      	cmp	r3, #7
 8007918:	d15e      	bne.n	80079d8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800791e:	2b00      	cmp	r3, #0
 8007920:	d104      	bne.n	800792c <tcp_close_shutdown+0x48>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007926:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800792a:	d055      	beq.n	80079d8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	8b5b      	ldrh	r3, [r3, #26]
 8007930:	f003 0310 	and.w	r3, r3, #16
 8007934:	2b00      	cmp	r3, #0
 8007936:	d106      	bne.n	8007946 <tcp_close_shutdown+0x62>
 8007938:	4b52      	ldr	r3, [pc, #328]	; (8007a84 <tcp_close_shutdown+0x1a0>)
 800793a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800793e:	4954      	ldr	r1, [pc, #336]	; (8007a90 <tcp_close_shutdown+0x1ac>)
 8007940:	4852      	ldr	r0, [pc, #328]	; (8007a8c <tcp_close_shutdown+0x1a8>)
 8007942:	f008 fdd3 	bl	80104ec <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800794e:	687d      	ldr	r5, [r7, #4]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3304      	adds	r3, #4
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	8ad2      	ldrh	r2, [r2, #22]
 8007958:	6879      	ldr	r1, [r7, #4]
 800795a:	8b09      	ldrh	r1, [r1, #24]
 800795c:	9102      	str	r1, [sp, #8]
 800795e:	9201      	str	r2, [sp, #4]
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	462b      	mov	r3, r5
 8007964:	4622      	mov	r2, r4
 8007966:	4601      	mov	r1, r0
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f005 fd95 	bl	800d498 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f001 fb72 	bl	8009058 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007974:	4b47      	ldr	r3, [pc, #284]	; (8007a94 <tcp_close_shutdown+0x1b0>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	429a      	cmp	r2, r3
 800797c:	d105      	bne.n	800798a <tcp_close_shutdown+0xa6>
 800797e:	4b45      	ldr	r3, [pc, #276]	; (8007a94 <tcp_close_shutdown+0x1b0>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	4a43      	ldr	r2, [pc, #268]	; (8007a94 <tcp_close_shutdown+0x1b0>)
 8007986:	6013      	str	r3, [r2, #0]
 8007988:	e013      	b.n	80079b2 <tcp_close_shutdown+0xce>
 800798a:	4b42      	ldr	r3, [pc, #264]	; (8007a94 <tcp_close_shutdown+0x1b0>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	e00c      	b.n	80079ac <tcp_close_shutdown+0xc8>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	429a      	cmp	r2, r3
 800799a:	d104      	bne.n	80079a6 <tcp_close_shutdown+0xc2>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68da      	ldr	r2, [r3, #12]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	60da      	str	r2, [r3, #12]
 80079a4:	e005      	b.n	80079b2 <tcp_close_shutdown+0xce>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1ef      	bne.n	8007992 <tcp_close_shutdown+0xae>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	60da      	str	r2, [r3, #12]
 80079b8:	4b37      	ldr	r3, [pc, #220]	; (8007a98 <tcp_close_shutdown+0x1b4>)
 80079ba:	2201      	movs	r2, #1
 80079bc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80079be:	4b37      	ldr	r3, [pc, #220]	; (8007a9c <tcp_close_shutdown+0x1b8>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d102      	bne.n	80079ce <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80079c8:	f004 f80a 	bl	800b9e0 <tcp_trigger_input_pcb_close>
 80079cc:	e002      	b.n	80079d4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7ff fed6 	bl	8007780 <tcp_free>
      }
      return ERR_OK;
 80079d4:	2300      	movs	r3, #0
 80079d6:	e050      	b.n	8007a7a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	7d1b      	ldrb	r3, [r3, #20]
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d03b      	beq.n	8007a58 <tcp_close_shutdown+0x174>
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	dc44      	bgt.n	8007a6e <tcp_close_shutdown+0x18a>
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d002      	beq.n	80079ee <tcp_close_shutdown+0x10a>
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d02a      	beq.n	8007a42 <tcp_close_shutdown+0x15e>
 80079ec:	e03f      	b.n	8007a6e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	8adb      	ldrh	r3, [r3, #22]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d021      	beq.n	8007a3a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80079f6:	4b2a      	ldr	r3, [pc, #168]	; (8007aa0 <tcp_close_shutdown+0x1bc>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d105      	bne.n	8007a0c <tcp_close_shutdown+0x128>
 8007a00:	4b27      	ldr	r3, [pc, #156]	; (8007aa0 <tcp_close_shutdown+0x1bc>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	4a26      	ldr	r2, [pc, #152]	; (8007aa0 <tcp_close_shutdown+0x1bc>)
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	e013      	b.n	8007a34 <tcp_close_shutdown+0x150>
 8007a0c:	4b24      	ldr	r3, [pc, #144]	; (8007aa0 <tcp_close_shutdown+0x1bc>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	60bb      	str	r3, [r7, #8]
 8007a12:	e00c      	b.n	8007a2e <tcp_close_shutdown+0x14a>
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d104      	bne.n	8007a28 <tcp_close_shutdown+0x144>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68da      	ldr	r2, [r3, #12]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	60da      	str	r2, [r3, #12]
 8007a26:	e005      	b.n	8007a34 <tcp_close_shutdown+0x150>
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	60bb      	str	r3, [r7, #8]
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1ef      	bne.n	8007a14 <tcp_close_shutdown+0x130>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7ff fea0 	bl	8007780 <tcp_free>
      break;
 8007a40:	e01a      	b.n	8007a78 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7ff ff14 	bl	8007870 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007a48:	6879      	ldr	r1, [r7, #4]
 8007a4a:	4816      	ldr	r0, [pc, #88]	; (8007aa4 <tcp_close_shutdown+0x1c0>)
 8007a4c:	f001 fb54 	bl	80090f8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7ff feb1 	bl	80077b8 <tcp_free_listen>
      break;
 8007a56:	e00f      	b.n	8007a78 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007a58:	6879      	ldr	r1, [r7, #4]
 8007a5a:	480e      	ldr	r0, [pc, #56]	; (8007a94 <tcp_close_shutdown+0x1b0>)
 8007a5c:	f001 fb4c 	bl	80090f8 <tcp_pcb_remove>
 8007a60:	4b0d      	ldr	r3, [pc, #52]	; (8007a98 <tcp_close_shutdown+0x1b4>)
 8007a62:	2201      	movs	r2, #1
 8007a64:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff fe8a 	bl	8007780 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007a6c:	e004      	b.n	8007a78 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f81a 	bl	8007aa8 <tcp_close_shutdown_fin>
 8007a74:	4603      	mov	r3, r0
 8007a76:	e000      	b.n	8007a7a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bdb0      	pop	{r4, r5, r7, pc}
 8007a82:	bf00      	nop
 8007a84:	08012e54 	.word	0x08012e54
 8007a88:	08012f28 	.word	0x08012f28
 8007a8c:	08012e98 	.word	0x08012e98
 8007a90:	08012f48 	.word	0x08012f48
 8007a94:	2000680c 	.word	0x2000680c
 8007a98:	20006814 	.word	0x20006814
 8007a9c:	2000684c 	.word	0x2000684c
 8007aa0:	20006804 	.word	0x20006804
 8007aa4:	20006808 	.word	0x20006808

08007aa8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d106      	bne.n	8007ac4 <tcp_close_shutdown_fin+0x1c>
 8007ab6:	4b2e      	ldr	r3, [pc, #184]	; (8007b70 <tcp_close_shutdown_fin+0xc8>)
 8007ab8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007abc:	492d      	ldr	r1, [pc, #180]	; (8007b74 <tcp_close_shutdown_fin+0xcc>)
 8007abe:	482e      	ldr	r0, [pc, #184]	; (8007b78 <tcp_close_shutdown_fin+0xd0>)
 8007ac0:	f008 fd14 	bl	80104ec <iprintf>

  switch (pcb->state) {
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	7d1b      	ldrb	r3, [r3, #20]
 8007ac8:	2b07      	cmp	r3, #7
 8007aca:	d020      	beq.n	8007b0e <tcp_close_shutdown_fin+0x66>
 8007acc:	2b07      	cmp	r3, #7
 8007ace:	dc2b      	bgt.n	8007b28 <tcp_close_shutdown_fin+0x80>
 8007ad0:	2b03      	cmp	r3, #3
 8007ad2:	d002      	beq.n	8007ada <tcp_close_shutdown_fin+0x32>
 8007ad4:	2b04      	cmp	r3, #4
 8007ad6:	d00d      	beq.n	8007af4 <tcp_close_shutdown_fin+0x4c>
 8007ad8:	e026      	b.n	8007b28 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f004 fdea 	bl	800c6b4 <tcp_send_fin>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d11f      	bne.n	8007b2c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2205      	movs	r2, #5
 8007af0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007af2:	e01b      	b.n	8007b2c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f004 fddd 	bl	800c6b4 <tcp_send_fin>
 8007afa:	4603      	mov	r3, r0
 8007afc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d114      	bne.n	8007b30 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2205      	movs	r2, #5
 8007b0a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007b0c:	e010      	b.n	8007b30 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f004 fdd0 	bl	800c6b4 <tcp_send_fin>
 8007b14:	4603      	mov	r3, r0
 8007b16:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d109      	bne.n	8007b34 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2209      	movs	r2, #9
 8007b24:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007b26:	e005      	b.n	8007b34 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	e01c      	b.n	8007b66 <tcp_close_shutdown_fin+0xbe>
      break;
 8007b2c:	bf00      	nop
 8007b2e:	e002      	b.n	8007b36 <tcp_close_shutdown_fin+0x8e>
      break;
 8007b30:	bf00      	nop
 8007b32:	e000      	b.n	8007b36 <tcp_close_shutdown_fin+0x8e>
      break;
 8007b34:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d103      	bne.n	8007b46 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f004 fef6 	bl	800c930 <tcp_output>
 8007b44:	e00d      	b.n	8007b62 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8007b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4e:	d108      	bne.n	8007b62 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	8b5b      	ldrh	r3, [r3, #26]
 8007b54:	f043 0308 	orr.w	r3, r3, #8
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e001      	b.n	8007b66 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8007b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	08012e54 	.word	0x08012e54
 8007b74:	08012f04 	.word	0x08012f04
 8007b78:	08012e98 	.word	0x08012e98

08007b7c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d109      	bne.n	8007b9e <tcp_close+0x22>
 8007b8a:	4b0f      	ldr	r3, [pc, #60]	; (8007bc8 <tcp_close+0x4c>)
 8007b8c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007b90:	490e      	ldr	r1, [pc, #56]	; (8007bcc <tcp_close+0x50>)
 8007b92:	480f      	ldr	r0, [pc, #60]	; (8007bd0 <tcp_close+0x54>)
 8007b94:	f008 fcaa 	bl	80104ec <iprintf>
 8007b98:	f06f 030f 	mvn.w	r3, #15
 8007b9c:	e00f      	b.n	8007bbe <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	7d1b      	ldrb	r3, [r3, #20]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d006      	beq.n	8007bb4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	8b5b      	ldrh	r3, [r3, #26]
 8007baa:	f043 0310 	orr.w	r3, r3, #16
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7ff fe94 	bl	80078e4 <tcp_close_shutdown>
 8007bbc:	4603      	mov	r3, r0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	08012e54 	.word	0x08012e54
 8007bcc:	08012f64 	.word	0x08012f64
 8007bd0:	08012e98 	.word	0x08012e98

08007bd4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b08e      	sub	sp, #56	; 0x38
 8007bd8:	af04      	add	r7, sp, #16
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d107      	bne.n	8007bf4 <tcp_abandon+0x20>
 8007be4:	4b52      	ldr	r3, [pc, #328]	; (8007d30 <tcp_abandon+0x15c>)
 8007be6:	f240 223d 	movw	r2, #573	; 0x23d
 8007bea:	4952      	ldr	r1, [pc, #328]	; (8007d34 <tcp_abandon+0x160>)
 8007bec:	4852      	ldr	r0, [pc, #328]	; (8007d38 <tcp_abandon+0x164>)
 8007bee:	f008 fc7d 	bl	80104ec <iprintf>
 8007bf2:	e099      	b.n	8007d28 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	7d1b      	ldrb	r3, [r3, #20]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d106      	bne.n	8007c0a <tcp_abandon+0x36>
 8007bfc:	4b4c      	ldr	r3, [pc, #304]	; (8007d30 <tcp_abandon+0x15c>)
 8007bfe:	f44f 7210 	mov.w	r2, #576	; 0x240
 8007c02:	494e      	ldr	r1, [pc, #312]	; (8007d3c <tcp_abandon+0x168>)
 8007c04:	484c      	ldr	r0, [pc, #304]	; (8007d38 <tcp_abandon+0x164>)
 8007c06:	f008 fc71 	bl	80104ec <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	7d1b      	ldrb	r3, [r3, #20]
 8007c0e:	2b0a      	cmp	r3, #10
 8007c10:	d107      	bne.n	8007c22 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007c12:	6879      	ldr	r1, [r7, #4]
 8007c14:	484a      	ldr	r0, [pc, #296]	; (8007d40 <tcp_abandon+0x16c>)
 8007c16:	f001 fa6f 	bl	80090f8 <tcp_pcb_remove>
    tcp_free(pcb);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7ff fdb0 	bl	8007780 <tcp_free>
 8007c20:	e082      	b.n	8007d28 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8007c22:	2300      	movs	r3, #0
 8007c24:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8007c26:	2300      	movs	r3, #0
 8007c28:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c2e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	7d1b      	ldrb	r3, [r3, #20]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d126      	bne.n	8007c9a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	8adb      	ldrh	r3, [r3, #22]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d02e      	beq.n	8007cb2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007c54:	4b3b      	ldr	r3, [pc, #236]	; (8007d44 <tcp_abandon+0x170>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d105      	bne.n	8007c6a <tcp_abandon+0x96>
 8007c5e:	4b39      	ldr	r3, [pc, #228]	; (8007d44 <tcp_abandon+0x170>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	4a37      	ldr	r2, [pc, #220]	; (8007d44 <tcp_abandon+0x170>)
 8007c66:	6013      	str	r3, [r2, #0]
 8007c68:	e013      	b.n	8007c92 <tcp_abandon+0xbe>
 8007c6a:	4b36      	ldr	r3, [pc, #216]	; (8007d44 <tcp_abandon+0x170>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	61fb      	str	r3, [r7, #28]
 8007c70:	e00c      	b.n	8007c8c <tcp_abandon+0xb8>
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d104      	bne.n	8007c86 <tcp_abandon+0xb2>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68da      	ldr	r2, [r3, #12]
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	60da      	str	r2, [r3, #12]
 8007c84:	e005      	b.n	8007c92 <tcp_abandon+0xbe>
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	61fb      	str	r3, [r7, #28]
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1ef      	bne.n	8007c72 <tcp_abandon+0x9e>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	60da      	str	r2, [r3, #12]
 8007c98:	e00b      	b.n	8007cb2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	8adb      	ldrh	r3, [r3, #22]
 8007ca2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	4828      	ldr	r0, [pc, #160]	; (8007d48 <tcp_abandon+0x174>)
 8007ca8:	f001 fa26 	bl	80090f8 <tcp_pcb_remove>
 8007cac:	4b27      	ldr	r3, [pc, #156]	; (8007d4c <tcp_abandon+0x178>)
 8007cae:	2201      	movs	r2, #1
 8007cb0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d004      	beq.n	8007cc4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 ff12 	bl	8008ae8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d004      	beq.n	8007cd6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f000 ff09 	bl	8008ae8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d004      	beq.n	8007ce8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 ff00 	bl	8008ae8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00e      	beq.n	8007d0c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	8b12      	ldrh	r2, [r2, #24]
 8007cf8:	9202      	str	r2, [sp, #8]
 8007cfa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007cfc:	9201      	str	r2, [sp, #4]
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	460b      	mov	r3, r1
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	69b9      	ldr	r1, [r7, #24]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f005 fbc6 	bl	800d498 <tcp_rst>
    }
    last_state = pcb->state;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	7d1b      	ldrb	r3, [r3, #20]
 8007d10:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f7ff fd34 	bl	8007780 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d004      	beq.n	8007d28 <tcp_abandon+0x154>
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f06f 010c 	mvn.w	r1, #12
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	4798      	blx	r3
  }
}
 8007d28:	3728      	adds	r7, #40	; 0x28
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	08012e54 	.word	0x08012e54
 8007d34:	08012f98 	.word	0x08012f98
 8007d38:	08012e98 	.word	0x08012e98
 8007d3c:	08012fb4 	.word	0x08012fb4
 8007d40:	20006810 	.word	0x20006810
 8007d44:	20006804 	.word	0x20006804
 8007d48:	2000680c 	.word	0x2000680c
 8007d4c:	20006814 	.word	0x20006814

08007d50 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007d58:	2101      	movs	r1, #1
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7ff ff3a 	bl	8007bd4 <tcp_abandon>
}
 8007d60:	bf00      	nop
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b088      	sub	sp, #32
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	4613      	mov	r3, r2
 8007d74:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8007d76:	2304      	movs	r3, #4
 8007d78:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8007d80:	4b3e      	ldr	r3, [pc, #248]	; (8007e7c <tcp_bind+0x114>)
 8007d82:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d109      	bne.n	8007d9e <tcp_bind+0x36>
 8007d8a:	4b3d      	ldr	r3, [pc, #244]	; (8007e80 <tcp_bind+0x118>)
 8007d8c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8007d90:	493c      	ldr	r1, [pc, #240]	; (8007e84 <tcp_bind+0x11c>)
 8007d92:	483d      	ldr	r0, [pc, #244]	; (8007e88 <tcp_bind+0x120>)
 8007d94:	f008 fbaa 	bl	80104ec <iprintf>
 8007d98:	f06f 030f 	mvn.w	r3, #15
 8007d9c:	e06a      	b.n	8007e74 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	7d1b      	ldrb	r3, [r3, #20]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d009      	beq.n	8007dba <tcp_bind+0x52>
 8007da6:	4b36      	ldr	r3, [pc, #216]	; (8007e80 <tcp_bind+0x118>)
 8007da8:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007dac:	4937      	ldr	r1, [pc, #220]	; (8007e8c <tcp_bind+0x124>)
 8007dae:	4836      	ldr	r0, [pc, #216]	; (8007e88 <tcp_bind+0x120>)
 8007db0:	f008 fb9c 	bl	80104ec <iprintf>
 8007db4:	f06f 0305 	mvn.w	r3, #5
 8007db8:	e05c      	b.n	8007e74 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8007dba:	88fb      	ldrh	r3, [r7, #6]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d109      	bne.n	8007dd4 <tcp_bind+0x6c>
    port = tcp_new_port();
 8007dc0:	f000 f914 	bl	8007fec <tcp_new_port>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8007dc8:	88fb      	ldrh	r3, [r7, #6]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d135      	bne.n	8007e3a <tcp_bind+0xd2>
      return ERR_BUF;
 8007dce:	f06f 0301 	mvn.w	r3, #1
 8007dd2:	e04f      	b.n	8007e74 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	61fb      	str	r3, [r7, #28]
 8007dd8:	e02b      	b.n	8007e32 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007dda:	4a2d      	ldr	r2, [pc, #180]	; (8007e90 <tcp_bind+0x128>)
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	61bb      	str	r3, [r7, #24]
 8007de6:	e01e      	b.n	8007e26 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	8adb      	ldrh	r3, [r3, #22]
 8007dec:	88fa      	ldrh	r2, [r7, #6]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d116      	bne.n	8007e20 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8007df2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d010      	beq.n	8007e1a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00c      	beq.n	8007e1a <tcp_bind+0xb2>
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d009      	beq.n	8007e1a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d005      	beq.n	8007e1a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d102      	bne.n	8007e20 <tcp_bind+0xb8>
              return ERR_USE;
 8007e1a:	f06f 0307 	mvn.w	r3, #7
 8007e1e:	e029      	b.n	8007e74 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	61bb      	str	r3, [r7, #24]
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1dd      	bne.n	8007de8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	61fb      	str	r3, [r7, #28]
 8007e32:	69fa      	ldr	r2, [r7, #28]
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	dbcf      	blt.n	8007dda <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00c      	beq.n	8007e5a <tcp_bind+0xf2>
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d008      	beq.n	8007e5a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <tcp_bind+0xec>
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	e000      	b.n	8007e56 <tcp_bind+0xee>
 8007e54:	2300      	movs	r3, #0
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	88fa      	ldrh	r2, [r7, #6]
 8007e5e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007e60:	4b0c      	ldr	r3, [pc, #48]	; (8007e94 <tcp_bind+0x12c>)
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	60da      	str	r2, [r3, #12]
 8007e68:	4a0a      	ldr	r2, [pc, #40]	; (8007e94 <tcp_bind+0x12c>)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6013      	str	r3, [r2, #0]
 8007e6e:	f005 fcd5 	bl	800d81c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3720      	adds	r7, #32
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	08014e48 	.word	0x08014e48
 8007e80:	08012e54 	.word	0x08012e54
 8007e84:	08012fe8 	.word	0x08012fe8
 8007e88:	08012e98 	.word	0x08012e98
 8007e8c:	08013000 	.word	0x08013000
 8007e90:	08014e20 	.word	0x08014e20
 8007e94:	20006804 	.word	0x20006804

08007e98 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d106      	bne.n	8007eb4 <tcp_update_rcv_ann_wnd+0x1c>
 8007ea6:	4b25      	ldr	r3, [pc, #148]	; (8007f3c <tcp_update_rcv_ann_wnd+0xa4>)
 8007ea8:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007eac:	4924      	ldr	r1, [pc, #144]	; (8007f40 <tcp_update_rcv_ann_wnd+0xa8>)
 8007eae:	4825      	ldr	r0, [pc, #148]	; (8007f44 <tcp_update_rcv_ann_wnd+0xac>)
 8007eb0:	f008 fb1c 	bl	80104ec <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007ebc:	4413      	add	r3, r2
 8007ebe:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007ec8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007ecc:	bf28      	it	cs
 8007ece:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007ed2:	b292      	uxth	r2, r2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	db08      	blt.n	8007ef0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	e020      	b.n	8007f32 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	dd03      	ble.n	8007f06 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f04:	e014      	b.n	8007f30 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f18:	d306      	bcc.n	8007f28 <tcp_update_rcv_ann_wnd+0x90>
 8007f1a:	4b08      	ldr	r3, [pc, #32]	; (8007f3c <tcp_update_rcv_ann_wnd+0xa4>)
 8007f1c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007f20:	4909      	ldr	r1, [pc, #36]	; (8007f48 <tcp_update_rcv_ann_wnd+0xb0>)
 8007f22:	4808      	ldr	r0, [pc, #32]	; (8007f44 <tcp_update_rcv_ann_wnd+0xac>)
 8007f24:	f008 fae2 	bl	80104ec <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007f30:	2300      	movs	r3, #0
  }
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	08012e54 	.word	0x08012e54
 8007f40:	080130b0 	.word	0x080130b0
 8007f44:	08012e98 	.word	0x08012e98
 8007f48:	080130d4 	.word	0x080130d4

08007f4c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	460b      	mov	r3, r1
 8007f56:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d107      	bne.n	8007f6e <tcp_recved+0x22>
 8007f5e:	4b1f      	ldr	r3, [pc, #124]	; (8007fdc <tcp_recved+0x90>)
 8007f60:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007f64:	491e      	ldr	r1, [pc, #120]	; (8007fe0 <tcp_recved+0x94>)
 8007f66:	481f      	ldr	r0, [pc, #124]	; (8007fe4 <tcp_recved+0x98>)
 8007f68:	f008 fac0 	bl	80104ec <iprintf>
 8007f6c:	e032      	b.n	8007fd4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	7d1b      	ldrb	r3, [r3, #20]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d106      	bne.n	8007f84 <tcp_recved+0x38>
 8007f76:	4b19      	ldr	r3, [pc, #100]	; (8007fdc <tcp_recved+0x90>)
 8007f78:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007f7c:	491a      	ldr	r1, [pc, #104]	; (8007fe8 <tcp_recved+0x9c>)
 8007f7e:	4819      	ldr	r0, [pc, #100]	; (8007fe4 <tcp_recved+0x98>)
 8007f80:	f008 fab4 	bl	80104ec <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007f88:	887b      	ldrh	r3, [r7, #2]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007f8e:	89fb      	ldrh	r3, [r7, #14]
 8007f90:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007f94:	d804      	bhi.n	8007fa0 <tcp_recved+0x54>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f9a:	89fa      	ldrh	r2, [r7, #14]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d204      	bcs.n	8007faa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007fa6:	851a      	strh	r2, [r3, #40]	; 0x28
 8007fa8:	e002      	b.n	8007fb0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	89fa      	ldrh	r2, [r7, #14]
 8007fae:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f7ff ff71 	bl	8007e98 <tcp_update_rcv_ann_wnd>
 8007fb6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007fbe:	d309      	bcc.n	8007fd4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	8b5b      	ldrh	r3, [r3, #26]
 8007fc4:	f043 0302 	orr.w	r3, r3, #2
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f004 fcae 	bl	800c930 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	08012e54 	.word	0x08012e54
 8007fe0:	080130f0 	.word	0x080130f0
 8007fe4:	08012e98 	.word	0x08012e98
 8007fe8:	08013108 	.word	0x08013108

08007fec <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8007ff6:	4b1e      	ldr	r3, [pc, #120]	; (8008070 <tcp_new_port+0x84>)
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	4b1c      	ldr	r3, [pc, #112]	; (8008070 <tcp_new_port+0x84>)
 8008000:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8008002:	4b1b      	ldr	r3, [pc, #108]	; (8008070 <tcp_new_port+0x84>)
 8008004:	881b      	ldrh	r3, [r3, #0]
 8008006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800800a:	4293      	cmp	r3, r2
 800800c:	d103      	bne.n	8008016 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800800e:	4b18      	ldr	r3, [pc, #96]	; (8008070 <tcp_new_port+0x84>)
 8008010:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008014:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008016:	2300      	movs	r3, #0
 8008018:	71fb      	strb	r3, [r7, #7]
 800801a:	e01e      	b.n	800805a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800801c:	79fb      	ldrb	r3, [r7, #7]
 800801e:	4a15      	ldr	r2, [pc, #84]	; (8008074 <tcp_new_port+0x88>)
 8008020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	603b      	str	r3, [r7, #0]
 8008028:	e011      	b.n	800804e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	8ada      	ldrh	r2, [r3, #22]
 800802e:	4b10      	ldr	r3, [pc, #64]	; (8008070 <tcp_new_port+0x84>)
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	429a      	cmp	r2, r3
 8008034:	d108      	bne.n	8008048 <tcp_new_port+0x5c>
        n++;
 8008036:	88bb      	ldrh	r3, [r7, #4]
 8008038:	3301      	adds	r3, #1
 800803a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800803c:	88bb      	ldrh	r3, [r7, #4]
 800803e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008042:	d3d8      	bcc.n	8007ff6 <tcp_new_port+0xa>
          return 0;
 8008044:	2300      	movs	r3, #0
 8008046:	e00d      	b.n	8008064 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	603b      	str	r3, [r7, #0]
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1ea      	bne.n	800802a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008054:	79fb      	ldrb	r3, [r7, #7]
 8008056:	3301      	adds	r3, #1
 8008058:	71fb      	strb	r3, [r7, #7]
 800805a:	79fb      	ldrb	r3, [r7, #7]
 800805c:	2b03      	cmp	r3, #3
 800805e:	d9dd      	bls.n	800801c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008060:	4b03      	ldr	r3, [pc, #12]	; (8008070 <tcp_new_port+0x84>)
 8008062:	881b      	ldrh	r3, [r3, #0]
}
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	2000000a 	.word	0x2000000a
 8008074:	08014e20 	.word	0x08014e20

08008078 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b08a      	sub	sp, #40	; 0x28
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	603b      	str	r3, [r7, #0]
 8008084:	4613      	mov	r3, r2
 8008086:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8008088:	2300      	movs	r3, #0
 800808a:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d109      	bne.n	80080a6 <tcp_connect+0x2e>
 8008092:	4b7d      	ldr	r3, [pc, #500]	; (8008288 <tcp_connect+0x210>)
 8008094:	f240 4235 	movw	r2, #1077	; 0x435
 8008098:	497c      	ldr	r1, [pc, #496]	; (800828c <tcp_connect+0x214>)
 800809a:	487d      	ldr	r0, [pc, #500]	; (8008290 <tcp_connect+0x218>)
 800809c:	f008 fa26 	bl	80104ec <iprintf>
 80080a0:	f06f 030f 	mvn.w	r3, #15
 80080a4:	e0ec      	b.n	8008280 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d109      	bne.n	80080c0 <tcp_connect+0x48>
 80080ac:	4b76      	ldr	r3, [pc, #472]	; (8008288 <tcp_connect+0x210>)
 80080ae:	f240 4236 	movw	r2, #1078	; 0x436
 80080b2:	4978      	ldr	r1, [pc, #480]	; (8008294 <tcp_connect+0x21c>)
 80080b4:	4876      	ldr	r0, [pc, #472]	; (8008290 <tcp_connect+0x218>)
 80080b6:	f008 fa19 	bl	80104ec <iprintf>
 80080ba:	f06f 030f 	mvn.w	r3, #15
 80080be:	e0df      	b.n	8008280 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	7d1b      	ldrb	r3, [r3, #20]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d009      	beq.n	80080dc <tcp_connect+0x64>
 80080c8:	4b6f      	ldr	r3, [pc, #444]	; (8008288 <tcp_connect+0x210>)
 80080ca:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80080ce:	4972      	ldr	r1, [pc, #456]	; (8008298 <tcp_connect+0x220>)
 80080d0:	486f      	ldr	r0, [pc, #444]	; (8008290 <tcp_connect+0x218>)
 80080d2:	f008 fa0b 	bl	80104ec <iprintf>
 80080d6:	f06f 0309 	mvn.w	r3, #9
 80080da:	e0d1      	b.n	8008280 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d002      	beq.n	80080e8 <tcp_connect+0x70>
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	e000      	b.n	80080ea <tcp_connect+0x72>
 80080e8:	2300      	movs	r3, #0
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	88fa      	ldrh	r2, [r7, #6]
 80080f2:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	7a1b      	ldrb	r3, [r3, #8]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d006      	beq.n	800810a <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	7a1b      	ldrb	r3, [r3, #8]
 8008100:	4618      	mov	r0, r3
 8008102:	f7fe fcd9 	bl	8006ab8 <netif_get_by_index>
 8008106:	6278      	str	r0, [r7, #36]	; 0x24
 8008108:	e005      	b.n	8008116 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	3304      	adds	r3, #4
 800810e:	4618      	mov	r0, r3
 8008110:	f006 ff9c 	bl	800f04c <ip4_route>
 8008114:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8008116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008118:	2b00      	cmp	r3, #0
 800811a:	d102      	bne.n	8008122 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800811c:	f06f 0303 	mvn.w	r3, #3
 8008120:	e0ae      	b.n	8008280 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d003      	beq.n	8008130 <tcp_connect+0xb8>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d111      	bne.n	8008154 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	2b00      	cmp	r3, #0
 8008134:	d002      	beq.n	800813c <tcp_connect+0xc4>
 8008136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008138:	3304      	adds	r3, #4
 800813a:	e000      	b.n	800813e <tcp_connect+0xc6>
 800813c:	2300      	movs	r3, #0
 800813e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d102      	bne.n	800814c <tcp_connect+0xd4>
      return ERR_RTE;
 8008146:	f06f 0303 	mvn.w	r3, #3
 800814a:	e099      	b.n	8008280 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	8adb      	ldrh	r3, [r3, #22]
 8008158:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	8adb      	ldrh	r3, [r3, #22]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10c      	bne.n	800817c <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8008162:	f7ff ff43 	bl	8007fec <tcp_new_port>
 8008166:	4603      	mov	r3, r0
 8008168:	461a      	mov	r2, r3
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	8adb      	ldrh	r3, [r3, #22]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d102      	bne.n	800817c <tcp_connect+0x104>
      return ERR_BUF;
 8008176:	f06f 0301 	mvn.w	r3, #1
 800817a:	e081      	b.n	8008280 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f001 f84f 	bl	8009220 <tcp_next_iss>
 8008182:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2200      	movs	r2, #0
 8008188:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	1e5a      	subs	r2, r3, #1
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	1e5a      	subs	r2, r3, #1
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	1e5a      	subs	r2, r3, #1
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80081ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80081c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f44f 7206 	mov.w	r2, #536	; 0x218
 80081d0:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3304      	adds	r3, #4
 80081da:	461a      	mov	r2, r3
 80081dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081de:	f001 f845 	bl	800926c <tcp_eff_send_mss_netif>
 80081e2:	4603      	mov	r3, r0
 80081e4:	461a      	mov	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	683a      	ldr	r2, [r7, #0]
 80081f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80081fa:	2102      	movs	r1, #2
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f004 faa9 	bl	800c754 <tcp_enqueue_flags>
 8008202:	4603      	mov	r3, r0
 8008204:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8008206:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d136      	bne.n	800827c <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2202      	movs	r2, #2
 8008212:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8008214:	8b7b      	ldrh	r3, [r7, #26]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d021      	beq.n	800825e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800821a:	4b20      	ldr	r3, [pc, #128]	; (800829c <tcp_connect+0x224>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	429a      	cmp	r2, r3
 8008222:	d105      	bne.n	8008230 <tcp_connect+0x1b8>
 8008224:	4b1d      	ldr	r3, [pc, #116]	; (800829c <tcp_connect+0x224>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	4a1c      	ldr	r2, [pc, #112]	; (800829c <tcp_connect+0x224>)
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	e013      	b.n	8008258 <tcp_connect+0x1e0>
 8008230:	4b1a      	ldr	r3, [pc, #104]	; (800829c <tcp_connect+0x224>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	623b      	str	r3, [r7, #32]
 8008236:	e00c      	b.n	8008252 <tcp_connect+0x1da>
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	429a      	cmp	r2, r3
 8008240:	d104      	bne.n	800824c <tcp_connect+0x1d4>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	68da      	ldr	r2, [r3, #12]
 8008246:	6a3b      	ldr	r3, [r7, #32]
 8008248:	60da      	str	r2, [r3, #12]
 800824a:	e005      	b.n	8008258 <tcp_connect+0x1e0>
 800824c:	6a3b      	ldr	r3, [r7, #32]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	623b      	str	r3, [r7, #32]
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1ef      	bne.n	8008238 <tcp_connect+0x1c0>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800825e:	4b10      	ldr	r3, [pc, #64]	; (80082a0 <tcp_connect+0x228>)
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	60da      	str	r2, [r3, #12]
 8008266:	4a0e      	ldr	r2, [pc, #56]	; (80082a0 <tcp_connect+0x228>)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6013      	str	r3, [r2, #0]
 800826c:	f005 fad6 	bl	800d81c <tcp_timer_needed>
 8008270:	4b0c      	ldr	r3, [pc, #48]	; (80082a4 <tcp_connect+0x22c>)
 8008272:	2201      	movs	r2, #1
 8008274:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f004 fb5a 	bl	800c930 <tcp_output>
  }
  return ret;
 800827c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8008280:	4618      	mov	r0, r3
 8008282:	3728      	adds	r7, #40	; 0x28
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	08012e54 	.word	0x08012e54
 800828c:	08013130 	.word	0x08013130
 8008290:	08012e98 	.word	0x08012e98
 8008294:	0801314c 	.word	0x0801314c
 8008298:	08013168 	.word	0x08013168
 800829c:	20006804 	.word	0x20006804
 80082a0:	2000680c 	.word	0x2000680c
 80082a4:	20006814 	.word	0x20006814

080082a8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80082a8:	b5b0      	push	{r4, r5, r7, lr}
 80082aa:	b090      	sub	sp, #64	; 0x40
 80082ac:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80082b4:	4b94      	ldr	r3, [pc, #592]	; (8008508 <tcp_slowtmr+0x260>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3301      	adds	r3, #1
 80082ba:	4a93      	ldr	r2, [pc, #588]	; (8008508 <tcp_slowtmr+0x260>)
 80082bc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80082be:	4b93      	ldr	r3, [pc, #588]	; (800850c <tcp_slowtmr+0x264>)
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	3301      	adds	r3, #1
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	4b91      	ldr	r3, [pc, #580]	; (800850c <tcp_slowtmr+0x264>)
 80082c8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80082ca:	2300      	movs	r3, #0
 80082cc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80082ce:	4b90      	ldr	r3, [pc, #576]	; (8008510 <tcp_slowtmr+0x268>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80082d4:	e29f      	b.n	8008816 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80082d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d8:	7d1b      	ldrb	r3, [r3, #20]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d106      	bne.n	80082ec <tcp_slowtmr+0x44>
 80082de:	4b8d      	ldr	r3, [pc, #564]	; (8008514 <tcp_slowtmr+0x26c>)
 80082e0:	f240 42be 	movw	r2, #1214	; 0x4be
 80082e4:	498c      	ldr	r1, [pc, #560]	; (8008518 <tcp_slowtmr+0x270>)
 80082e6:	488d      	ldr	r0, [pc, #564]	; (800851c <tcp_slowtmr+0x274>)
 80082e8:	f008 f900 	bl	80104ec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80082ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ee:	7d1b      	ldrb	r3, [r3, #20]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d106      	bne.n	8008302 <tcp_slowtmr+0x5a>
 80082f4:	4b87      	ldr	r3, [pc, #540]	; (8008514 <tcp_slowtmr+0x26c>)
 80082f6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80082fa:	4989      	ldr	r1, [pc, #548]	; (8008520 <tcp_slowtmr+0x278>)
 80082fc:	4887      	ldr	r0, [pc, #540]	; (800851c <tcp_slowtmr+0x274>)
 80082fe:	f008 f8f5 	bl	80104ec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008304:	7d1b      	ldrb	r3, [r3, #20]
 8008306:	2b0a      	cmp	r3, #10
 8008308:	d106      	bne.n	8008318 <tcp_slowtmr+0x70>
 800830a:	4b82      	ldr	r3, [pc, #520]	; (8008514 <tcp_slowtmr+0x26c>)
 800830c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008310:	4984      	ldr	r1, [pc, #528]	; (8008524 <tcp_slowtmr+0x27c>)
 8008312:	4882      	ldr	r0, [pc, #520]	; (800851c <tcp_slowtmr+0x274>)
 8008314:	f008 f8ea 	bl	80104ec <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831a:	7f9a      	ldrb	r2, [r3, #30]
 800831c:	4b7b      	ldr	r3, [pc, #492]	; (800850c <tcp_slowtmr+0x264>)
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	429a      	cmp	r2, r3
 8008322:	d105      	bne.n	8008330 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8008324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008326:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800832e:	e272      	b.n	8008816 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008330:	4b76      	ldr	r3, [pc, #472]	; (800850c <tcp_slowtmr+0x264>)
 8008332:	781a      	ldrb	r2, [r3, #0]
 8008334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008336:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8008338:	2300      	movs	r3, #0
 800833a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800833e:	2300      	movs	r3, #0
 8008340:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008346:	7d1b      	ldrb	r3, [r3, #20]
 8008348:	2b02      	cmp	r3, #2
 800834a:	d10a      	bne.n	8008362 <tcp_slowtmr+0xba>
 800834c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008352:	2b05      	cmp	r3, #5
 8008354:	d905      	bls.n	8008362 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8008356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800835a:	3301      	adds	r3, #1
 800835c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008360:	e11e      	b.n	80085a0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008364:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008368:	2b0b      	cmp	r3, #11
 800836a:	d905      	bls.n	8008378 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800836c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008370:	3301      	adds	r3, #1
 8008372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008376:	e113      	b.n	80085a0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8008378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800837e:	2b00      	cmp	r3, #0
 8008380:	d075      	beq.n	800846e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008386:	2b00      	cmp	r3, #0
 8008388:	d006      	beq.n	8008398 <tcp_slowtmr+0xf0>
 800838a:	4b62      	ldr	r3, [pc, #392]	; (8008514 <tcp_slowtmr+0x26c>)
 800838c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008390:	4965      	ldr	r1, [pc, #404]	; (8008528 <tcp_slowtmr+0x280>)
 8008392:	4862      	ldr	r0, [pc, #392]	; (800851c <tcp_slowtmr+0x274>)
 8008394:	f008 f8aa 	bl	80104ec <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800839c:	2b00      	cmp	r3, #0
 800839e:	d106      	bne.n	80083ae <tcp_slowtmr+0x106>
 80083a0:	4b5c      	ldr	r3, [pc, #368]	; (8008514 <tcp_slowtmr+0x26c>)
 80083a2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80083a6:	4961      	ldr	r1, [pc, #388]	; (800852c <tcp_slowtmr+0x284>)
 80083a8:	485c      	ldr	r0, [pc, #368]	; (800851c <tcp_slowtmr+0x274>)
 80083aa:	f008 f89f 	bl	80104ec <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80083ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80083b4:	2b0b      	cmp	r3, #11
 80083b6:	d905      	bls.n	80083c4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80083b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083bc:	3301      	adds	r3, #1
 80083be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80083c2:	e0ed      	b.n	80085a0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80083c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80083ca:	3b01      	subs	r3, #1
 80083cc:	4a58      	ldr	r2, [pc, #352]	; (8008530 <tcp_slowtmr+0x288>)
 80083ce:	5cd3      	ldrb	r3, [r2, r3]
 80083d0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80083d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80083d8:	7c7a      	ldrb	r2, [r7, #17]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d907      	bls.n	80083ee <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80083de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80083e4:	3301      	adds	r3, #1
 80083e6:	b2da      	uxtb	r2, r3
 80083e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80083ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80083f4:	7c7a      	ldrb	r2, [r7, #17]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	f200 80d2 	bhi.w	80085a0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80083fc:	2301      	movs	r3, #1
 80083fe:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8008400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008402:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008406:	2b00      	cmp	r3, #0
 8008408:	d108      	bne.n	800841c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800840a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800840c:	f005 f938 	bl	800d680 <tcp_zero_window_probe>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d014      	beq.n	8008440 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8008416:	2300      	movs	r3, #0
 8008418:	623b      	str	r3, [r7, #32]
 800841a:	e011      	b.n	8008440 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008422:	4619      	mov	r1, r3
 8008424:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008426:	f003 fffd 	bl	800c424 <tcp_split_unsent_seg>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d107      	bne.n	8008440 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8008430:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008432:	f004 fa7d 	bl	800c930 <tcp_output>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800843c:	2300      	movs	r3, #0
 800843e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	2b00      	cmp	r3, #0
 8008444:	f000 80ac 	beq.w	80085a0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8008448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008452:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008456:	2b06      	cmp	r3, #6
 8008458:	f200 80a2 	bhi.w	80085a0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800845c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008462:	3301      	adds	r3, #1
 8008464:	b2da      	uxtb	r2, r3
 8008466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008468:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800846c:	e098      	b.n	80085a0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800846e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008470:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008474:	2b00      	cmp	r3, #0
 8008476:	db0f      	blt.n	8008498 <tcp_slowtmr+0x1f0>
 8008478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800847e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008482:	4293      	cmp	r3, r2
 8008484:	d008      	beq.n	8008498 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8008486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008488:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800848c:	b29b      	uxth	r3, r3
 800848e:	3301      	adds	r3, #1
 8008490:	b29b      	uxth	r3, r3
 8008492:	b21a      	sxth	r2, r3
 8008494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008496:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8008498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800849e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80084a4:	429a      	cmp	r2, r3
 80084a6:	db7b      	blt.n	80085a0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80084a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084aa:	f004 fd33 	bl	800cf14 <tcp_rexmit_rto_prepare>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d007      	beq.n	80084c4 <tcp_slowtmr+0x21c>
 80084b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d171      	bne.n	80085a0 <tcp_slowtmr+0x2f8>
 80084bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d06d      	beq.n	80085a0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80084c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c6:	7d1b      	ldrb	r3, [r3, #20]
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d03a      	beq.n	8008542 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80084cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80084d2:	2b0c      	cmp	r3, #12
 80084d4:	bf28      	it	cs
 80084d6:	230c      	movcs	r3, #12
 80084d8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80084da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80084e0:	10db      	asrs	r3, r3, #3
 80084e2:	b21b      	sxth	r3, r3
 80084e4:	461a      	mov	r2, r3
 80084e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80084ec:	4413      	add	r3, r2
 80084ee:	7efa      	ldrb	r2, [r7, #27]
 80084f0:	4910      	ldr	r1, [pc, #64]	; (8008534 <tcp_slowtmr+0x28c>)
 80084f2:	5c8a      	ldrb	r2, [r1, r2]
 80084f4:	4093      	lsls	r3, r2
 80084f6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80084fe:	4293      	cmp	r3, r2
 8008500:	dc1a      	bgt.n	8008538 <tcp_slowtmr+0x290>
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	b21a      	sxth	r2, r3
 8008506:	e019      	b.n	800853c <tcp_slowtmr+0x294>
 8008508:	20006800 	.word	0x20006800
 800850c:	20006816 	.word	0x20006816
 8008510:	2000680c 	.word	0x2000680c
 8008514:	08012e54 	.word	0x08012e54
 8008518:	08013198 	.word	0x08013198
 800851c:	08012e98 	.word	0x08012e98
 8008520:	080131c4 	.word	0x080131c4
 8008524:	080131f0 	.word	0x080131f0
 8008528:	08013220 	.word	0x08013220
 800852c:	08013254 	.word	0x08013254
 8008530:	08014e18 	.word	0x08014e18
 8008534:	08014e08 	.word	0x08014e08
 8008538:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800853c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008544:	2200      	movs	r2, #0
 8008546:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800854e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008550:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008554:	4293      	cmp	r3, r2
 8008556:	bf28      	it	cs
 8008558:	4613      	movcs	r3, r2
 800855a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800855c:	8a7b      	ldrh	r3, [r7, #18]
 800855e:	085b      	lsrs	r3, r3, #1
 8008560:	b29a      	uxth	r2, r3
 8008562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008564:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800856e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008570:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008572:	005b      	lsls	r3, r3, #1
 8008574:	b29b      	uxth	r3, r3
 8008576:	429a      	cmp	r2, r3
 8008578:	d206      	bcs.n	8008588 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800857a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800857e:	005b      	lsls	r3, r3, #1
 8008580:	b29a      	uxth	r2, r3
 8008582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008584:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8008588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800858c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8008592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008594:	2200      	movs	r2, #0
 8008596:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800859a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800859c:	f004 fd2a 	bl	800cff4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80085a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a2:	7d1b      	ldrb	r3, [r3, #20]
 80085a4:	2b06      	cmp	r3, #6
 80085a6:	d111      	bne.n	80085cc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80085a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085aa:	8b5b      	ldrh	r3, [r3, #26]
 80085ac:	f003 0310 	and.w	r3, r3, #16
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00b      	beq.n	80085cc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80085b4:	4b9d      	ldr	r3, [pc, #628]	; (800882c <tcp_slowtmr+0x584>)
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	2b28      	cmp	r3, #40	; 0x28
 80085c0:	d904      	bls.n	80085cc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80085c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085c6:	3301      	adds	r3, #1
 80085c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80085cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ce:	7a5b      	ldrb	r3, [r3, #9]
 80085d0:	f003 0308 	and.w	r3, r3, #8
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d04c      	beq.n	8008672 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80085d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085da:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80085dc:	2b04      	cmp	r3, #4
 80085de:	d003      	beq.n	80085e8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80085e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80085e4:	2b07      	cmp	r3, #7
 80085e6:	d144      	bne.n	8008672 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80085e8:	4b90      	ldr	r3, [pc, #576]	; (800882c <tcp_slowtmr+0x584>)
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ee:	6a1b      	ldr	r3, [r3, #32]
 80085f0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80085f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085f8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80085fc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8008600:	498b      	ldr	r1, [pc, #556]	; (8008830 <tcp_slowtmr+0x588>)
 8008602:	fba1 1303 	umull	r1, r3, r1, r3
 8008606:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008608:	429a      	cmp	r2, r3
 800860a:	d90a      	bls.n	8008622 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800860c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008610:	3301      	adds	r3, #1
 8008612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8008616:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800861a:	3301      	adds	r3, #1
 800861c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008620:	e027      	b.n	8008672 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008622:	4b82      	ldr	r3, [pc, #520]	; (800882c <tcp_slowtmr+0x584>)
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800862c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008634:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008638:	4618      	mov	r0, r3
 800863a:	4b7e      	ldr	r3, [pc, #504]	; (8008834 <tcp_slowtmr+0x58c>)
 800863c:	fb00 f303 	mul.w	r3, r0, r3
 8008640:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008642:	497b      	ldr	r1, [pc, #492]	; (8008830 <tcp_slowtmr+0x588>)
 8008644:	fba1 1303 	umull	r1, r3, r1, r3
 8008648:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800864a:	429a      	cmp	r2, r3
 800864c:	d911      	bls.n	8008672 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800864e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008650:	f004 ffd6 	bl	800d600 <tcp_keepalive>
 8008654:	4603      	mov	r3, r0
 8008656:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800865a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800865e:	2b00      	cmp	r3, #0
 8008660:	d107      	bne.n	8008672 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8008662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008664:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008668:	3301      	adds	r3, #1
 800866a:	b2da      	uxtb	r2, r3
 800866c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008676:	2b00      	cmp	r3, #0
 8008678:	d011      	beq.n	800869e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800867a:	4b6c      	ldr	r3, [pc, #432]	; (800882c <tcp_slowtmr+0x584>)
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	1ad2      	subs	r2, r2, r3
 8008684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008686:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800868a:	4619      	mov	r1, r3
 800868c:	460b      	mov	r3, r1
 800868e:	005b      	lsls	r3, r3, #1
 8008690:	440b      	add	r3, r1
 8008692:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008694:	429a      	cmp	r2, r3
 8008696:	d302      	bcc.n	800869e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8008698:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800869a:	f000 fe91 	bl	80093c0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800869e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a0:	7d1b      	ldrb	r3, [r3, #20]
 80086a2:	2b03      	cmp	r3, #3
 80086a4:	d10b      	bne.n	80086be <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80086a6:	4b61      	ldr	r3, [pc, #388]	; (800882c <tcp_slowtmr+0x584>)
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ac:	6a1b      	ldr	r3, [r3, #32]
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	2b28      	cmp	r3, #40	; 0x28
 80086b2:	d904      	bls.n	80086be <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80086b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086b8:	3301      	adds	r3, #1
 80086ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80086be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c0:	7d1b      	ldrb	r3, [r3, #20]
 80086c2:	2b09      	cmp	r3, #9
 80086c4:	d10b      	bne.n	80086de <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80086c6:	4b59      	ldr	r3, [pc, #356]	; (800882c <tcp_slowtmr+0x584>)
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086cc:	6a1b      	ldr	r3, [r3, #32]
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	2bf0      	cmp	r3, #240	; 0xf0
 80086d2:	d904      	bls.n	80086de <tcp_slowtmr+0x436>
        ++pcb_remove;
 80086d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086d8:	3301      	adds	r3, #1
 80086da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80086de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d060      	beq.n	80087a8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80086e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ec:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80086ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086f0:	f000 fcb2 	bl	8009058 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80086f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d010      	beq.n	800871c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80086fa:	4b4f      	ldr	r3, [pc, #316]	; (8008838 <tcp_slowtmr+0x590>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008700:	429a      	cmp	r2, r3
 8008702:	d106      	bne.n	8008712 <tcp_slowtmr+0x46a>
 8008704:	4b4d      	ldr	r3, [pc, #308]	; (800883c <tcp_slowtmr+0x594>)
 8008706:	f240 526d 	movw	r2, #1389	; 0x56d
 800870a:	494d      	ldr	r1, [pc, #308]	; (8008840 <tcp_slowtmr+0x598>)
 800870c:	484d      	ldr	r0, [pc, #308]	; (8008844 <tcp_slowtmr+0x59c>)
 800870e:	f007 feed 	bl	80104ec <iprintf>
        prev->next = pcb->next;
 8008712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008714:	68da      	ldr	r2, [r3, #12]
 8008716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008718:	60da      	str	r2, [r3, #12]
 800871a:	e00f      	b.n	800873c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800871c:	4b46      	ldr	r3, [pc, #280]	; (8008838 <tcp_slowtmr+0x590>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008722:	429a      	cmp	r2, r3
 8008724:	d006      	beq.n	8008734 <tcp_slowtmr+0x48c>
 8008726:	4b45      	ldr	r3, [pc, #276]	; (800883c <tcp_slowtmr+0x594>)
 8008728:	f240 5271 	movw	r2, #1393	; 0x571
 800872c:	4946      	ldr	r1, [pc, #280]	; (8008848 <tcp_slowtmr+0x5a0>)
 800872e:	4845      	ldr	r0, [pc, #276]	; (8008844 <tcp_slowtmr+0x59c>)
 8008730:	f007 fedc 	bl	80104ec <iprintf>
        tcp_active_pcbs = pcb->next;
 8008734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	4a3f      	ldr	r2, [pc, #252]	; (8008838 <tcp_slowtmr+0x590>)
 800873a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800873c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008740:	2b00      	cmp	r3, #0
 8008742:	d013      	beq.n	800876c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008746:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800874c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800874e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008750:	3304      	adds	r3, #4
 8008752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008754:	8ad2      	ldrh	r2, [r2, #22]
 8008756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008758:	8b09      	ldrh	r1, [r1, #24]
 800875a:	9102      	str	r1, [sp, #8]
 800875c:	9201      	str	r2, [sp, #4]
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	462b      	mov	r3, r5
 8008762:	4622      	mov	r2, r4
 8008764:	4601      	mov	r1, r0
 8008766:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008768:	f004 fe96 	bl	800d498 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800876c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008774:	7d1b      	ldrb	r3, [r3, #20]
 8008776:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800877c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008782:	6838      	ldr	r0, [r7, #0]
 8008784:	f7fe fffc 	bl	8007780 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8008788:	4b30      	ldr	r3, [pc, #192]	; (800884c <tcp_slowtmr+0x5a4>)
 800878a:	2200      	movs	r2, #0
 800878c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d004      	beq.n	800879e <tcp_slowtmr+0x4f6>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f06f 010c 	mvn.w	r1, #12
 800879a:	68b8      	ldr	r0, [r7, #8]
 800879c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800879e:	4b2b      	ldr	r3, [pc, #172]	; (800884c <tcp_slowtmr+0x5a4>)
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d037      	beq.n	8008816 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80087a6:	e590      	b.n	80082ca <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80087a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80087ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80087b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b4:	7f1b      	ldrb	r3, [r3, #28]
 80087b6:	3301      	adds	r3, #1
 80087b8:	b2da      	uxtb	r2, r3
 80087ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087bc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80087be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c0:	7f1a      	ldrb	r2, [r3, #28]
 80087c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c4:	7f5b      	ldrb	r3, [r3, #29]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d325      	bcc.n	8008816 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	2200      	movs	r2, #0
 80087ce:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80087d0:	4b1e      	ldr	r3, [pc, #120]	; (800884c <tcp_slowtmr+0x5a4>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80087d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00b      	beq.n	80087f8 <tcp_slowtmr+0x550>
 80087e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087e8:	6912      	ldr	r2, [r2, #16]
 80087ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087ec:	4610      	mov	r0, r2
 80087ee:	4798      	blx	r3
 80087f0:	4603      	mov	r3, r0
 80087f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80087f6:	e002      	b.n	80087fe <tcp_slowtmr+0x556>
 80087f8:	2300      	movs	r3, #0
 80087fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80087fe:	4b13      	ldr	r3, [pc, #76]	; (800884c <tcp_slowtmr+0x5a4>)
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d000      	beq.n	8008808 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8008806:	e560      	b.n	80082ca <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008808:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800880c:	2b00      	cmp	r3, #0
 800880e:	d102      	bne.n	8008816 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8008810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008812:	f004 f88d 	bl	800c930 <tcp_output>
  while (pcb != NULL) {
 8008816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008818:	2b00      	cmp	r3, #0
 800881a:	f47f ad5c 	bne.w	80082d6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800881e:	2300      	movs	r3, #0
 8008820:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8008822:	4b0b      	ldr	r3, [pc, #44]	; (8008850 <tcp_slowtmr+0x5a8>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008828:	e067      	b.n	80088fa <tcp_slowtmr+0x652>
 800882a:	bf00      	nop
 800882c:	20006800 	.word	0x20006800
 8008830:	10624dd3 	.word	0x10624dd3
 8008834:	000124f8 	.word	0x000124f8
 8008838:	2000680c 	.word	0x2000680c
 800883c:	08012e54 	.word	0x08012e54
 8008840:	0801328c 	.word	0x0801328c
 8008844:	08012e98 	.word	0x08012e98
 8008848:	080132b8 	.word	0x080132b8
 800884c:	20006814 	.word	0x20006814
 8008850:	20006810 	.word	0x20006810
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008856:	7d1b      	ldrb	r3, [r3, #20]
 8008858:	2b0a      	cmp	r3, #10
 800885a:	d006      	beq.n	800886a <tcp_slowtmr+0x5c2>
 800885c:	4b2b      	ldr	r3, [pc, #172]	; (800890c <tcp_slowtmr+0x664>)
 800885e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8008862:	492b      	ldr	r1, [pc, #172]	; (8008910 <tcp_slowtmr+0x668>)
 8008864:	482b      	ldr	r0, [pc, #172]	; (8008914 <tcp_slowtmr+0x66c>)
 8008866:	f007 fe41 	bl	80104ec <iprintf>
    pcb_remove = 0;
 800886a:	2300      	movs	r3, #0
 800886c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008870:	4b29      	ldr	r3, [pc, #164]	; (8008918 <tcp_slowtmr+0x670>)
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008876:	6a1b      	ldr	r3, [r3, #32]
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	2bf0      	cmp	r3, #240	; 0xf0
 800887c:	d904      	bls.n	8008888 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800887e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008882:	3301      	adds	r3, #1
 8008884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800888c:	2b00      	cmp	r3, #0
 800888e:	d02f      	beq.n	80088f0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008890:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008892:	f000 fbe1 	bl	8009058 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008898:	2b00      	cmp	r3, #0
 800889a:	d010      	beq.n	80088be <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800889c:	4b1f      	ldr	r3, [pc, #124]	; (800891c <tcp_slowtmr+0x674>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d106      	bne.n	80088b4 <tcp_slowtmr+0x60c>
 80088a6:	4b19      	ldr	r3, [pc, #100]	; (800890c <tcp_slowtmr+0x664>)
 80088a8:	f240 52af 	movw	r2, #1455	; 0x5af
 80088ac:	491c      	ldr	r1, [pc, #112]	; (8008920 <tcp_slowtmr+0x678>)
 80088ae:	4819      	ldr	r0, [pc, #100]	; (8008914 <tcp_slowtmr+0x66c>)
 80088b0:	f007 fe1c 	bl	80104ec <iprintf>
        prev->next = pcb->next;
 80088b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b6:	68da      	ldr	r2, [r3, #12]
 80088b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ba:	60da      	str	r2, [r3, #12]
 80088bc:	e00f      	b.n	80088de <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80088be:	4b17      	ldr	r3, [pc, #92]	; (800891c <tcp_slowtmr+0x674>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d006      	beq.n	80088d6 <tcp_slowtmr+0x62e>
 80088c8:	4b10      	ldr	r3, [pc, #64]	; (800890c <tcp_slowtmr+0x664>)
 80088ca:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80088ce:	4915      	ldr	r1, [pc, #84]	; (8008924 <tcp_slowtmr+0x67c>)
 80088d0:	4810      	ldr	r0, [pc, #64]	; (8008914 <tcp_slowtmr+0x66c>)
 80088d2:	f007 fe0b 	bl	80104ec <iprintf>
        tcp_tw_pcbs = pcb->next;
 80088d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	4a10      	ldr	r2, [pc, #64]	; (800891c <tcp_slowtmr+0x674>)
 80088dc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80088de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80088e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80088e8:	69f8      	ldr	r0, [r7, #28]
 80088ea:	f7fe ff49 	bl	8007780 <tcp_free>
 80088ee:	e004      	b.n	80088fa <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80088f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80088f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80088fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1a9      	bne.n	8008854 <tcp_slowtmr+0x5ac>
    }
  }
}
 8008900:	bf00      	nop
 8008902:	bf00      	nop
 8008904:	3730      	adds	r7, #48	; 0x30
 8008906:	46bd      	mov	sp, r7
 8008908:	bdb0      	pop	{r4, r5, r7, pc}
 800890a:	bf00      	nop
 800890c:	08012e54 	.word	0x08012e54
 8008910:	080132e4 	.word	0x080132e4
 8008914:	08012e98 	.word	0x08012e98
 8008918:	20006800 	.word	0x20006800
 800891c:	20006810 	.word	0x20006810
 8008920:	08013314 	.word	0x08013314
 8008924:	0801333c 	.word	0x0801333c

08008928 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800892e:	4b2d      	ldr	r3, [pc, #180]	; (80089e4 <tcp_fasttmr+0xbc>)
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	3301      	adds	r3, #1
 8008934:	b2da      	uxtb	r2, r3
 8008936:	4b2b      	ldr	r3, [pc, #172]	; (80089e4 <tcp_fasttmr+0xbc>)
 8008938:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800893a:	4b2b      	ldr	r3, [pc, #172]	; (80089e8 <tcp_fasttmr+0xc0>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008940:	e048      	b.n	80089d4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	7f9a      	ldrb	r2, [r3, #30]
 8008946:	4b27      	ldr	r3, [pc, #156]	; (80089e4 <tcp_fasttmr+0xbc>)
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	429a      	cmp	r2, r3
 800894c:	d03f      	beq.n	80089ce <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800894e:	4b25      	ldr	r3, [pc, #148]	; (80089e4 <tcp_fasttmr+0xbc>)
 8008950:	781a      	ldrb	r2, [r3, #0]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	8b5b      	ldrh	r3, [r3, #26]
 800895a:	f003 0301 	and.w	r3, r3, #1
 800895e:	2b00      	cmp	r3, #0
 8008960:	d010      	beq.n	8008984 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	8b5b      	ldrh	r3, [r3, #26]
 8008966:	f043 0302 	orr.w	r3, r3, #2
 800896a:	b29a      	uxth	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f003 ffdd 	bl	800c930 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	8b5b      	ldrh	r3, [r3, #26]
 800897a:	f023 0303 	bic.w	r3, r3, #3
 800897e:	b29a      	uxth	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	8b5b      	ldrh	r3, [r3, #26]
 8008988:	f003 0308 	and.w	r3, r3, #8
 800898c:	2b00      	cmp	r3, #0
 800898e:	d009      	beq.n	80089a4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	8b5b      	ldrh	r3, [r3, #26]
 8008994:	f023 0308 	bic.w	r3, r3, #8
 8008998:	b29a      	uxth	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7ff f882 	bl	8007aa8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00a      	beq.n	80089c8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80089b2:	4b0e      	ldr	r3, [pc, #56]	; (80089ec <tcp_fasttmr+0xc4>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f819 	bl	80089f0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80089be:	4b0b      	ldr	r3, [pc, #44]	; (80089ec <tcp_fasttmr+0xc4>)
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d000      	beq.n	80089c8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80089c6:	e7b8      	b.n	800893a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	607b      	str	r3, [r7, #4]
 80089cc:	e002      	b.n	80089d4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1b3      	bne.n	8008942 <tcp_fasttmr+0x1a>
    }
  }
}
 80089da:	bf00      	nop
 80089dc:	bf00      	nop
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	20006816 	.word	0x20006816
 80089e8:	2000680c 	.word	0x2000680c
 80089ec:	20006814 	.word	0x20006814

080089f0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80089f0:	b590      	push	{r4, r7, lr}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d109      	bne.n	8008a12 <tcp_process_refused_data+0x22>
 80089fe:	4b37      	ldr	r3, [pc, #220]	; (8008adc <tcp_process_refused_data+0xec>)
 8008a00:	f240 6209 	movw	r2, #1545	; 0x609
 8008a04:	4936      	ldr	r1, [pc, #216]	; (8008ae0 <tcp_process_refused_data+0xf0>)
 8008a06:	4837      	ldr	r0, [pc, #220]	; (8008ae4 <tcp_process_refused_data+0xf4>)
 8008a08:	f007 fd70 	bl	80104ec <iprintf>
 8008a0c:	f06f 030f 	mvn.w	r3, #15
 8008a10:	e060      	b.n	8008ad4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a16:	7b5b      	ldrb	r3, [r3, #13]
 8008a18:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a1e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00b      	beq.n	8008a48 <tcp_process_refused_data+0x58>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6918      	ldr	r0, [r3, #16]
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	6879      	ldr	r1, [r7, #4]
 8008a40:	47a0      	blx	r4
 8008a42:	4603      	mov	r3, r0
 8008a44:	73fb      	strb	r3, [r7, #15]
 8008a46:	e007      	b.n	8008a58 <tcp_process_refused_data+0x68>
 8008a48:	2300      	movs	r3, #0
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	6879      	ldr	r1, [r7, #4]
 8008a4e:	2000      	movs	r0, #0
 8008a50:	f000 f8a4 	bl	8008b9c <tcp_recv_null>
 8008a54:	4603      	mov	r3, r0
 8008a56:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d12a      	bne.n	8008ab6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008a60:	7bbb      	ldrb	r3, [r7, #14]
 8008a62:	f003 0320 	and.w	r3, r3, #32
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d033      	beq.n	8008ad2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a6e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008a72:	d005      	beq.n	8008a80 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a78:	3301      	adds	r3, #1
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00b      	beq.n	8008aa2 <tcp_process_refused_data+0xb2>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6918      	ldr	r0, [r3, #16]
 8008a94:	2300      	movs	r3, #0
 8008a96:	2200      	movs	r2, #0
 8008a98:	6879      	ldr	r1, [r7, #4]
 8008a9a:	47a0      	blx	r4
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	73fb      	strb	r3, [r7, #15]
 8008aa0:	e001      	b.n	8008aa6 <tcp_process_refused_data+0xb6>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8008aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008aaa:	f113 0f0d 	cmn.w	r3, #13
 8008aae:	d110      	bne.n	8008ad2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008ab0:	f06f 030c 	mvn.w	r3, #12
 8008ab4:	e00e      	b.n	8008ad4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8008ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008aba:	f113 0f0d 	cmn.w	r3, #13
 8008abe:	d102      	bne.n	8008ac6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008ac0:	f06f 030c 	mvn.w	r3, #12
 8008ac4:	e006      	b.n	8008ad4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8008acc:	f06f 0304 	mvn.w	r3, #4
 8008ad0:	e000      	b.n	8008ad4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd90      	pop	{r4, r7, pc}
 8008adc:	08012e54 	.word	0x08012e54
 8008ae0:	08013364 	.word	0x08013364
 8008ae4:	08012e98 	.word	0x08012e98

08008ae8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008af0:	e007      	b.n	8008b02 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f80a 	bl	8008b12 <tcp_seg_free>
    seg = next;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1f4      	bne.n	8008af2 <tcp_segs_free+0xa>
  }
}
 8008b08:	bf00      	nop
 8008b0a:	bf00      	nop
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b082      	sub	sp, #8
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00c      	beq.n	8008b3a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d004      	beq.n	8008b32 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7fe fb23 	bl	8007178 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008b32:	6879      	ldr	r1, [r7, #4]
 8008b34:	2003      	movs	r0, #3
 8008b36:	f7fd fd0d 	bl	8006554 <memp_free>
  }
}
 8008b3a:	bf00      	nop
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d106      	bne.n	8008b60 <tcp_seg_copy+0x1c>
 8008b52:	4b0f      	ldr	r3, [pc, #60]	; (8008b90 <tcp_seg_copy+0x4c>)
 8008b54:	f240 6282 	movw	r2, #1666	; 0x682
 8008b58:	490e      	ldr	r1, [pc, #56]	; (8008b94 <tcp_seg_copy+0x50>)
 8008b5a:	480f      	ldr	r0, [pc, #60]	; (8008b98 <tcp_seg_copy+0x54>)
 8008b5c:	f007 fcc6 	bl	80104ec <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008b60:	2003      	movs	r0, #3
 8008b62:	f7fd fcab 	bl	80064bc <memp_malloc>
 8008b66:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <tcp_seg_copy+0x2e>
    return NULL;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	e00a      	b.n	8008b88 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008b72:	2210      	movs	r2, #16
 8008b74:	6879      	ldr	r1, [r7, #4]
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f007 fc88 	bl	801048c <memcpy>
  pbuf_ref(cseg->p);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7fe fb99 	bl	80072b8 <pbuf_ref>
  return cseg;
 8008b86:	68fb      	ldr	r3, [r7, #12]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	08012e54 	.word	0x08012e54
 8008b94:	080133a8 	.word	0x080133a8
 8008b98:	08012e98 	.word	0x08012e98

08008b9c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
 8008ba8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d109      	bne.n	8008bc4 <tcp_recv_null+0x28>
 8008bb0:	4b12      	ldr	r3, [pc, #72]	; (8008bfc <tcp_recv_null+0x60>)
 8008bb2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8008bb6:	4912      	ldr	r1, [pc, #72]	; (8008c00 <tcp_recv_null+0x64>)
 8008bb8:	4812      	ldr	r0, [pc, #72]	; (8008c04 <tcp_recv_null+0x68>)
 8008bba:	f007 fc97 	bl	80104ec <iprintf>
 8008bbe:	f06f 030f 	mvn.w	r3, #15
 8008bc2:	e016      	b.n	8008bf2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d009      	beq.n	8008bde <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	891b      	ldrh	r3, [r3, #8]
 8008bce:	4619      	mov	r1, r3
 8008bd0:	68b8      	ldr	r0, [r7, #8]
 8008bd2:	f7ff f9bb 	bl	8007f4c <tcp_recved>
    pbuf_free(p);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f7fe face 	bl	8007178 <pbuf_free>
 8008bdc:	e008      	b.n	8008bf0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8008bde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d104      	bne.n	8008bf0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8008be6:	68b8      	ldr	r0, [r7, #8]
 8008be8:	f7fe ffc8 	bl	8007b7c <tcp_close>
 8008bec:	4603      	mov	r3, r0
 8008bee:	e000      	b.n	8008bf2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	08012e54 	.word	0x08012e54
 8008c00:	080133c4 	.word	0x080133c4
 8008c04:	08012e98 	.word	0x08012e98

08008c08 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b086      	sub	sp, #24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	4603      	mov	r3, r0
 8008c10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	db01      	blt.n	8008c1e <tcp_kill_prio+0x16>
 8008c1a:	79fb      	ldrb	r3, [r7, #7]
 8008c1c:	e000      	b.n	8008c20 <tcp_kill_prio+0x18>
 8008c1e:	237f      	movs	r3, #127	; 0x7f
 8008c20:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8008c22:	7afb      	ldrb	r3, [r7, #11]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d034      	beq.n	8008c92 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008c28:	7afb      	ldrb	r3, [r7, #11]
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008c32:	2300      	movs	r3, #0
 8008c34:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c36:	4b19      	ldr	r3, [pc, #100]	; (8008c9c <tcp_kill_prio+0x94>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	617b      	str	r3, [r7, #20]
 8008c3c:	e01f      	b.n	8008c7e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	7d5b      	ldrb	r3, [r3, #21]
 8008c42:	7afa      	ldrb	r2, [r7, #11]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d80c      	bhi.n	8008c62 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008c4c:	7afa      	ldrb	r2, [r7, #11]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d112      	bne.n	8008c78 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008c52:	4b13      	ldr	r3, [pc, #76]	; (8008ca0 <tcp_kill_prio+0x98>)
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	6a1b      	ldr	r3, [r3, #32]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d80a      	bhi.n	8008c78 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008c62:	4b0f      	ldr	r3, [pc, #60]	; (8008ca0 <tcp_kill_prio+0x98>)
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	1ad3      	subs	r3, r2, r3
 8008c6c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	7d5b      	ldrb	r3, [r3, #21]
 8008c76:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	617b      	str	r3, [r7, #20]
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1dc      	bne.n	8008c3e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d004      	beq.n	8008c94 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008c8a:	6938      	ldr	r0, [r7, #16]
 8008c8c:	f7ff f860 	bl	8007d50 <tcp_abort>
 8008c90:	e000      	b.n	8008c94 <tcp_kill_prio+0x8c>
    return;
 8008c92:	bf00      	nop
  }
}
 8008c94:	3718      	adds	r7, #24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	2000680c 	.word	0x2000680c
 8008ca0:	20006800 	.word	0x20006800

08008ca4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	4603      	mov	r3, r0
 8008cac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008cae:	79fb      	ldrb	r3, [r7, #7]
 8008cb0:	2b08      	cmp	r3, #8
 8008cb2:	d009      	beq.n	8008cc8 <tcp_kill_state+0x24>
 8008cb4:	79fb      	ldrb	r3, [r7, #7]
 8008cb6:	2b09      	cmp	r3, #9
 8008cb8:	d006      	beq.n	8008cc8 <tcp_kill_state+0x24>
 8008cba:	4b1a      	ldr	r3, [pc, #104]	; (8008d24 <tcp_kill_state+0x80>)
 8008cbc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008cc0:	4919      	ldr	r1, [pc, #100]	; (8008d28 <tcp_kill_state+0x84>)
 8008cc2:	481a      	ldr	r0, [pc, #104]	; (8008d2c <tcp_kill_state+0x88>)
 8008cc4:	f007 fc12 	bl	80104ec <iprintf>

  inactivity = 0;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008cd0:	4b17      	ldr	r3, [pc, #92]	; (8008d30 <tcp_kill_state+0x8c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	617b      	str	r3, [r7, #20]
 8008cd6:	e017      	b.n	8008d08 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	7d1b      	ldrb	r3, [r3, #20]
 8008cdc:	79fa      	ldrb	r2, [r7, #7]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d10f      	bne.n	8008d02 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008ce2:	4b14      	ldr	r3, [pc, #80]	; (8008d34 <tcp_kill_state+0x90>)
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	1ad3      	subs	r3, r2, r3
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d807      	bhi.n	8008d02 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8008cf2:	4b10      	ldr	r3, [pc, #64]	; (8008d34 <tcp_kill_state+0x90>)
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	6a1b      	ldr	r3, [r3, #32]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	617b      	str	r3, [r7, #20]
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1e4      	bne.n	8008cd8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d003      	beq.n	8008d1c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008d14:	2100      	movs	r1, #0
 8008d16:	6938      	ldr	r0, [r7, #16]
 8008d18:	f7fe ff5c 	bl	8007bd4 <tcp_abandon>
  }
}
 8008d1c:	bf00      	nop
 8008d1e:	3718      	adds	r7, #24
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	08012e54 	.word	0x08012e54
 8008d28:	080133e0 	.word	0x080133e0
 8008d2c:	08012e98 	.word	0x08012e98
 8008d30:	2000680c 	.word	0x2000680c
 8008d34:	20006800 	.word	0x20006800

08008d38 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008d42:	2300      	movs	r3, #0
 8008d44:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d46:	4b12      	ldr	r3, [pc, #72]	; (8008d90 <tcp_kill_timewait+0x58>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	60fb      	str	r3, [r7, #12]
 8008d4c:	e012      	b.n	8008d74 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008d4e:	4b11      	ldr	r3, [pc, #68]	; (8008d94 <tcp_kill_timewait+0x5c>)
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6a1b      	ldr	r3, [r3, #32]
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d807      	bhi.n	8008d6e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008d5e:	4b0d      	ldr	r3, [pc, #52]	; (8008d94 <tcp_kill_timewait+0x5c>)
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6a1b      	ldr	r3, [r3, #32]
 8008d66:	1ad3      	subs	r3, r2, r3
 8008d68:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	60fb      	str	r3, [r7, #12]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1e9      	bne.n	8008d4e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d002      	beq.n	8008d86 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008d80:	68b8      	ldr	r0, [r7, #8]
 8008d82:	f7fe ffe5 	bl	8007d50 <tcp_abort>
  }
}
 8008d86:	bf00      	nop
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	20006810 	.word	0x20006810
 8008d94:	20006800 	.word	0x20006800

08008d98 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008d9e:	4b10      	ldr	r3, [pc, #64]	; (8008de0 <tcp_handle_closepend+0x48>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008da4:	e014      	b.n	8008dd0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	8b5b      	ldrh	r3, [r3, #26]
 8008db0:	f003 0308 	and.w	r3, r3, #8
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d009      	beq.n	8008dcc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	8b5b      	ldrh	r3, [r3, #26]
 8008dbc:	f023 0308 	bic.w	r3, r3, #8
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7fe fe6e 	bl	8007aa8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1e7      	bne.n	8008da6 <tcp_handle_closepend+0xe>
  }
}
 8008dd6:	bf00      	nop
 8008dd8:	bf00      	nop
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	2000680c 	.word	0x2000680c

08008de4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	4603      	mov	r3, r0
 8008dec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008dee:	2001      	movs	r0, #1
 8008df0:	f7fd fb64 	bl	80064bc <memp_malloc>
 8008df4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d126      	bne.n	8008e4a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008dfc:	f7ff ffcc 	bl	8008d98 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008e00:	f7ff ff9a 	bl	8008d38 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008e04:	2001      	movs	r0, #1
 8008e06:	f7fd fb59 	bl	80064bc <memp_malloc>
 8008e0a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d11b      	bne.n	8008e4a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008e12:	2009      	movs	r0, #9
 8008e14:	f7ff ff46 	bl	8008ca4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008e18:	2001      	movs	r0, #1
 8008e1a:	f7fd fb4f 	bl	80064bc <memp_malloc>
 8008e1e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d111      	bne.n	8008e4a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008e26:	2008      	movs	r0, #8
 8008e28:	f7ff ff3c 	bl	8008ca4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008e2c:	2001      	movs	r0, #1
 8008e2e:	f7fd fb45 	bl	80064bc <memp_malloc>
 8008e32:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d107      	bne.n	8008e4a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008e3a:	79fb      	ldrb	r3, [r7, #7]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7ff fee3 	bl	8008c08 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008e42:	2001      	movs	r0, #1
 8008e44:	f7fd fb3a 	bl	80064bc <memp_malloc>
 8008e48:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d03f      	beq.n	8008ed0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008e50:	229c      	movs	r2, #156	; 0x9c
 8008e52:	2100      	movs	r1, #0
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	f007 fb41 	bl	80104dc <memset>
    pcb->prio = prio;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	79fa      	ldrb	r2, [r7, #7]
 8008e5e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008e66:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008e70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	22ff      	movs	r2, #255	; 0xff
 8008e7e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008e86:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2206      	movs	r2, #6
 8008e8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2206      	movs	r2, #6
 8008e94:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e9c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008ea6:	4b0d      	ldr	r3, [pc, #52]	; (8008edc <tcp_alloc+0xf8>)
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008eae:	4b0c      	ldr	r3, [pc, #48]	; (8008ee0 <tcp_alloc+0xfc>)
 8008eb0:	781a      	ldrb	r2, [r3, #0]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008ebc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	4a08      	ldr	r2, [pc, #32]	; (8008ee4 <tcp_alloc+0x100>)
 8008ec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	4a07      	ldr	r2, [pc, #28]	; (8008ee8 <tcp_alloc+0x104>)
 8008ecc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	20006800 	.word	0x20006800
 8008ee0:	20006816 	.word	0x20006816
 8008ee4:	08008b9d 	.word	0x08008b9d
 8008ee8:	006ddd00 	.word	0x006ddd00

08008eec <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8008ef6:	2040      	movs	r0, #64	; 0x40
 8008ef8:	f7ff ff74 	bl	8008de4 <tcp_alloc>
 8008efc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8008efe:	68fb      	ldr	r3, [r7, #12]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d002      	beq.n	8008f1e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	611a      	str	r2, [r3, #16]
  }
}
 8008f1e:	bf00      	nop
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
	...

08008f2c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00e      	beq.n	8008f5a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	7d1b      	ldrb	r3, [r3, #20]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d106      	bne.n	8008f52 <tcp_recv+0x26>
 8008f44:	4b07      	ldr	r3, [pc, #28]	; (8008f64 <tcp_recv+0x38>)
 8008f46:	f240 72df 	movw	r2, #2015	; 0x7df
 8008f4a:	4907      	ldr	r1, [pc, #28]	; (8008f68 <tcp_recv+0x3c>)
 8008f4c:	4807      	ldr	r0, [pc, #28]	; (8008f6c <tcp_recv+0x40>)
 8008f4e:	f007 facd 	bl	80104ec <iprintf>
    pcb->recv = recv;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	683a      	ldr	r2, [r7, #0]
 8008f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8008f5a:	bf00      	nop
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	08012e54 	.word	0x08012e54
 8008f68:	080133f0 	.word	0x080133f0
 8008f6c:	08012e98 	.word	0x08012e98

08008f70 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00e      	beq.n	8008f9e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	7d1b      	ldrb	r3, [r3, #20]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d106      	bne.n	8008f96 <tcp_sent+0x26>
 8008f88:	4b07      	ldr	r3, [pc, #28]	; (8008fa8 <tcp_sent+0x38>)
 8008f8a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8008f8e:	4907      	ldr	r1, [pc, #28]	; (8008fac <tcp_sent+0x3c>)
 8008f90:	4807      	ldr	r0, [pc, #28]	; (8008fb0 <tcp_sent+0x40>)
 8008f92:	f007 faab 	bl	80104ec <iprintf>
    pcb->sent = sent;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8008f9e:	bf00      	nop
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	08012e54 	.word	0x08012e54
 8008fac:	08013418 	.word	0x08013418
 8008fb0:	08012e98 	.word	0x08012e98

08008fb4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00e      	beq.n	8008fe2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	7d1b      	ldrb	r3, [r3, #20]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d106      	bne.n	8008fda <tcp_err+0x26>
 8008fcc:	4b07      	ldr	r3, [pc, #28]	; (8008fec <tcp_err+0x38>)
 8008fce:	f640 020d 	movw	r2, #2061	; 0x80d
 8008fd2:	4907      	ldr	r1, [pc, #28]	; (8008ff0 <tcp_err+0x3c>)
 8008fd4:	4807      	ldr	r0, [pc, #28]	; (8008ff4 <tcp_err+0x40>)
 8008fd6:	f007 fa89 	bl	80104ec <iprintf>
    pcb->errf = err;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	683a      	ldr	r2, [r7, #0]
 8008fde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8008fe2:	bf00      	nop
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	08012e54 	.word	0x08012e54
 8008ff0:	08013440 	.word	0x08013440
 8008ff4:	08012e98 	.word	0x08012e98

08008ff8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	4613      	mov	r3, r2
 8009004:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d107      	bne.n	800901c <tcp_poll+0x24>
 800900c:	4b0e      	ldr	r3, [pc, #56]	; (8009048 <tcp_poll+0x50>)
 800900e:	f640 023d 	movw	r2, #2109	; 0x83d
 8009012:	490e      	ldr	r1, [pc, #56]	; (800904c <tcp_poll+0x54>)
 8009014:	480e      	ldr	r0, [pc, #56]	; (8009050 <tcp_poll+0x58>)
 8009016:	f007 fa69 	bl	80104ec <iprintf>
 800901a:	e011      	b.n	8009040 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	7d1b      	ldrb	r3, [r3, #20]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d106      	bne.n	8009032 <tcp_poll+0x3a>
 8009024:	4b08      	ldr	r3, [pc, #32]	; (8009048 <tcp_poll+0x50>)
 8009026:	f640 023e 	movw	r2, #2110	; 0x83e
 800902a:	490a      	ldr	r1, [pc, #40]	; (8009054 <tcp_poll+0x5c>)
 800902c:	4808      	ldr	r0, [pc, #32]	; (8009050 <tcp_poll+0x58>)
 800902e:	f007 fa5d 	bl	80104ec <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	68ba      	ldr	r2, [r7, #8]
 8009036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	79fa      	ldrb	r2, [r7, #7]
 800903e:	775a      	strb	r2, [r3, #29]
}
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	08012e54 	.word	0x08012e54
 800904c:	08013468 	.word	0x08013468
 8009050:	08012e98 	.word	0x08012e98
 8009054:	08013480 	.word	0x08013480

08009058 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d107      	bne.n	8009076 <tcp_pcb_purge+0x1e>
 8009066:	4b21      	ldr	r3, [pc, #132]	; (80090ec <tcp_pcb_purge+0x94>)
 8009068:	f640 0251 	movw	r2, #2129	; 0x851
 800906c:	4920      	ldr	r1, [pc, #128]	; (80090f0 <tcp_pcb_purge+0x98>)
 800906e:	4821      	ldr	r0, [pc, #132]	; (80090f4 <tcp_pcb_purge+0x9c>)
 8009070:	f007 fa3c 	bl	80104ec <iprintf>
 8009074:	e037      	b.n	80090e6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	7d1b      	ldrb	r3, [r3, #20]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d033      	beq.n	80090e6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009082:	2b0a      	cmp	r3, #10
 8009084:	d02f      	beq.n	80090e6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800908a:	2b01      	cmp	r3, #1
 800908c:	d02b      	beq.n	80090e6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009092:	2b00      	cmp	r3, #0
 8009094:	d007      	beq.n	80090a6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800909a:	4618      	mov	r0, r3
 800909c:	f7fe f86c 	bl	8007178 <pbuf_free>
      pcb->refused_data = NULL;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d002      	beq.n	80090b4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f986 	bl	80093c0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090ba:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7ff fd11 	bl	8008ae8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7ff fd0c 	bl	8008ae8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	66da      	str	r2, [r3, #108]	; 0x6c
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	08012e54 	.word	0x08012e54
 80090f0:	080134a0 	.word	0x080134a0
 80090f4:	08012e98 	.word	0x08012e98

080090f8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d106      	bne.n	8009116 <tcp_pcb_remove+0x1e>
 8009108:	4b3e      	ldr	r3, [pc, #248]	; (8009204 <tcp_pcb_remove+0x10c>)
 800910a:	f640 0283 	movw	r2, #2179	; 0x883
 800910e:	493e      	ldr	r1, [pc, #248]	; (8009208 <tcp_pcb_remove+0x110>)
 8009110:	483e      	ldr	r0, [pc, #248]	; (800920c <tcp_pcb_remove+0x114>)
 8009112:	f007 f9eb 	bl	80104ec <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d106      	bne.n	800912a <tcp_pcb_remove+0x32>
 800911c:	4b39      	ldr	r3, [pc, #228]	; (8009204 <tcp_pcb_remove+0x10c>)
 800911e:	f640 0284 	movw	r2, #2180	; 0x884
 8009122:	493b      	ldr	r1, [pc, #236]	; (8009210 <tcp_pcb_remove+0x118>)
 8009124:	4839      	ldr	r0, [pc, #228]	; (800920c <tcp_pcb_remove+0x114>)
 8009126:	f007 f9e1 	bl	80104ec <iprintf>

  TCP_RMV(pcblist, pcb);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	683a      	ldr	r2, [r7, #0]
 8009130:	429a      	cmp	r2, r3
 8009132:	d105      	bne.n	8009140 <tcp_pcb_remove+0x48>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68da      	ldr	r2, [r3, #12]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	601a      	str	r2, [r3, #0]
 800913e:	e013      	b.n	8009168 <tcp_pcb_remove+0x70>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	60fb      	str	r3, [r7, #12]
 8009146:	e00c      	b.n	8009162 <tcp_pcb_remove+0x6a>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	683a      	ldr	r2, [r7, #0]
 800914e:	429a      	cmp	r2, r3
 8009150:	d104      	bne.n	800915c <tcp_pcb_remove+0x64>
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	68da      	ldr	r2, [r3, #12]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	60da      	str	r2, [r3, #12]
 800915a:	e005      	b.n	8009168 <tcp_pcb_remove+0x70>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	60fb      	str	r3, [r7, #12]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1ef      	bne.n	8009148 <tcp_pcb_remove+0x50>
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2200      	movs	r2, #0
 800916c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800916e:	6838      	ldr	r0, [r7, #0]
 8009170:	f7ff ff72 	bl	8009058 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	7d1b      	ldrb	r3, [r3, #20]
 8009178:	2b0a      	cmp	r3, #10
 800917a:	d013      	beq.n	80091a4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009180:	2b01      	cmp	r3, #1
 8009182:	d00f      	beq.n	80091a4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	8b5b      	ldrh	r3, [r3, #26]
 8009188:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800918c:	2b00      	cmp	r3, #0
 800918e:	d009      	beq.n	80091a4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	8b5b      	ldrh	r3, [r3, #26]
 8009194:	f043 0302 	orr.w	r3, r3, #2
 8009198:	b29a      	uxth	r2, r3
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800919e:	6838      	ldr	r0, [r7, #0]
 80091a0:	f003 fbc6 	bl	800c930 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	7d1b      	ldrb	r3, [r3, #20]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d020      	beq.n	80091ee <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d006      	beq.n	80091c2 <tcp_pcb_remove+0xca>
 80091b4:	4b13      	ldr	r3, [pc, #76]	; (8009204 <tcp_pcb_remove+0x10c>)
 80091b6:	f640 0293 	movw	r2, #2195	; 0x893
 80091ba:	4916      	ldr	r1, [pc, #88]	; (8009214 <tcp_pcb_remove+0x11c>)
 80091bc:	4813      	ldr	r0, [pc, #76]	; (800920c <tcp_pcb_remove+0x114>)
 80091be:	f007 f995 	bl	80104ec <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d006      	beq.n	80091d8 <tcp_pcb_remove+0xe0>
 80091ca:	4b0e      	ldr	r3, [pc, #56]	; (8009204 <tcp_pcb_remove+0x10c>)
 80091cc:	f640 0294 	movw	r2, #2196	; 0x894
 80091d0:	4911      	ldr	r1, [pc, #68]	; (8009218 <tcp_pcb_remove+0x120>)
 80091d2:	480e      	ldr	r0, [pc, #56]	; (800920c <tcp_pcb_remove+0x114>)
 80091d4:	f007 f98a 	bl	80104ec <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d006      	beq.n	80091ee <tcp_pcb_remove+0xf6>
 80091e0:	4b08      	ldr	r3, [pc, #32]	; (8009204 <tcp_pcb_remove+0x10c>)
 80091e2:	f640 0296 	movw	r2, #2198	; 0x896
 80091e6:	490d      	ldr	r1, [pc, #52]	; (800921c <tcp_pcb_remove+0x124>)
 80091e8:	4808      	ldr	r0, [pc, #32]	; (800920c <tcp_pcb_remove+0x114>)
 80091ea:	f007 f97f 	bl	80104ec <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	2200      	movs	r2, #0
 80091f2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	2200      	movs	r2, #0
 80091f8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80091fa:	bf00      	nop
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	08012e54 	.word	0x08012e54
 8009208:	080134bc 	.word	0x080134bc
 800920c:	08012e98 	.word	0x08012e98
 8009210:	080134d8 	.word	0x080134d8
 8009214:	080134f8 	.word	0x080134f8
 8009218:	08013510 	.word	0x08013510
 800921c:	0801352c 	.word	0x0801352c

08009220 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d106      	bne.n	800923c <tcp_next_iss+0x1c>
 800922e:	4b0a      	ldr	r3, [pc, #40]	; (8009258 <tcp_next_iss+0x38>)
 8009230:	f640 02af 	movw	r2, #2223	; 0x8af
 8009234:	4909      	ldr	r1, [pc, #36]	; (800925c <tcp_next_iss+0x3c>)
 8009236:	480a      	ldr	r0, [pc, #40]	; (8009260 <tcp_next_iss+0x40>)
 8009238:	f007 f958 	bl	80104ec <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800923c:	4b09      	ldr	r3, [pc, #36]	; (8009264 <tcp_next_iss+0x44>)
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	4b09      	ldr	r3, [pc, #36]	; (8009268 <tcp_next_iss+0x48>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4413      	add	r3, r2
 8009246:	4a07      	ldr	r2, [pc, #28]	; (8009264 <tcp_next_iss+0x44>)
 8009248:	6013      	str	r3, [r2, #0]
  return iss;
 800924a:	4b06      	ldr	r3, [pc, #24]	; (8009264 <tcp_next_iss+0x44>)
 800924c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800924e:	4618      	mov	r0, r3
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	08012e54 	.word	0x08012e54
 800925c:	08013544 	.word	0x08013544
 8009260:	08012e98 	.word	0x08012e98
 8009264:	2000000c 	.word	0x2000000c
 8009268:	20006800 	.word	0x20006800

0800926c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b086      	sub	sp, #24
 8009270:	af00      	add	r7, sp, #0
 8009272:	4603      	mov	r3, r0
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
 8009278:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d106      	bne.n	800928e <tcp_eff_send_mss_netif+0x22>
 8009280:	4b14      	ldr	r3, [pc, #80]	; (80092d4 <tcp_eff_send_mss_netif+0x68>)
 8009282:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009286:	4914      	ldr	r1, [pc, #80]	; (80092d8 <tcp_eff_send_mss_netif+0x6c>)
 8009288:	4814      	ldr	r0, [pc, #80]	; (80092dc <tcp_eff_send_mss_netif+0x70>)
 800928a:	f007 f92f 	bl	80104ec <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d101      	bne.n	8009298 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009294:	89fb      	ldrh	r3, [r7, #14]
 8009296:	e019      	b.n	80092cc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800929c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800929e:	8afb      	ldrh	r3, [r7, #22]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d012      	beq.n	80092ca <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80092a4:	2328      	movs	r3, #40	; 0x28
 80092a6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80092a8:	8afa      	ldrh	r2, [r7, #22]
 80092aa:	8abb      	ldrh	r3, [r7, #20]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d904      	bls.n	80092ba <tcp_eff_send_mss_netif+0x4e>
 80092b0:	8afa      	ldrh	r2, [r7, #22]
 80092b2:	8abb      	ldrh	r3, [r7, #20]
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	e000      	b.n	80092bc <tcp_eff_send_mss_netif+0x50>
 80092ba:	2300      	movs	r3, #0
 80092bc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80092be:	8a7a      	ldrh	r2, [r7, #18]
 80092c0:	89fb      	ldrh	r3, [r7, #14]
 80092c2:	4293      	cmp	r3, r2
 80092c4:	bf28      	it	cs
 80092c6:	4613      	movcs	r3, r2
 80092c8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80092ca:	89fb      	ldrh	r3, [r7, #14]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3718      	adds	r7, #24
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	08012e54 	.word	0x08012e54
 80092d8:	08013560 	.word	0x08013560
 80092dc:	08012e98 	.word	0x08012e98

080092e0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d119      	bne.n	8009328 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80092f4:	4b10      	ldr	r3, [pc, #64]	; (8009338 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80092f6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80092fa:	4910      	ldr	r1, [pc, #64]	; (800933c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80092fc:	4810      	ldr	r0, [pc, #64]	; (8009340 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80092fe:	f007 f8f5 	bl	80104ec <iprintf>

  while (pcb != NULL) {
 8009302:	e011      	b.n	8009328 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	429a      	cmp	r2, r3
 800930e:	d108      	bne.n	8009322 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f7fe fd1a 	bl	8007d50 <tcp_abort>
      pcb = next;
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	60fb      	str	r3, [r7, #12]
 8009320:	e002      	b.n	8009328 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d1ea      	bne.n	8009304 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800932e:	bf00      	nop
 8009330:	bf00      	nop
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	08012e54 	.word	0x08012e54
 800933c:	08013588 	.word	0x08013588
 8009340:	08012e98 	.word	0x08012e98

08009344 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d02a      	beq.n	80093aa <tcp_netif_ip_addr_changed+0x66>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d026      	beq.n	80093aa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800935c:	4b15      	ldr	r3, [pc, #84]	; (80093b4 <tcp_netif_ip_addr_changed+0x70>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4619      	mov	r1, r3
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f7ff ffbc 	bl	80092e0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009368:	4b13      	ldr	r3, [pc, #76]	; (80093b8 <tcp_netif_ip_addr_changed+0x74>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4619      	mov	r1, r3
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f7ff ffb6 	bl	80092e0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d017      	beq.n	80093aa <tcp_netif_ip_addr_changed+0x66>
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d013      	beq.n	80093aa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009382:	4b0e      	ldr	r3, [pc, #56]	; (80093bc <tcp_netif_ip_addr_changed+0x78>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	60fb      	str	r3, [r7, #12]
 8009388:	e00c      	b.n	80093a4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	429a      	cmp	r2, r3
 8009394:	d103      	bne.n	800939e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	60fb      	str	r3, [r7, #12]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1ef      	bne.n	800938a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80093aa:	bf00      	nop
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	2000680c 	.word	0x2000680c
 80093b8:	20006804 	.word	0x20006804
 80093bc:	20006808 	.word	0x20006808

080093c0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d007      	beq.n	80093e0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7ff fb87 	bl	8008ae8 <tcp_segs_free>
    pcb->ooseq = NULL;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80093e0:	bf00      	nop
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80093e8:	b590      	push	{r4, r7, lr}
 80093ea:	b08d      	sub	sp, #52	; 0x34
 80093ec:	af04      	add	r7, sp, #16
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d105      	bne.n	8009404 <tcp_input+0x1c>
 80093f8:	4b9b      	ldr	r3, [pc, #620]	; (8009668 <tcp_input+0x280>)
 80093fa:	2283      	movs	r2, #131	; 0x83
 80093fc:	499b      	ldr	r1, [pc, #620]	; (800966c <tcp_input+0x284>)
 80093fe:	489c      	ldr	r0, [pc, #624]	; (8009670 <tcp_input+0x288>)
 8009400:	f007 f874 	bl	80104ec <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	4a9a      	ldr	r2, [pc, #616]	; (8009674 <tcp_input+0x28c>)
 800940a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	895b      	ldrh	r3, [r3, #10]
 8009410:	2b13      	cmp	r3, #19
 8009412:	f240 83d1 	bls.w	8009bb8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009416:	4b98      	ldr	r3, [pc, #608]	; (8009678 <tcp_input+0x290>)
 8009418:	695b      	ldr	r3, [r3, #20]
 800941a:	4a97      	ldr	r2, [pc, #604]	; (8009678 <tcp_input+0x290>)
 800941c:	6812      	ldr	r2, [r2, #0]
 800941e:	4611      	mov	r1, r2
 8009420:	4618      	mov	r0, r3
 8009422:	f006 f8a9 	bl	800f578 <ip4_addr_isbroadcast_u32>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	f040 83c7 	bne.w	8009bbc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800942e:	4b92      	ldr	r3, [pc, #584]	; (8009678 <tcp_input+0x290>)
 8009430:	695b      	ldr	r3, [r3, #20]
 8009432:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009436:	2be0      	cmp	r3, #224	; 0xe0
 8009438:	f000 83c0 	beq.w	8009bbc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800943c:	4b8d      	ldr	r3, [pc, #564]	; (8009674 <tcp_input+0x28c>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	899b      	ldrh	r3, [r3, #12]
 8009442:	b29b      	uxth	r3, r3
 8009444:	4618      	mov	r0, r3
 8009446:	f7fc fbbb 	bl	8005bc0 <lwip_htons>
 800944a:	4603      	mov	r3, r0
 800944c:	0b1b      	lsrs	r3, r3, #12
 800944e:	b29b      	uxth	r3, r3
 8009450:	b2db      	uxtb	r3, r3
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009456:	7cbb      	ldrb	r3, [r7, #18]
 8009458:	2b13      	cmp	r3, #19
 800945a:	f240 83b1 	bls.w	8009bc0 <tcp_input+0x7d8>
 800945e:	7cbb      	ldrb	r3, [r7, #18]
 8009460:	b29a      	uxth	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	891b      	ldrh	r3, [r3, #8]
 8009466:	429a      	cmp	r2, r3
 8009468:	f200 83aa 	bhi.w	8009bc0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800946c:	7cbb      	ldrb	r3, [r7, #18]
 800946e:	b29b      	uxth	r3, r3
 8009470:	3b14      	subs	r3, #20
 8009472:	b29a      	uxth	r2, r3
 8009474:	4b81      	ldr	r3, [pc, #516]	; (800967c <tcp_input+0x294>)
 8009476:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009478:	4b81      	ldr	r3, [pc, #516]	; (8009680 <tcp_input+0x298>)
 800947a:	2200      	movs	r2, #0
 800947c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	895a      	ldrh	r2, [r3, #10]
 8009482:	7cbb      	ldrb	r3, [r7, #18]
 8009484:	b29b      	uxth	r3, r3
 8009486:	429a      	cmp	r2, r3
 8009488:	d309      	bcc.n	800949e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800948a:	4b7c      	ldr	r3, [pc, #496]	; (800967c <tcp_input+0x294>)
 800948c:	881a      	ldrh	r2, [r3, #0]
 800948e:	4b7d      	ldr	r3, [pc, #500]	; (8009684 <tcp_input+0x29c>)
 8009490:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009492:	7cbb      	ldrb	r3, [r7, #18]
 8009494:	4619      	mov	r1, r3
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f7fd fde8 	bl	800706c <pbuf_remove_header>
 800949c:	e04e      	b.n	800953c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d105      	bne.n	80094b2 <tcp_input+0xca>
 80094a6:	4b70      	ldr	r3, [pc, #448]	; (8009668 <tcp_input+0x280>)
 80094a8:	22c2      	movs	r2, #194	; 0xc2
 80094aa:	4977      	ldr	r1, [pc, #476]	; (8009688 <tcp_input+0x2a0>)
 80094ac:	4870      	ldr	r0, [pc, #448]	; (8009670 <tcp_input+0x288>)
 80094ae:	f007 f81d 	bl	80104ec <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80094b2:	2114      	movs	r1, #20
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7fd fdd9 	bl	800706c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	895a      	ldrh	r2, [r3, #10]
 80094be:	4b71      	ldr	r3, [pc, #452]	; (8009684 <tcp_input+0x29c>)
 80094c0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80094c2:	4b6e      	ldr	r3, [pc, #440]	; (800967c <tcp_input+0x294>)
 80094c4:	881a      	ldrh	r2, [r3, #0]
 80094c6:	4b6f      	ldr	r3, [pc, #444]	; (8009684 <tcp_input+0x29c>)
 80094c8:	881b      	ldrh	r3, [r3, #0]
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80094ce:	4b6d      	ldr	r3, [pc, #436]	; (8009684 <tcp_input+0x29c>)
 80094d0:	881b      	ldrh	r3, [r3, #0]
 80094d2:	4619      	mov	r1, r3
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f7fd fdc9 	bl	800706c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	895b      	ldrh	r3, [r3, #10]
 80094e0:	8a3a      	ldrh	r2, [r7, #16]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	f200 836e 	bhi.w	8009bc4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	4a64      	ldr	r2, [pc, #400]	; (8009680 <tcp_input+0x298>)
 80094f0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	8a3a      	ldrh	r2, [r7, #16]
 80094f8:	4611      	mov	r1, r2
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fd fdb6 	bl	800706c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	891a      	ldrh	r2, [r3, #8]
 8009504:	8a3b      	ldrh	r3, [r7, #16]
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	b29a      	uxth	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	895b      	ldrh	r3, [r3, #10]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d005      	beq.n	8009522 <tcp_input+0x13a>
 8009516:	4b54      	ldr	r3, [pc, #336]	; (8009668 <tcp_input+0x280>)
 8009518:	22df      	movs	r2, #223	; 0xdf
 800951a:	495c      	ldr	r1, [pc, #368]	; (800968c <tcp_input+0x2a4>)
 800951c:	4854      	ldr	r0, [pc, #336]	; (8009670 <tcp_input+0x288>)
 800951e:	f006 ffe5 	bl	80104ec <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	891a      	ldrh	r2, [r3, #8]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	891b      	ldrh	r3, [r3, #8]
 800952c:	429a      	cmp	r2, r3
 800952e:	d005      	beq.n	800953c <tcp_input+0x154>
 8009530:	4b4d      	ldr	r3, [pc, #308]	; (8009668 <tcp_input+0x280>)
 8009532:	22e0      	movs	r2, #224	; 0xe0
 8009534:	4956      	ldr	r1, [pc, #344]	; (8009690 <tcp_input+0x2a8>)
 8009536:	484e      	ldr	r0, [pc, #312]	; (8009670 <tcp_input+0x288>)
 8009538:	f006 ffd8 	bl	80104ec <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800953c:	4b4d      	ldr	r3, [pc, #308]	; (8009674 <tcp_input+0x28c>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	881b      	ldrh	r3, [r3, #0]
 8009542:	b29b      	uxth	r3, r3
 8009544:	4a4b      	ldr	r2, [pc, #300]	; (8009674 <tcp_input+0x28c>)
 8009546:	6814      	ldr	r4, [r2, #0]
 8009548:	4618      	mov	r0, r3
 800954a:	f7fc fb39 	bl	8005bc0 <lwip_htons>
 800954e:	4603      	mov	r3, r0
 8009550:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009552:	4b48      	ldr	r3, [pc, #288]	; (8009674 <tcp_input+0x28c>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	885b      	ldrh	r3, [r3, #2]
 8009558:	b29b      	uxth	r3, r3
 800955a:	4a46      	ldr	r2, [pc, #280]	; (8009674 <tcp_input+0x28c>)
 800955c:	6814      	ldr	r4, [r2, #0]
 800955e:	4618      	mov	r0, r3
 8009560:	f7fc fb2e 	bl	8005bc0 <lwip_htons>
 8009564:	4603      	mov	r3, r0
 8009566:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009568:	4b42      	ldr	r3, [pc, #264]	; (8009674 <tcp_input+0x28c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	4a41      	ldr	r2, [pc, #260]	; (8009674 <tcp_input+0x28c>)
 8009570:	6814      	ldr	r4, [r2, #0]
 8009572:	4618      	mov	r0, r3
 8009574:	f7fc fb39 	bl	8005bea <lwip_htonl>
 8009578:	4603      	mov	r3, r0
 800957a:	6063      	str	r3, [r4, #4]
 800957c:	6863      	ldr	r3, [r4, #4]
 800957e:	4a45      	ldr	r2, [pc, #276]	; (8009694 <tcp_input+0x2ac>)
 8009580:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009582:	4b3c      	ldr	r3, [pc, #240]	; (8009674 <tcp_input+0x28c>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	4a3a      	ldr	r2, [pc, #232]	; (8009674 <tcp_input+0x28c>)
 800958a:	6814      	ldr	r4, [r2, #0]
 800958c:	4618      	mov	r0, r3
 800958e:	f7fc fb2c 	bl	8005bea <lwip_htonl>
 8009592:	4603      	mov	r3, r0
 8009594:	60a3      	str	r3, [r4, #8]
 8009596:	68a3      	ldr	r3, [r4, #8]
 8009598:	4a3f      	ldr	r2, [pc, #252]	; (8009698 <tcp_input+0x2b0>)
 800959a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800959c:	4b35      	ldr	r3, [pc, #212]	; (8009674 <tcp_input+0x28c>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	89db      	ldrh	r3, [r3, #14]
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	4a33      	ldr	r2, [pc, #204]	; (8009674 <tcp_input+0x28c>)
 80095a6:	6814      	ldr	r4, [r2, #0]
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7fc fb09 	bl	8005bc0 <lwip_htons>
 80095ae:	4603      	mov	r3, r0
 80095b0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80095b2:	4b30      	ldr	r3, [pc, #192]	; (8009674 <tcp_input+0x28c>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	899b      	ldrh	r3, [r3, #12]
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7fc fb00 	bl	8005bc0 <lwip_htons>
 80095c0:	4603      	mov	r3, r0
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	4b34      	ldr	r3, [pc, #208]	; (800969c <tcp_input+0x2b4>)
 80095cc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	891a      	ldrh	r2, [r3, #8]
 80095d2:	4b33      	ldr	r3, [pc, #204]	; (80096a0 <tcp_input+0x2b8>)
 80095d4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80095d6:	4b31      	ldr	r3, [pc, #196]	; (800969c <tcp_input+0x2b4>)
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	f003 0303 	and.w	r3, r3, #3
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00c      	beq.n	80095fc <tcp_input+0x214>
    tcplen++;
 80095e2:	4b2f      	ldr	r3, [pc, #188]	; (80096a0 <tcp_input+0x2b8>)
 80095e4:	881b      	ldrh	r3, [r3, #0]
 80095e6:	3301      	adds	r3, #1
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	4b2d      	ldr	r3, [pc, #180]	; (80096a0 <tcp_input+0x2b8>)
 80095ec:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	891a      	ldrh	r2, [r3, #8]
 80095f2:	4b2b      	ldr	r3, [pc, #172]	; (80096a0 <tcp_input+0x2b8>)
 80095f4:	881b      	ldrh	r3, [r3, #0]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	f200 82e6 	bhi.w	8009bc8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80095fc:	2300      	movs	r3, #0
 80095fe:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009600:	4b28      	ldr	r3, [pc, #160]	; (80096a4 <tcp_input+0x2bc>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	61fb      	str	r3, [r7, #28]
 8009606:	e09d      	b.n	8009744 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	7d1b      	ldrb	r3, [r3, #20]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d105      	bne.n	800961c <tcp_input+0x234>
 8009610:	4b15      	ldr	r3, [pc, #84]	; (8009668 <tcp_input+0x280>)
 8009612:	22fb      	movs	r2, #251	; 0xfb
 8009614:	4924      	ldr	r1, [pc, #144]	; (80096a8 <tcp_input+0x2c0>)
 8009616:	4816      	ldr	r0, [pc, #88]	; (8009670 <tcp_input+0x288>)
 8009618:	f006 ff68 	bl	80104ec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	7d1b      	ldrb	r3, [r3, #20]
 8009620:	2b0a      	cmp	r3, #10
 8009622:	d105      	bne.n	8009630 <tcp_input+0x248>
 8009624:	4b10      	ldr	r3, [pc, #64]	; (8009668 <tcp_input+0x280>)
 8009626:	22fc      	movs	r2, #252	; 0xfc
 8009628:	4920      	ldr	r1, [pc, #128]	; (80096ac <tcp_input+0x2c4>)
 800962a:	4811      	ldr	r0, [pc, #68]	; (8009670 <tcp_input+0x288>)
 800962c:	f006 ff5e 	bl	80104ec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	7d1b      	ldrb	r3, [r3, #20]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d105      	bne.n	8009644 <tcp_input+0x25c>
 8009638:	4b0b      	ldr	r3, [pc, #44]	; (8009668 <tcp_input+0x280>)
 800963a:	22fd      	movs	r2, #253	; 0xfd
 800963c:	491c      	ldr	r1, [pc, #112]	; (80096b0 <tcp_input+0x2c8>)
 800963e:	480c      	ldr	r0, [pc, #48]	; (8009670 <tcp_input+0x288>)
 8009640:	f006 ff54 	bl	80104ec <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	7a1b      	ldrb	r3, [r3, #8]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d033      	beq.n	80096b4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	7a1a      	ldrb	r2, [r3, #8]
 8009650:	4b09      	ldr	r3, [pc, #36]	; (8009678 <tcp_input+0x290>)
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009658:	3301      	adds	r3, #1
 800965a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800965c:	429a      	cmp	r2, r3
 800965e:	d029      	beq.n	80096b4 <tcp_input+0x2cc>
      prev = pcb;
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	61bb      	str	r3, [r7, #24]
      continue;
 8009664:	e06b      	b.n	800973e <tcp_input+0x356>
 8009666:	bf00      	nop
 8009668:	080135bc 	.word	0x080135bc
 800966c:	080135f0 	.word	0x080135f0
 8009670:	08013608 	.word	0x08013608
 8009674:	20006828 	.word	0x20006828
 8009678:	20003290 	.word	0x20003290
 800967c:	2000682c 	.word	0x2000682c
 8009680:	20006830 	.word	0x20006830
 8009684:	2000682e 	.word	0x2000682e
 8009688:	08013630 	.word	0x08013630
 800968c:	08013640 	.word	0x08013640
 8009690:	0801364c 	.word	0x0801364c
 8009694:	20006838 	.word	0x20006838
 8009698:	2000683c 	.word	0x2000683c
 800969c:	20006844 	.word	0x20006844
 80096a0:	20006842 	.word	0x20006842
 80096a4:	2000680c 	.word	0x2000680c
 80096a8:	0801366c 	.word	0x0801366c
 80096ac:	08013694 	.word	0x08013694
 80096b0:	080136c0 	.word	0x080136c0
    }

    if (pcb->remote_port == tcphdr->src &&
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	8b1a      	ldrh	r2, [r3, #24]
 80096b8:	4b72      	ldr	r3, [pc, #456]	; (8009884 <tcp_input+0x49c>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	881b      	ldrh	r3, [r3, #0]
 80096be:	b29b      	uxth	r3, r3
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d13a      	bne.n	800973a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	8ada      	ldrh	r2, [r3, #22]
 80096c8:	4b6e      	ldr	r3, [pc, #440]	; (8009884 <tcp_input+0x49c>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	885b      	ldrh	r3, [r3, #2]
 80096ce:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d132      	bne.n	800973a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	685a      	ldr	r2, [r3, #4]
 80096d8:	4b6b      	ldr	r3, [pc, #428]	; (8009888 <tcp_input+0x4a0>)
 80096da:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80096dc:	429a      	cmp	r2, r3
 80096de:	d12c      	bne.n	800973a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	4b68      	ldr	r3, [pc, #416]	; (8009888 <tcp_input+0x4a0>)
 80096e6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d126      	bne.n	800973a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	69fa      	ldr	r2, [r7, #28]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d106      	bne.n	8009704 <tcp_input+0x31c>
 80096f6:	4b65      	ldr	r3, [pc, #404]	; (800988c <tcp_input+0x4a4>)
 80096f8:	f240 120d 	movw	r2, #269	; 0x10d
 80096fc:	4964      	ldr	r1, [pc, #400]	; (8009890 <tcp_input+0x4a8>)
 80096fe:	4865      	ldr	r0, [pc, #404]	; (8009894 <tcp_input+0x4ac>)
 8009700:	f006 fef4 	bl	80104ec <iprintf>
      if (prev != NULL) {
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00a      	beq.n	8009720 <tcp_input+0x338>
        prev->next = pcb->next;
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	68da      	ldr	r2, [r3, #12]
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009712:	4b61      	ldr	r3, [pc, #388]	; (8009898 <tcp_input+0x4b0>)
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800971a:	4a5f      	ldr	r2, [pc, #380]	; (8009898 <tcp_input+0x4b0>)
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	69fa      	ldr	r2, [r7, #28]
 8009726:	429a      	cmp	r2, r3
 8009728:	d111      	bne.n	800974e <tcp_input+0x366>
 800972a:	4b58      	ldr	r3, [pc, #352]	; (800988c <tcp_input+0x4a4>)
 800972c:	f240 1215 	movw	r2, #277	; 0x115
 8009730:	495a      	ldr	r1, [pc, #360]	; (800989c <tcp_input+0x4b4>)
 8009732:	4858      	ldr	r0, [pc, #352]	; (8009894 <tcp_input+0x4ac>)
 8009734:	f006 feda 	bl	80104ec <iprintf>
      break;
 8009738:	e009      	b.n	800974e <tcp_input+0x366>
    }
    prev = pcb;
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	61fb      	str	r3, [r7, #28]
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	2b00      	cmp	r3, #0
 8009748:	f47f af5e 	bne.w	8009608 <tcp_input+0x220>
 800974c:	e000      	b.n	8009750 <tcp_input+0x368>
      break;
 800974e:	bf00      	nop
  }

  if (pcb == NULL) {
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	2b00      	cmp	r3, #0
 8009754:	f040 80aa 	bne.w	80098ac <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009758:	4b51      	ldr	r3, [pc, #324]	; (80098a0 <tcp_input+0x4b8>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	61fb      	str	r3, [r7, #28]
 800975e:	e03f      	b.n	80097e0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	7d1b      	ldrb	r3, [r3, #20]
 8009764:	2b0a      	cmp	r3, #10
 8009766:	d006      	beq.n	8009776 <tcp_input+0x38e>
 8009768:	4b48      	ldr	r3, [pc, #288]	; (800988c <tcp_input+0x4a4>)
 800976a:	f240 121f 	movw	r2, #287	; 0x11f
 800976e:	494d      	ldr	r1, [pc, #308]	; (80098a4 <tcp_input+0x4bc>)
 8009770:	4848      	ldr	r0, [pc, #288]	; (8009894 <tcp_input+0x4ac>)
 8009772:	f006 febb 	bl	80104ec <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	7a1b      	ldrb	r3, [r3, #8]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d009      	beq.n	8009792 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	7a1a      	ldrb	r2, [r3, #8]
 8009782:	4b41      	ldr	r3, [pc, #260]	; (8009888 <tcp_input+0x4a0>)
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800978a:	3301      	adds	r3, #1
 800978c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800978e:	429a      	cmp	r2, r3
 8009790:	d122      	bne.n	80097d8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	8b1a      	ldrh	r2, [r3, #24]
 8009796:	4b3b      	ldr	r3, [pc, #236]	; (8009884 <tcp_input+0x49c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	881b      	ldrh	r3, [r3, #0]
 800979c:	b29b      	uxth	r3, r3
 800979e:	429a      	cmp	r2, r3
 80097a0:	d11b      	bne.n	80097da <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	8ada      	ldrh	r2, [r3, #22]
 80097a6:	4b37      	ldr	r3, [pc, #220]	; (8009884 <tcp_input+0x49c>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	885b      	ldrh	r3, [r3, #2]
 80097ac:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d113      	bne.n	80097da <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	4b34      	ldr	r3, [pc, #208]	; (8009888 <tcp_input+0x4a0>)
 80097b8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d10d      	bne.n	80097da <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	4b31      	ldr	r3, [pc, #196]	; (8009888 <tcp_input+0x4a0>)
 80097c4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d107      	bne.n	80097da <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80097ca:	69f8      	ldr	r0, [r7, #28]
 80097cc:	f000 fb56 	bl	8009e7c <tcp_timewait_input>
        }
        pbuf_free(p);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f7fd fcd1 	bl	8007178 <pbuf_free>
        return;
 80097d6:	e1fd      	b.n	8009bd4 <tcp_input+0x7ec>
        continue;
 80097d8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	61fb      	str	r3, [r7, #28]
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1bc      	bne.n	8009760 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80097e6:	2300      	movs	r3, #0
 80097e8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80097ea:	4b2f      	ldr	r3, [pc, #188]	; (80098a8 <tcp_input+0x4c0>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	617b      	str	r3, [r7, #20]
 80097f0:	e02a      	b.n	8009848 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	7a1b      	ldrb	r3, [r3, #8]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00c      	beq.n	8009814 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	7a1a      	ldrb	r2, [r3, #8]
 80097fe:	4b22      	ldr	r3, [pc, #136]	; (8009888 <tcp_input+0x4a0>)
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009806:	3301      	adds	r3, #1
 8009808:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800980a:	429a      	cmp	r2, r3
 800980c:	d002      	beq.n	8009814 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	61bb      	str	r3, [r7, #24]
        continue;
 8009812:	e016      	b.n	8009842 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	8ada      	ldrh	r2, [r3, #22]
 8009818:	4b1a      	ldr	r3, [pc, #104]	; (8009884 <tcp_input+0x49c>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	885b      	ldrh	r3, [r3, #2]
 800981e:	b29b      	uxth	r3, r3
 8009820:	429a      	cmp	r2, r3
 8009822:	d10c      	bne.n	800983e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	4b17      	ldr	r3, [pc, #92]	; (8009888 <tcp_input+0x4a0>)
 800982a:	695b      	ldr	r3, [r3, #20]
 800982c:	429a      	cmp	r2, r3
 800982e:	d00f      	beq.n	8009850 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00d      	beq.n	8009852 <tcp_input+0x46a>
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d009      	beq.n	8009852 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	617b      	str	r3, [r7, #20]
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1d1      	bne.n	80097f2 <tcp_input+0x40a>
 800984e:	e000      	b.n	8009852 <tcp_input+0x46a>
            break;
 8009850:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d029      	beq.n	80098ac <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00a      	beq.n	8009874 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	68da      	ldr	r2, [r3, #12]
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009866:	4b10      	ldr	r3, [pc, #64]	; (80098a8 <tcp_input+0x4c0>)
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800986e:	4a0e      	ldr	r2, [pc, #56]	; (80098a8 <tcp_input+0x4c0>)
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009874:	6978      	ldr	r0, [r7, #20]
 8009876:	f000 fa03 	bl	8009c80 <tcp_listen_input>
      }
      pbuf_free(p);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f7fd fc7c 	bl	8007178 <pbuf_free>
      return;
 8009880:	e1a8      	b.n	8009bd4 <tcp_input+0x7ec>
 8009882:	bf00      	nop
 8009884:	20006828 	.word	0x20006828
 8009888:	20003290 	.word	0x20003290
 800988c:	080135bc 	.word	0x080135bc
 8009890:	080136e8 	.word	0x080136e8
 8009894:	08013608 	.word	0x08013608
 8009898:	2000680c 	.word	0x2000680c
 800989c:	08013714 	.word	0x08013714
 80098a0:	20006810 	.word	0x20006810
 80098a4:	08013740 	.word	0x08013740
 80098a8:	20006808 	.word	0x20006808
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f000 8158 	beq.w	8009b64 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80098b4:	4b95      	ldr	r3, [pc, #596]	; (8009b0c <tcp_input+0x724>)
 80098b6:	2200      	movs	r2, #0
 80098b8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	891a      	ldrh	r2, [r3, #8]
 80098be:	4b93      	ldr	r3, [pc, #588]	; (8009b0c <tcp_input+0x724>)
 80098c0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80098c2:	4a92      	ldr	r2, [pc, #584]	; (8009b0c <tcp_input+0x724>)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80098c8:	4b91      	ldr	r3, [pc, #580]	; (8009b10 <tcp_input+0x728>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a8f      	ldr	r2, [pc, #572]	; (8009b0c <tcp_input+0x724>)
 80098ce:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80098d0:	4b90      	ldr	r3, [pc, #576]	; (8009b14 <tcp_input+0x72c>)
 80098d2:	2200      	movs	r2, #0
 80098d4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80098d6:	4b90      	ldr	r3, [pc, #576]	; (8009b18 <tcp_input+0x730>)
 80098d8:	2200      	movs	r2, #0
 80098da:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80098dc:	4b8f      	ldr	r3, [pc, #572]	; (8009b1c <tcp_input+0x734>)
 80098de:	2200      	movs	r2, #0
 80098e0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80098e2:	4b8f      	ldr	r3, [pc, #572]	; (8009b20 <tcp_input+0x738>)
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	f003 0308 	and.w	r3, r3, #8
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d006      	beq.n	80098fc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	7b5b      	ldrb	r3, [r3, #13]
 80098f2:	f043 0301 	orr.w	r3, r3, #1
 80098f6:	b2da      	uxtb	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009900:	2b00      	cmp	r3, #0
 8009902:	d017      	beq.n	8009934 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009904:	69f8      	ldr	r0, [r7, #28]
 8009906:	f7ff f873 	bl	80089f0 <tcp_process_refused_data>
 800990a:	4603      	mov	r3, r0
 800990c:	f113 0f0d 	cmn.w	r3, #13
 8009910:	d007      	beq.n	8009922 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00c      	beq.n	8009934 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800991a:	4b82      	ldr	r3, [pc, #520]	; (8009b24 <tcp_input+0x73c>)
 800991c:	881b      	ldrh	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d008      	beq.n	8009934 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009926:	2b00      	cmp	r3, #0
 8009928:	f040 80e3 	bne.w	8009af2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800992c:	69f8      	ldr	r0, [r7, #28]
 800992e:	f003 fe05 	bl	800d53c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009932:	e0de      	b.n	8009af2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8009934:	4a7c      	ldr	r2, [pc, #496]	; (8009b28 <tcp_input+0x740>)
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800993a:	69f8      	ldr	r0, [r7, #28]
 800993c:	f000 fb18 	bl	8009f70 <tcp_process>
 8009940:	4603      	mov	r3, r0
 8009942:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009944:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009948:	f113 0f0d 	cmn.w	r3, #13
 800994c:	f000 80d3 	beq.w	8009af6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8009950:	4b71      	ldr	r3, [pc, #452]	; (8009b18 <tcp_input+0x730>)
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	f003 0308 	and.w	r3, r3, #8
 8009958:	2b00      	cmp	r3, #0
 800995a:	d015      	beq.n	8009988 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009962:	2b00      	cmp	r3, #0
 8009964:	d008      	beq.n	8009978 <tcp_input+0x590>
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800996c:	69fa      	ldr	r2, [r7, #28]
 800996e:	6912      	ldr	r2, [r2, #16]
 8009970:	f06f 010d 	mvn.w	r1, #13
 8009974:	4610      	mov	r0, r2
 8009976:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009978:	69f9      	ldr	r1, [r7, #28]
 800997a:	486c      	ldr	r0, [pc, #432]	; (8009b2c <tcp_input+0x744>)
 800997c:	f7ff fbbc 	bl	80090f8 <tcp_pcb_remove>
        tcp_free(pcb);
 8009980:	69f8      	ldr	r0, [r7, #28]
 8009982:	f7fd fefd 	bl	8007780 <tcp_free>
 8009986:	e0da      	b.n	8009b3e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009988:	2300      	movs	r3, #0
 800998a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800998c:	4b63      	ldr	r3, [pc, #396]	; (8009b1c <tcp_input+0x734>)
 800998e:	881b      	ldrh	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d01d      	beq.n	80099d0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009994:	4b61      	ldr	r3, [pc, #388]	; (8009b1c <tcp_input+0x734>)
 8009996:	881b      	ldrh	r3, [r3, #0]
 8009998:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00a      	beq.n	80099ba <tcp_input+0x5d2>
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099aa:	69fa      	ldr	r2, [r7, #28]
 80099ac:	6910      	ldr	r0, [r2, #16]
 80099ae:	89fa      	ldrh	r2, [r7, #14]
 80099b0:	69f9      	ldr	r1, [r7, #28]
 80099b2:	4798      	blx	r3
 80099b4:	4603      	mov	r3, r0
 80099b6:	74fb      	strb	r3, [r7, #19]
 80099b8:	e001      	b.n	80099be <tcp_input+0x5d6>
 80099ba:	2300      	movs	r3, #0
 80099bc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80099be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80099c2:	f113 0f0d 	cmn.w	r3, #13
 80099c6:	f000 8098 	beq.w	8009afa <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80099ca:	4b54      	ldr	r3, [pc, #336]	; (8009b1c <tcp_input+0x734>)
 80099cc:	2200      	movs	r2, #0
 80099ce:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80099d0:	69f8      	ldr	r0, [r7, #28]
 80099d2:	f000 f915 	bl	8009c00 <tcp_input_delayed_close>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f040 8090 	bne.w	8009afe <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80099de:	4b4d      	ldr	r3, [pc, #308]	; (8009b14 <tcp_input+0x72c>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d041      	beq.n	8009a6a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d006      	beq.n	80099fc <tcp_input+0x614>
 80099ee:	4b50      	ldr	r3, [pc, #320]	; (8009b30 <tcp_input+0x748>)
 80099f0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80099f4:	494f      	ldr	r1, [pc, #316]	; (8009b34 <tcp_input+0x74c>)
 80099f6:	4850      	ldr	r0, [pc, #320]	; (8009b38 <tcp_input+0x750>)
 80099f8:	f006 fd78 	bl	80104ec <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	8b5b      	ldrh	r3, [r3, #26]
 8009a00:	f003 0310 	and.w	r3, r3, #16
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d008      	beq.n	8009a1a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009a08:	4b42      	ldr	r3, [pc, #264]	; (8009b14 <tcp_input+0x72c>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fd fbb3 	bl	8007178 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009a12:	69f8      	ldr	r0, [r7, #28]
 8009a14:	f7fe f99c 	bl	8007d50 <tcp_abort>
            goto aborted;
 8009a18:	e091      	b.n	8009b3e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00c      	beq.n	8009a3e <tcp_input+0x656>
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	6918      	ldr	r0, [r3, #16]
 8009a2e:	4b39      	ldr	r3, [pc, #228]	; (8009b14 <tcp_input+0x72c>)
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	2300      	movs	r3, #0
 8009a34:	69f9      	ldr	r1, [r7, #28]
 8009a36:	47a0      	blx	r4
 8009a38:	4603      	mov	r3, r0
 8009a3a:	74fb      	strb	r3, [r7, #19]
 8009a3c:	e008      	b.n	8009a50 <tcp_input+0x668>
 8009a3e:	4b35      	ldr	r3, [pc, #212]	; (8009b14 <tcp_input+0x72c>)
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	2300      	movs	r3, #0
 8009a44:	69f9      	ldr	r1, [r7, #28]
 8009a46:	2000      	movs	r0, #0
 8009a48:	f7ff f8a8 	bl	8008b9c <tcp_recv_null>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009a50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009a54:	f113 0f0d 	cmn.w	r3, #13
 8009a58:	d053      	beq.n	8009b02 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009a5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d003      	beq.n	8009a6a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009a62:	4b2c      	ldr	r3, [pc, #176]	; (8009b14 <tcp_input+0x72c>)
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009a6a:	4b2b      	ldr	r3, [pc, #172]	; (8009b18 <tcp_input+0x730>)
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	f003 0320 	and.w	r3, r3, #32
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d030      	beq.n	8009ad8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d009      	beq.n	8009a92 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a82:	7b5a      	ldrb	r2, [r3, #13]
 8009a84:	69fb      	ldr	r3, [r7, #28]
 8009a86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a88:	f042 0220 	orr.w	r2, r2, #32
 8009a8c:	b2d2      	uxtb	r2, r2
 8009a8e:	735a      	strb	r2, [r3, #13]
 8009a90:	e022      	b.n	8009ad8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a96:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009a9a:	d005      	beq.n	8009aa8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00b      	beq.n	8009aca <tcp_input+0x6e2>
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	6918      	ldr	r0, [r3, #16]
 8009abc:	2300      	movs	r3, #0
 8009abe:	2200      	movs	r2, #0
 8009ac0:	69f9      	ldr	r1, [r7, #28]
 8009ac2:	47a0      	blx	r4
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	74fb      	strb	r3, [r7, #19]
 8009ac8:	e001      	b.n	8009ace <tcp_input+0x6e6>
 8009aca:	2300      	movs	r3, #0
 8009acc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009ace:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ad2:	f113 0f0d 	cmn.w	r3, #13
 8009ad6:	d016      	beq.n	8009b06 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009ad8:	4b13      	ldr	r3, [pc, #76]	; (8009b28 <tcp_input+0x740>)
 8009ada:	2200      	movs	r2, #0
 8009adc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009ade:	69f8      	ldr	r0, [r7, #28]
 8009ae0:	f000 f88e 	bl	8009c00 <tcp_input_delayed_close>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d128      	bne.n	8009b3c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009aea:	69f8      	ldr	r0, [r7, #28]
 8009aec:	f002 ff20 	bl	800c930 <tcp_output>
 8009af0:	e025      	b.n	8009b3e <tcp_input+0x756>
        goto aborted;
 8009af2:	bf00      	nop
 8009af4:	e023      	b.n	8009b3e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009af6:	bf00      	nop
 8009af8:	e021      	b.n	8009b3e <tcp_input+0x756>
              goto aborted;
 8009afa:	bf00      	nop
 8009afc:	e01f      	b.n	8009b3e <tcp_input+0x756>
          goto aborted;
 8009afe:	bf00      	nop
 8009b00:	e01d      	b.n	8009b3e <tcp_input+0x756>
            goto aborted;
 8009b02:	bf00      	nop
 8009b04:	e01b      	b.n	8009b3e <tcp_input+0x756>
              goto aborted;
 8009b06:	bf00      	nop
 8009b08:	e019      	b.n	8009b3e <tcp_input+0x756>
 8009b0a:	bf00      	nop
 8009b0c:	20006818 	.word	0x20006818
 8009b10:	20006828 	.word	0x20006828
 8009b14:	20006848 	.word	0x20006848
 8009b18:	20006845 	.word	0x20006845
 8009b1c:	20006840 	.word	0x20006840
 8009b20:	20006844 	.word	0x20006844
 8009b24:	20006842 	.word	0x20006842
 8009b28:	2000684c 	.word	0x2000684c
 8009b2c:	2000680c 	.word	0x2000680c
 8009b30:	080135bc 	.word	0x080135bc
 8009b34:	08013770 	.word	0x08013770
 8009b38:	08013608 	.word	0x08013608
          goto aborted;
 8009b3c:	bf00      	nop
    tcp_input_pcb = NULL;
 8009b3e:	4b27      	ldr	r3, [pc, #156]	; (8009bdc <tcp_input+0x7f4>)
 8009b40:	2200      	movs	r2, #0
 8009b42:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009b44:	4b26      	ldr	r3, [pc, #152]	; (8009be0 <tcp_input+0x7f8>)
 8009b46:	2200      	movs	r2, #0
 8009b48:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009b4a:	4b26      	ldr	r3, [pc, #152]	; (8009be4 <tcp_input+0x7fc>)
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d03f      	beq.n	8009bd2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8009b52:	4b24      	ldr	r3, [pc, #144]	; (8009be4 <tcp_input+0x7fc>)
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fd fb0e 	bl	8007178 <pbuf_free>
      inseg.p = NULL;
 8009b5c:	4b21      	ldr	r3, [pc, #132]	; (8009be4 <tcp_input+0x7fc>)
 8009b5e:	2200      	movs	r2, #0
 8009b60:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009b62:	e036      	b.n	8009bd2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009b64:	4b20      	ldr	r3, [pc, #128]	; (8009be8 <tcp_input+0x800>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	899b      	ldrh	r3, [r3, #12]
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7fc f827 	bl	8005bc0 <lwip_htons>
 8009b72:	4603      	mov	r3, r0
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	f003 0304 	and.w	r3, r3, #4
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d118      	bne.n	8009bb0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b7e:	4b1b      	ldr	r3, [pc, #108]	; (8009bec <tcp_input+0x804>)
 8009b80:	6819      	ldr	r1, [r3, #0]
 8009b82:	4b1b      	ldr	r3, [pc, #108]	; (8009bf0 <tcp_input+0x808>)
 8009b84:	881b      	ldrh	r3, [r3, #0]
 8009b86:	461a      	mov	r2, r3
 8009b88:	4b1a      	ldr	r3, [pc, #104]	; (8009bf4 <tcp_input+0x80c>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009b8e:	4b16      	ldr	r3, [pc, #88]	; (8009be8 <tcp_input+0x800>)
 8009b90:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b92:	885b      	ldrh	r3, [r3, #2]
 8009b94:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009b96:	4a14      	ldr	r2, [pc, #80]	; (8009be8 <tcp_input+0x800>)
 8009b98:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b9a:	8812      	ldrh	r2, [r2, #0]
 8009b9c:	b292      	uxth	r2, r2
 8009b9e:	9202      	str	r2, [sp, #8]
 8009ba0:	9301      	str	r3, [sp, #4]
 8009ba2:	4b15      	ldr	r3, [pc, #84]	; (8009bf8 <tcp_input+0x810>)
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	4b15      	ldr	r3, [pc, #84]	; (8009bfc <tcp_input+0x814>)
 8009ba8:	4602      	mov	r2, r0
 8009baa:	2000      	movs	r0, #0
 8009bac:	f003 fc74 	bl	800d498 <tcp_rst>
    pbuf_free(p);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f7fd fae1 	bl	8007178 <pbuf_free>
  return;
 8009bb6:	e00c      	b.n	8009bd2 <tcp_input+0x7ea>
    goto dropped;
 8009bb8:	bf00      	nop
 8009bba:	e006      	b.n	8009bca <tcp_input+0x7e2>
    goto dropped;
 8009bbc:	bf00      	nop
 8009bbe:	e004      	b.n	8009bca <tcp_input+0x7e2>
    goto dropped;
 8009bc0:	bf00      	nop
 8009bc2:	e002      	b.n	8009bca <tcp_input+0x7e2>
      goto dropped;
 8009bc4:	bf00      	nop
 8009bc6:	e000      	b.n	8009bca <tcp_input+0x7e2>
      goto dropped;
 8009bc8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f7fd fad4 	bl	8007178 <pbuf_free>
 8009bd0:	e000      	b.n	8009bd4 <tcp_input+0x7ec>
  return;
 8009bd2:	bf00      	nop
}
 8009bd4:	3724      	adds	r7, #36	; 0x24
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd90      	pop	{r4, r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	2000684c 	.word	0x2000684c
 8009be0:	20006848 	.word	0x20006848
 8009be4:	20006818 	.word	0x20006818
 8009be8:	20006828 	.word	0x20006828
 8009bec:	2000683c 	.word	0x2000683c
 8009bf0:	20006842 	.word	0x20006842
 8009bf4:	20006838 	.word	0x20006838
 8009bf8:	200032a0 	.word	0x200032a0
 8009bfc:	200032a4 	.word	0x200032a4

08009c00 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d106      	bne.n	8009c1c <tcp_input_delayed_close+0x1c>
 8009c0e:	4b17      	ldr	r3, [pc, #92]	; (8009c6c <tcp_input_delayed_close+0x6c>)
 8009c10:	f240 225a 	movw	r2, #602	; 0x25a
 8009c14:	4916      	ldr	r1, [pc, #88]	; (8009c70 <tcp_input_delayed_close+0x70>)
 8009c16:	4817      	ldr	r0, [pc, #92]	; (8009c74 <tcp_input_delayed_close+0x74>)
 8009c18:	f006 fc68 	bl	80104ec <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009c1c:	4b16      	ldr	r3, [pc, #88]	; (8009c78 <tcp_input_delayed_close+0x78>)
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	f003 0310 	and.w	r3, r3, #16
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d01c      	beq.n	8009c62 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	8b5b      	ldrh	r3, [r3, #26]
 8009c2c:	f003 0310 	and.w	r3, r3, #16
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10d      	bne.n	8009c50 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d008      	beq.n	8009c50 <tcp_input_delayed_close+0x50>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	6912      	ldr	r2, [r2, #16]
 8009c48:	f06f 010e 	mvn.w	r1, #14
 8009c4c:	4610      	mov	r0, r2
 8009c4e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009c50:	6879      	ldr	r1, [r7, #4]
 8009c52:	480a      	ldr	r0, [pc, #40]	; (8009c7c <tcp_input_delayed_close+0x7c>)
 8009c54:	f7ff fa50 	bl	80090f8 <tcp_pcb_remove>
    tcp_free(pcb);
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f7fd fd91 	bl	8007780 <tcp_free>
    return 1;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e000      	b.n	8009c64 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	080135bc 	.word	0x080135bc
 8009c70:	0801378c 	.word	0x0801378c
 8009c74:	08013608 	.word	0x08013608
 8009c78:	20006845 	.word	0x20006845
 8009c7c:	2000680c 	.word	0x2000680c

08009c80 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009c80:	b590      	push	{r4, r7, lr}
 8009c82:	b08b      	sub	sp, #44	; 0x2c
 8009c84:	af04      	add	r7, sp, #16
 8009c86:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009c88:	4b6f      	ldr	r3, [pc, #444]	; (8009e48 <tcp_listen_input+0x1c8>)
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	f003 0304 	and.w	r3, r3, #4
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f040 80d2 	bne.w	8009e3a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d106      	bne.n	8009caa <tcp_listen_input+0x2a>
 8009c9c:	4b6b      	ldr	r3, [pc, #428]	; (8009e4c <tcp_listen_input+0x1cc>)
 8009c9e:	f240 2281 	movw	r2, #641	; 0x281
 8009ca2:	496b      	ldr	r1, [pc, #428]	; (8009e50 <tcp_listen_input+0x1d0>)
 8009ca4:	486b      	ldr	r0, [pc, #428]	; (8009e54 <tcp_listen_input+0x1d4>)
 8009ca6:	f006 fc21 	bl	80104ec <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009caa:	4b67      	ldr	r3, [pc, #412]	; (8009e48 <tcp_listen_input+0x1c8>)
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	f003 0310 	and.w	r3, r3, #16
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d019      	beq.n	8009cea <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009cb6:	4b68      	ldr	r3, [pc, #416]	; (8009e58 <tcp_listen_input+0x1d8>)
 8009cb8:	6819      	ldr	r1, [r3, #0]
 8009cba:	4b68      	ldr	r3, [pc, #416]	; (8009e5c <tcp_listen_input+0x1dc>)
 8009cbc:	881b      	ldrh	r3, [r3, #0]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	4b67      	ldr	r3, [pc, #412]	; (8009e60 <tcp_listen_input+0x1e0>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009cc6:	4b67      	ldr	r3, [pc, #412]	; (8009e64 <tcp_listen_input+0x1e4>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009cca:	885b      	ldrh	r3, [r3, #2]
 8009ccc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009cce:	4a65      	ldr	r2, [pc, #404]	; (8009e64 <tcp_listen_input+0x1e4>)
 8009cd0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009cd2:	8812      	ldrh	r2, [r2, #0]
 8009cd4:	b292      	uxth	r2, r2
 8009cd6:	9202      	str	r2, [sp, #8]
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	4b63      	ldr	r3, [pc, #396]	; (8009e68 <tcp_listen_input+0x1e8>)
 8009cdc:	9300      	str	r3, [sp, #0]
 8009cde:	4b63      	ldr	r3, [pc, #396]	; (8009e6c <tcp_listen_input+0x1ec>)
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f003 fbd8 	bl	800d498 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009ce8:	e0a9      	b.n	8009e3e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8009cea:	4b57      	ldr	r3, [pc, #348]	; (8009e48 <tcp_listen_input+0x1c8>)
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	f003 0302 	and.w	r3, r3, #2
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	f000 80a3 	beq.w	8009e3e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	7d5b      	ldrb	r3, [r3, #21]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7ff f871 	bl	8008de4 <tcp_alloc>
 8009d02:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d111      	bne.n	8009d2e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	699b      	ldr	r3, [r3, #24]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00a      	beq.n	8009d28 <tcp_listen_input+0xa8>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	6910      	ldr	r0, [r2, #16]
 8009d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d1e:	2100      	movs	r1, #0
 8009d20:	4798      	blx	r3
 8009d22:	4603      	mov	r3, r0
 8009d24:	73bb      	strb	r3, [r7, #14]
      return;
 8009d26:	e08b      	b.n	8009e40 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009d28:	23f0      	movs	r3, #240	; 0xf0
 8009d2a:	73bb      	strb	r3, [r7, #14]
      return;
 8009d2c:	e088      	b.n	8009e40 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009d2e:	4b50      	ldr	r3, [pc, #320]	; (8009e70 <tcp_listen_input+0x1f0>)
 8009d30:	695a      	ldr	r2, [r3, #20]
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009d36:	4b4e      	ldr	r3, [pc, #312]	; (8009e70 <tcp_listen_input+0x1f0>)
 8009d38:	691a      	ldr	r2, [r3, #16]
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	8ada      	ldrh	r2, [r3, #22]
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009d46:	4b47      	ldr	r3, [pc, #284]	; (8009e64 <tcp_listen_input+0x1e4>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	881b      	ldrh	r3, [r3, #0]
 8009d4c:	b29a      	uxth	r2, r3
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	2203      	movs	r2, #3
 8009d56:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009d58:	4b41      	ldr	r3, [pc, #260]	; (8009e60 <tcp_listen_input+0x1e0>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	1c5a      	adds	r2, r3, #1
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009d6a:	6978      	ldr	r0, [r7, #20]
 8009d6c:	f7ff fa58 	bl	8009220 <tcp_next_iss>
 8009d70:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	693a      	ldr	r2, [r7, #16]
 8009d76:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	693a      	ldr	r2, [r7, #16]
 8009d7c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	693a      	ldr	r2, [r7, #16]
 8009d88:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009d8a:	4b35      	ldr	r3, [pc, #212]	; (8009e60 <tcp_listen_input+0x1e0>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	1e5a      	subs	r2, r3, #1
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	691a      	ldr	r2, [r3, #16]
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	7a5b      	ldrb	r3, [r3, #9]
 8009da6:	f003 030c 	and.w	r3, r3, #12
 8009daa:	b2da      	uxtb	r2, r3
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	7a1a      	ldrb	r2, [r3, #8]
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009db8:	4b2e      	ldr	r3, [pc, #184]	; (8009e74 <tcp_listen_input+0x1f4>)
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	60da      	str	r2, [r3, #12]
 8009dc0:	4a2c      	ldr	r2, [pc, #176]	; (8009e74 <tcp_listen_input+0x1f4>)
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	6013      	str	r3, [r2, #0]
 8009dc6:	f003 fd29 	bl	800d81c <tcp_timer_needed>
 8009dca:	4b2b      	ldr	r3, [pc, #172]	; (8009e78 <tcp_listen_input+0x1f8>)
 8009dcc:	2201      	movs	r2, #1
 8009dce:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009dd0:	6978      	ldr	r0, [r7, #20]
 8009dd2:	f001 fd8f 	bl	800b8f4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009dd6:	4b23      	ldr	r3, [pc, #140]	; (8009e64 <tcp_listen_input+0x1e4>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	89db      	ldrh	r3, [r3, #14]
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	3304      	adds	r3, #4
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f005 f927 	bl	800f04c <ip4_route>
 8009dfe:	4601      	mov	r1, r0
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	3304      	adds	r3, #4
 8009e04:	461a      	mov	r2, r3
 8009e06:	4620      	mov	r0, r4
 8009e08:	f7ff fa30 	bl	800926c <tcp_eff_send_mss_netif>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	461a      	mov	r2, r3
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009e14:	2112      	movs	r1, #18
 8009e16:	6978      	ldr	r0, [r7, #20]
 8009e18:	f002 fc9c 	bl	800c754 <tcp_enqueue_flags>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d004      	beq.n	8009e32 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009e28:	2100      	movs	r1, #0
 8009e2a:	6978      	ldr	r0, [r7, #20]
 8009e2c:	f7fd fed2 	bl	8007bd4 <tcp_abandon>
      return;
 8009e30:	e006      	b.n	8009e40 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8009e32:	6978      	ldr	r0, [r7, #20]
 8009e34:	f002 fd7c 	bl	800c930 <tcp_output>
  return;
 8009e38:	e001      	b.n	8009e3e <tcp_listen_input+0x1be>
    return;
 8009e3a:	bf00      	nop
 8009e3c:	e000      	b.n	8009e40 <tcp_listen_input+0x1c0>
  return;
 8009e3e:	bf00      	nop
}
 8009e40:	371c      	adds	r7, #28
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd90      	pop	{r4, r7, pc}
 8009e46:	bf00      	nop
 8009e48:	20006844 	.word	0x20006844
 8009e4c:	080135bc 	.word	0x080135bc
 8009e50:	080137b4 	.word	0x080137b4
 8009e54:	08013608 	.word	0x08013608
 8009e58:	2000683c 	.word	0x2000683c
 8009e5c:	20006842 	.word	0x20006842
 8009e60:	20006838 	.word	0x20006838
 8009e64:	20006828 	.word	0x20006828
 8009e68:	200032a0 	.word	0x200032a0
 8009e6c:	200032a4 	.word	0x200032a4
 8009e70:	20003290 	.word	0x20003290
 8009e74:	2000680c 	.word	0x2000680c
 8009e78:	20006814 	.word	0x20006814

08009e7c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b086      	sub	sp, #24
 8009e80:	af04      	add	r7, sp, #16
 8009e82:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009e84:	4b2f      	ldr	r3, [pc, #188]	; (8009f44 <tcp_timewait_input+0xc8>)
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	f003 0304 	and.w	r3, r3, #4
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d153      	bne.n	8009f38 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d106      	bne.n	8009ea4 <tcp_timewait_input+0x28>
 8009e96:	4b2c      	ldr	r3, [pc, #176]	; (8009f48 <tcp_timewait_input+0xcc>)
 8009e98:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009e9c:	492b      	ldr	r1, [pc, #172]	; (8009f4c <tcp_timewait_input+0xd0>)
 8009e9e:	482c      	ldr	r0, [pc, #176]	; (8009f50 <tcp_timewait_input+0xd4>)
 8009ea0:	f006 fb24 	bl	80104ec <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009ea4:	4b27      	ldr	r3, [pc, #156]	; (8009f44 <tcp_timewait_input+0xc8>)
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	f003 0302 	and.w	r3, r3, #2
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d02a      	beq.n	8009f06 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009eb0:	4b28      	ldr	r3, [pc, #160]	; (8009f54 <tcp_timewait_input+0xd8>)
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	db2d      	blt.n	8009f1a <tcp_timewait_input+0x9e>
 8009ebe:	4b25      	ldr	r3, [pc, #148]	; (8009f54 <tcp_timewait_input+0xd8>)
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec6:	6879      	ldr	r1, [r7, #4]
 8009ec8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009eca:	440b      	add	r3, r1
 8009ecc:	1ad3      	subs	r3, r2, r3
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	dc23      	bgt.n	8009f1a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ed2:	4b21      	ldr	r3, [pc, #132]	; (8009f58 <tcp_timewait_input+0xdc>)
 8009ed4:	6819      	ldr	r1, [r3, #0]
 8009ed6:	4b21      	ldr	r3, [pc, #132]	; (8009f5c <tcp_timewait_input+0xe0>)
 8009ed8:	881b      	ldrh	r3, [r3, #0]
 8009eda:	461a      	mov	r2, r3
 8009edc:	4b1d      	ldr	r3, [pc, #116]	; (8009f54 <tcp_timewait_input+0xd8>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009ee2:	4b1f      	ldr	r3, [pc, #124]	; (8009f60 <tcp_timewait_input+0xe4>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ee6:	885b      	ldrh	r3, [r3, #2]
 8009ee8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009eea:	4a1d      	ldr	r2, [pc, #116]	; (8009f60 <tcp_timewait_input+0xe4>)
 8009eec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009eee:	8812      	ldrh	r2, [r2, #0]
 8009ef0:	b292      	uxth	r2, r2
 8009ef2:	9202      	str	r2, [sp, #8]
 8009ef4:	9301      	str	r3, [sp, #4]
 8009ef6:	4b1b      	ldr	r3, [pc, #108]	; (8009f64 <tcp_timewait_input+0xe8>)
 8009ef8:	9300      	str	r3, [sp, #0]
 8009efa:	4b1b      	ldr	r3, [pc, #108]	; (8009f68 <tcp_timewait_input+0xec>)
 8009efc:	4602      	mov	r2, r0
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f003 faca 	bl	800d498 <tcp_rst>
      return;
 8009f04:	e01b      	b.n	8009f3e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8009f06:	4b0f      	ldr	r3, [pc, #60]	; (8009f44 <tcp_timewait_input+0xc8>)
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	f003 0301 	and.w	r3, r3, #1
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d003      	beq.n	8009f1a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009f12:	4b16      	ldr	r3, [pc, #88]	; (8009f6c <tcp_timewait_input+0xf0>)
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009f1a:	4b10      	ldr	r3, [pc, #64]	; (8009f5c <tcp_timewait_input+0xe0>)
 8009f1c:	881b      	ldrh	r3, [r3, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00c      	beq.n	8009f3c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	8b5b      	ldrh	r3, [r3, #26]
 8009f26:	f043 0302 	orr.w	r3, r3, #2
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f002 fcfd 	bl	800c930 <tcp_output>
  }
  return;
 8009f36:	e001      	b.n	8009f3c <tcp_timewait_input+0xc0>
    return;
 8009f38:	bf00      	nop
 8009f3a:	e000      	b.n	8009f3e <tcp_timewait_input+0xc2>
  return;
 8009f3c:	bf00      	nop
}
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	20006844 	.word	0x20006844
 8009f48:	080135bc 	.word	0x080135bc
 8009f4c:	080137d4 	.word	0x080137d4
 8009f50:	08013608 	.word	0x08013608
 8009f54:	20006838 	.word	0x20006838
 8009f58:	2000683c 	.word	0x2000683c
 8009f5c:	20006842 	.word	0x20006842
 8009f60:	20006828 	.word	0x20006828
 8009f64:	200032a0 	.word	0x200032a0
 8009f68:	200032a4 	.word	0x200032a4
 8009f6c:	20006800 	.word	0x20006800

08009f70 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009f70:	b590      	push	{r4, r7, lr}
 8009f72:	b08d      	sub	sp, #52	; 0x34
 8009f74:	af04      	add	r7, sp, #16
 8009f76:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d106      	bne.n	8009f94 <tcp_process+0x24>
 8009f86:	4b9d      	ldr	r3, [pc, #628]	; (800a1fc <tcp_process+0x28c>)
 8009f88:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009f8c:	499c      	ldr	r1, [pc, #624]	; (800a200 <tcp_process+0x290>)
 8009f8e:	489d      	ldr	r0, [pc, #628]	; (800a204 <tcp_process+0x294>)
 8009f90:	f006 faac 	bl	80104ec <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009f94:	4b9c      	ldr	r3, [pc, #624]	; (800a208 <tcp_process+0x298>)
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	f003 0304 	and.w	r3, r3, #4
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d04e      	beq.n	800a03e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	7d1b      	ldrb	r3, [r3, #20]
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d108      	bne.n	8009fba <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009fac:	4b97      	ldr	r3, [pc, #604]	; (800a20c <tcp_process+0x29c>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d123      	bne.n	8009ffc <tcp_process+0x8c>
        acceptable = 1;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	76fb      	strb	r3, [r7, #27]
 8009fb8:	e020      	b.n	8009ffc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fbe:	4b94      	ldr	r3, [pc, #592]	; (800a210 <tcp_process+0x2a0>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d102      	bne.n	8009fcc <tcp_process+0x5c>
        acceptable = 1;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	76fb      	strb	r3, [r7, #27]
 8009fca:	e017      	b.n	8009ffc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009fcc:	4b90      	ldr	r3, [pc, #576]	; (800a210 <tcp_process+0x2a0>)
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	db10      	blt.n	8009ffc <tcp_process+0x8c>
 8009fda:	4b8d      	ldr	r3, [pc, #564]	; (800a210 <tcp_process+0x2a0>)
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe2:	6879      	ldr	r1, [r7, #4]
 8009fe4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009fe6:	440b      	add	r3, r1
 8009fe8:	1ad3      	subs	r3, r2, r3
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	dc06      	bgt.n	8009ffc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	8b5b      	ldrh	r3, [r3, #26]
 8009ff2:	f043 0302 	orr.w	r3, r3, #2
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009ffc:	7efb      	ldrb	r3, [r7, #27]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d01b      	beq.n	800a03a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	7d1b      	ldrb	r3, [r3, #20]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d106      	bne.n	800a018 <tcp_process+0xa8>
 800a00a:	4b7c      	ldr	r3, [pc, #496]	; (800a1fc <tcp_process+0x28c>)
 800a00c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a010:	4980      	ldr	r1, [pc, #512]	; (800a214 <tcp_process+0x2a4>)
 800a012:	487c      	ldr	r0, [pc, #496]	; (800a204 <tcp_process+0x294>)
 800a014:	f006 fa6a 	bl	80104ec <iprintf>
      recv_flags |= TF_RESET;
 800a018:	4b7f      	ldr	r3, [pc, #508]	; (800a218 <tcp_process+0x2a8>)
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	f043 0308 	orr.w	r3, r3, #8
 800a020:	b2da      	uxtb	r2, r3
 800a022:	4b7d      	ldr	r3, [pc, #500]	; (800a218 <tcp_process+0x2a8>)
 800a024:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	8b5b      	ldrh	r3, [r3, #26]
 800a02a:	f023 0301 	bic.w	r3, r3, #1
 800a02e:	b29a      	uxth	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a034:	f06f 030d 	mvn.w	r3, #13
 800a038:	e37a      	b.n	800a730 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a03a:	2300      	movs	r3, #0
 800a03c:	e378      	b.n	800a730 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a03e:	4b72      	ldr	r3, [pc, #456]	; (800a208 <tcp_process+0x298>)
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	f003 0302 	and.w	r3, r3, #2
 800a046:	2b00      	cmp	r3, #0
 800a048:	d010      	beq.n	800a06c <tcp_process+0xfc>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	7d1b      	ldrb	r3, [r3, #20]
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d00c      	beq.n	800a06c <tcp_process+0xfc>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	7d1b      	ldrb	r3, [r3, #20]
 800a056:	2b03      	cmp	r3, #3
 800a058:	d008      	beq.n	800a06c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	8b5b      	ldrh	r3, [r3, #26]
 800a05e:	f043 0302 	orr.w	r3, r3, #2
 800a062:	b29a      	uxth	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a068:	2300      	movs	r3, #0
 800a06a:	e361      	b.n	800a730 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	8b5b      	ldrh	r3, [r3, #26]
 800a070:	f003 0310 	and.w	r3, r3, #16
 800a074:	2b00      	cmp	r3, #0
 800a076:	d103      	bne.n	800a080 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a078:	4b68      	ldr	r3, [pc, #416]	; (800a21c <tcp_process+0x2ac>)
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f001 fc2f 	bl	800b8f4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	7d1b      	ldrb	r3, [r3, #20]
 800a09a:	3b02      	subs	r3, #2
 800a09c:	2b07      	cmp	r3, #7
 800a09e:	f200 8337 	bhi.w	800a710 <tcp_process+0x7a0>
 800a0a2:	a201      	add	r2, pc, #4	; (adr r2, 800a0a8 <tcp_process+0x138>)
 800a0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a8:	0800a0c9 	.word	0x0800a0c9
 800a0ac:	0800a2f9 	.word	0x0800a2f9
 800a0b0:	0800a471 	.word	0x0800a471
 800a0b4:	0800a49b 	.word	0x0800a49b
 800a0b8:	0800a5bf 	.word	0x0800a5bf
 800a0bc:	0800a471 	.word	0x0800a471
 800a0c0:	0800a64b 	.word	0x0800a64b
 800a0c4:	0800a6db 	.word	0x0800a6db
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a0c8:	4b4f      	ldr	r3, [pc, #316]	; (800a208 <tcp_process+0x298>)
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	f003 0310 	and.w	r3, r3, #16
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f000 80e4 	beq.w	800a29e <tcp_process+0x32e>
 800a0d6:	4b4c      	ldr	r3, [pc, #304]	; (800a208 <tcp_process+0x298>)
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	f003 0302 	and.w	r3, r3, #2
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f000 80dd 	beq.w	800a29e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0e8:	1c5a      	adds	r2, r3, #1
 800a0ea:	4b48      	ldr	r3, [pc, #288]	; (800a20c <tcp_process+0x29c>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	f040 80d5 	bne.w	800a29e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a0f4:	4b46      	ldr	r3, [pc, #280]	; (800a210 <tcp_process+0x2a0>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	1c5a      	adds	r2, r3, #1
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800a106:	4b41      	ldr	r3, [pc, #260]	; (800a20c <tcp_process+0x29c>)
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a10e:	4b44      	ldr	r3, [pc, #272]	; (800a220 <tcp_process+0x2b0>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	89db      	ldrh	r3, [r3, #14]
 800a114:	b29a      	uxth	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a128:	4b39      	ldr	r3, [pc, #228]	; (800a210 <tcp_process+0x2a0>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	1e5a      	subs	r2, r3, #1
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2204      	movs	r2, #4
 800a136:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	3304      	adds	r3, #4
 800a140:	4618      	mov	r0, r3
 800a142:	f004 ff83 	bl	800f04c <ip4_route>
 800a146:	4601      	mov	r1, r0
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	3304      	adds	r3, #4
 800a14c:	461a      	mov	r2, r3
 800a14e:	4620      	mov	r0, r4
 800a150:	f7ff f88c 	bl	800926c <tcp_eff_send_mss_netif>
 800a154:	4603      	mov	r3, r0
 800a156:	461a      	mov	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a160:	009a      	lsls	r2, r3, #2
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a166:	005b      	lsls	r3, r3, #1
 800a168:	f241 111c 	movw	r1, #4380	; 0x111c
 800a16c:	428b      	cmp	r3, r1
 800a16e:	bf38      	it	cc
 800a170:	460b      	movcc	r3, r1
 800a172:	429a      	cmp	r2, r3
 800a174:	d204      	bcs.n	800a180 <tcp_process+0x210>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	e00d      	b.n	800a19c <tcp_process+0x22c>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a184:	005b      	lsls	r3, r3, #1
 800a186:	f241 121c 	movw	r2, #4380	; 0x111c
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d904      	bls.n	800a198 <tcp_process+0x228>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a192:	005b      	lsls	r3, r3, #1
 800a194:	b29b      	uxth	r3, r3
 800a196:	e001      	b.n	800a19c <tcp_process+0x22c>
 800a198:	f241 131c 	movw	r3, #4380	; 0x111c
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d106      	bne.n	800a1ba <tcp_process+0x24a>
 800a1ac:	4b13      	ldr	r3, [pc, #76]	; (800a1fc <tcp_process+0x28c>)
 800a1ae:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a1b2:	491c      	ldr	r1, [pc, #112]	; (800a224 <tcp_process+0x2b4>)
 800a1b4:	4813      	ldr	r0, [pc, #76]	; (800a204 <tcp_process+0x294>)
 800a1b6:	f006 f999 	bl	80104ec <iprintf>
        --pcb->snd_queuelen;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ce:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d12a      	bne.n	800a22c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1da:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d106      	bne.n	800a1f0 <tcp_process+0x280>
 800a1e2:	4b06      	ldr	r3, [pc, #24]	; (800a1fc <tcp_process+0x28c>)
 800a1e4:	f44f 725d 	mov.w	r2, #884	; 0x374
 800a1e8:	490f      	ldr	r1, [pc, #60]	; (800a228 <tcp_process+0x2b8>)
 800a1ea:	4806      	ldr	r0, [pc, #24]	; (800a204 <tcp_process+0x294>)
 800a1ec:	f006 f97e 	bl	80104ec <iprintf>
          pcb->unsent = rseg->next;
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	66da      	str	r2, [r3, #108]	; 0x6c
 800a1f8:	e01c      	b.n	800a234 <tcp_process+0x2c4>
 800a1fa:	bf00      	nop
 800a1fc:	080135bc 	.word	0x080135bc
 800a200:	080137f4 	.word	0x080137f4
 800a204:	08013608 	.word	0x08013608
 800a208:	20006844 	.word	0x20006844
 800a20c:	2000683c 	.word	0x2000683c
 800a210:	20006838 	.word	0x20006838
 800a214:	08013810 	.word	0x08013810
 800a218:	20006845 	.word	0x20006845
 800a21c:	20006800 	.word	0x20006800
 800a220:	20006828 	.word	0x20006828
 800a224:	08013830 	.word	0x08013830
 800a228:	08013848 	.word	0x08013848
        } else {
          pcb->unacked = rseg->next;
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800a234:	69f8      	ldr	r0, [r7, #28]
 800a236:	f7fe fc6c 	bl	8008b12 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d104      	bne.n	800a24c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a248:	861a      	strh	r2, [r3, #48]	; 0x30
 800a24a:	e006      	b.n	800a25a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a260:	2b00      	cmp	r3, #0
 800a262:	d00a      	beq.n	800a27a <tcp_process+0x30a>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	6910      	ldr	r0, [r2, #16]
 800a26e:	2200      	movs	r2, #0
 800a270:	6879      	ldr	r1, [r7, #4]
 800a272:	4798      	blx	r3
 800a274:	4603      	mov	r3, r0
 800a276:	76bb      	strb	r3, [r7, #26]
 800a278:	e001      	b.n	800a27e <tcp_process+0x30e>
 800a27a:	2300      	movs	r3, #0
 800a27c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a27e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a282:	f113 0f0d 	cmn.w	r3, #13
 800a286:	d102      	bne.n	800a28e <tcp_process+0x31e>
          return ERR_ABRT;
 800a288:	f06f 030c 	mvn.w	r3, #12
 800a28c:	e250      	b.n	800a730 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	8b5b      	ldrh	r3, [r3, #26]
 800a292:	f043 0302 	orr.w	r3, r3, #2
 800a296:	b29a      	uxth	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a29c:	e23a      	b.n	800a714 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a29e:	4b98      	ldr	r3, [pc, #608]	; (800a500 <tcp_process+0x590>)
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	f003 0310 	and.w	r3, r3, #16
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	f000 8234 	beq.w	800a714 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2ac:	4b95      	ldr	r3, [pc, #596]	; (800a504 <tcp_process+0x594>)
 800a2ae:	6819      	ldr	r1, [r3, #0]
 800a2b0:	4b95      	ldr	r3, [pc, #596]	; (800a508 <tcp_process+0x598>)
 800a2b2:	881b      	ldrh	r3, [r3, #0]
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	4b95      	ldr	r3, [pc, #596]	; (800a50c <tcp_process+0x59c>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a2bc:	4b94      	ldr	r3, [pc, #592]	; (800a510 <tcp_process+0x5a0>)
 800a2be:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2c0:	885b      	ldrh	r3, [r3, #2]
 800a2c2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a2c4:	4a92      	ldr	r2, [pc, #584]	; (800a510 <tcp_process+0x5a0>)
 800a2c6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2c8:	8812      	ldrh	r2, [r2, #0]
 800a2ca:	b292      	uxth	r2, r2
 800a2cc:	9202      	str	r2, [sp, #8]
 800a2ce:	9301      	str	r3, [sp, #4]
 800a2d0:	4b90      	ldr	r3, [pc, #576]	; (800a514 <tcp_process+0x5a4>)
 800a2d2:	9300      	str	r3, [sp, #0]
 800a2d4:	4b90      	ldr	r3, [pc, #576]	; (800a518 <tcp_process+0x5a8>)
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f003 f8dd 	bl	800d498 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a2e4:	2b05      	cmp	r3, #5
 800a2e6:	f200 8215 	bhi.w	800a714 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f002 fea7 	bl	800d044 <tcp_rexmit_rto>
      break;
 800a2f6:	e20d      	b.n	800a714 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a2f8:	4b81      	ldr	r3, [pc, #516]	; (800a500 <tcp_process+0x590>)
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	f003 0310 	and.w	r3, r3, #16
 800a300:	2b00      	cmp	r3, #0
 800a302:	f000 80a1 	beq.w	800a448 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a306:	4b7f      	ldr	r3, [pc, #508]	; (800a504 <tcp_process+0x594>)
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a30e:	1ad3      	subs	r3, r2, r3
 800a310:	3b01      	subs	r3, #1
 800a312:	2b00      	cmp	r3, #0
 800a314:	db7e      	blt.n	800a414 <tcp_process+0x4a4>
 800a316:	4b7b      	ldr	r3, [pc, #492]	; (800a504 <tcp_process+0x594>)
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a31e:	1ad3      	subs	r3, r2, r3
 800a320:	2b00      	cmp	r3, #0
 800a322:	dc77      	bgt.n	800a414 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2204      	movs	r2, #4
 800a328:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d102      	bne.n	800a338 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a332:	23fa      	movs	r3, #250	; 0xfa
 800a334:	76bb      	strb	r3, [r7, #26]
 800a336:	e01d      	b.n	800a374 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a33c:	699b      	ldr	r3, [r3, #24]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d106      	bne.n	800a350 <tcp_process+0x3e0>
 800a342:	4b76      	ldr	r3, [pc, #472]	; (800a51c <tcp_process+0x5ac>)
 800a344:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800a348:	4975      	ldr	r1, [pc, #468]	; (800a520 <tcp_process+0x5b0>)
 800a34a:	4876      	ldr	r0, [pc, #472]	; (800a524 <tcp_process+0x5b4>)
 800a34c:	f006 f8ce 	bl	80104ec <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00a      	beq.n	800a370 <tcp_process+0x400>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a35e:	699b      	ldr	r3, [r3, #24]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	6910      	ldr	r0, [r2, #16]
 800a364:	2200      	movs	r2, #0
 800a366:	6879      	ldr	r1, [r7, #4]
 800a368:	4798      	blx	r3
 800a36a:	4603      	mov	r3, r0
 800a36c:	76bb      	strb	r3, [r7, #26]
 800a36e:	e001      	b.n	800a374 <tcp_process+0x404>
 800a370:	23f0      	movs	r3, #240	; 0xf0
 800a372:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a374:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d00a      	beq.n	800a392 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a37c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a380:	f113 0f0d 	cmn.w	r3, #13
 800a384:	d002      	beq.n	800a38c <tcp_process+0x41c>
              tcp_abort(pcb);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f7fd fce2 	bl	8007d50 <tcp_abort>
            }
            return ERR_ABRT;
 800a38c:	f06f 030c 	mvn.w	r3, #12
 800a390:	e1ce      	b.n	800a730 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 fae0 	bl	800a958 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a398:	4b63      	ldr	r3, [pc, #396]	; (800a528 <tcp_process+0x5b8>)
 800a39a:	881b      	ldrh	r3, [r3, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d005      	beq.n	800a3ac <tcp_process+0x43c>
            recv_acked--;
 800a3a0:	4b61      	ldr	r3, [pc, #388]	; (800a528 <tcp_process+0x5b8>)
 800a3a2:	881b      	ldrh	r3, [r3, #0]
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	4b5f      	ldr	r3, [pc, #380]	; (800a528 <tcp_process+0x5b8>)
 800a3aa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a3b0:	009a      	lsls	r2, r3, #2
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a3b6:	005b      	lsls	r3, r3, #1
 800a3b8:	f241 111c 	movw	r1, #4380	; 0x111c
 800a3bc:	428b      	cmp	r3, r1
 800a3be:	bf38      	it	cc
 800a3c0:	460b      	movcc	r3, r1
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d204      	bcs.n	800a3d0 <tcp_process+0x460>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	e00d      	b.n	800a3ec <tcp_process+0x47c>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a3d4:	005b      	lsls	r3, r3, #1
 800a3d6:	f241 121c 	movw	r2, #4380	; 0x111c
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d904      	bls.n	800a3e8 <tcp_process+0x478>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a3e2:	005b      	lsls	r3, r3, #1
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	e001      	b.n	800a3ec <tcp_process+0x47c>
 800a3e8:	f241 131c 	movw	r3, #4380	; 0x111c
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a3f2:	4b4e      	ldr	r3, [pc, #312]	; (800a52c <tcp_process+0x5bc>)
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	f003 0320 	and.w	r3, r3, #32
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d037      	beq.n	800a46e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	8b5b      	ldrh	r3, [r3, #26]
 800a402:	f043 0302 	orr.w	r3, r3, #2
 800a406:	b29a      	uxth	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2207      	movs	r2, #7
 800a410:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a412:	e02c      	b.n	800a46e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a414:	4b3b      	ldr	r3, [pc, #236]	; (800a504 <tcp_process+0x594>)
 800a416:	6819      	ldr	r1, [r3, #0]
 800a418:	4b3b      	ldr	r3, [pc, #236]	; (800a508 <tcp_process+0x598>)
 800a41a:	881b      	ldrh	r3, [r3, #0]
 800a41c:	461a      	mov	r2, r3
 800a41e:	4b3b      	ldr	r3, [pc, #236]	; (800a50c <tcp_process+0x59c>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a424:	4b3a      	ldr	r3, [pc, #232]	; (800a510 <tcp_process+0x5a0>)
 800a426:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a428:	885b      	ldrh	r3, [r3, #2]
 800a42a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a42c:	4a38      	ldr	r2, [pc, #224]	; (800a510 <tcp_process+0x5a0>)
 800a42e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a430:	8812      	ldrh	r2, [r2, #0]
 800a432:	b292      	uxth	r2, r2
 800a434:	9202      	str	r2, [sp, #8]
 800a436:	9301      	str	r3, [sp, #4]
 800a438:	4b36      	ldr	r3, [pc, #216]	; (800a514 <tcp_process+0x5a4>)
 800a43a:	9300      	str	r3, [sp, #0]
 800a43c:	4b36      	ldr	r3, [pc, #216]	; (800a518 <tcp_process+0x5a8>)
 800a43e:	4602      	mov	r2, r0
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f003 f829 	bl	800d498 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a446:	e167      	b.n	800a718 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a448:	4b2d      	ldr	r3, [pc, #180]	; (800a500 <tcp_process+0x590>)
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	f003 0302 	and.w	r3, r3, #2
 800a450:	2b00      	cmp	r3, #0
 800a452:	f000 8161 	beq.w	800a718 <tcp_process+0x7a8>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45a:	1e5a      	subs	r2, r3, #1
 800a45c:	4b2b      	ldr	r3, [pc, #172]	; (800a50c <tcp_process+0x59c>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	429a      	cmp	r2, r3
 800a462:	f040 8159 	bne.w	800a718 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f002 fe0e 	bl	800d088 <tcp_rexmit>
      break;
 800a46c:	e154      	b.n	800a718 <tcp_process+0x7a8>
 800a46e:	e153      	b.n	800a718 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fa71 	bl	800a958 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a476:	4b2d      	ldr	r3, [pc, #180]	; (800a52c <tcp_process+0x5bc>)
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	f003 0320 	and.w	r3, r3, #32
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f000 814c 	beq.w	800a71c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	8b5b      	ldrh	r3, [r3, #26]
 800a488:	f043 0302 	orr.w	r3, r3, #2
 800a48c:	b29a      	uxth	r2, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2207      	movs	r2, #7
 800a496:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a498:	e140      	b.n	800a71c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 fa5c 	bl	800a958 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a4a0:	4b22      	ldr	r3, [pc, #136]	; (800a52c <tcp_process+0x5bc>)
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	f003 0320 	and.w	r3, r3, #32
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d071      	beq.n	800a590 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a4ac:	4b14      	ldr	r3, [pc, #80]	; (800a500 <tcp_process+0x590>)
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	f003 0310 	and.w	r3, r3, #16
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d060      	beq.n	800a57a <tcp_process+0x60a>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4bc:	4b11      	ldr	r3, [pc, #68]	; (800a504 <tcp_process+0x594>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d15a      	bne.n	800a57a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d156      	bne.n	800a57a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	8b5b      	ldrh	r3, [r3, #26]
 800a4d0:	f043 0302 	orr.w	r3, r3, #2
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f7fe fdbc 	bl	8009058 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a4e0:	4b13      	ldr	r3, [pc, #76]	; (800a530 <tcp_process+0x5c0>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d105      	bne.n	800a4f6 <tcp_process+0x586>
 800a4ea:	4b11      	ldr	r3, [pc, #68]	; (800a530 <tcp_process+0x5c0>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	4a0f      	ldr	r2, [pc, #60]	; (800a530 <tcp_process+0x5c0>)
 800a4f2:	6013      	str	r3, [r2, #0]
 800a4f4:	e02e      	b.n	800a554 <tcp_process+0x5e4>
 800a4f6:	4b0e      	ldr	r3, [pc, #56]	; (800a530 <tcp_process+0x5c0>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	617b      	str	r3, [r7, #20]
 800a4fc:	e027      	b.n	800a54e <tcp_process+0x5de>
 800a4fe:	bf00      	nop
 800a500:	20006844 	.word	0x20006844
 800a504:	2000683c 	.word	0x2000683c
 800a508:	20006842 	.word	0x20006842
 800a50c:	20006838 	.word	0x20006838
 800a510:	20006828 	.word	0x20006828
 800a514:	200032a0 	.word	0x200032a0
 800a518:	200032a4 	.word	0x200032a4
 800a51c:	080135bc 	.word	0x080135bc
 800a520:	0801385c 	.word	0x0801385c
 800a524:	08013608 	.word	0x08013608
 800a528:	20006840 	.word	0x20006840
 800a52c:	20006845 	.word	0x20006845
 800a530:	2000680c 	.word	0x2000680c
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d104      	bne.n	800a548 <tcp_process+0x5d8>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	68da      	ldr	r2, [r3, #12]
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	60da      	str	r2, [r3, #12]
 800a546:	e005      	b.n	800a554 <tcp_process+0x5e4>
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	617b      	str	r3, [r7, #20]
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1ef      	bne.n	800a534 <tcp_process+0x5c4>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	60da      	str	r2, [r3, #12]
 800a55a:	4b77      	ldr	r3, [pc, #476]	; (800a738 <tcp_process+0x7c8>)
 800a55c:	2201      	movs	r2, #1
 800a55e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	220a      	movs	r2, #10
 800a564:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a566:	4b75      	ldr	r3, [pc, #468]	; (800a73c <tcp_process+0x7cc>)
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	60da      	str	r2, [r3, #12]
 800a56e:	4a73      	ldr	r2, [pc, #460]	; (800a73c <tcp_process+0x7cc>)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6013      	str	r3, [r2, #0]
 800a574:	f003 f952 	bl	800d81c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800a578:	e0d2      	b.n	800a720 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	8b5b      	ldrh	r3, [r3, #26]
 800a57e:	f043 0302 	orr.w	r3, r3, #2
 800a582:	b29a      	uxth	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2208      	movs	r2, #8
 800a58c:	751a      	strb	r2, [r3, #20]
      break;
 800a58e:	e0c7      	b.n	800a720 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a590:	4b6b      	ldr	r3, [pc, #428]	; (800a740 <tcp_process+0x7d0>)
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	f003 0310 	and.w	r3, r3, #16
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f000 80c1 	beq.w	800a720 <tcp_process+0x7b0>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a5a2:	4b68      	ldr	r3, [pc, #416]	; (800a744 <tcp_process+0x7d4>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	f040 80ba 	bne.w	800a720 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f040 80b5 	bne.w	800a720 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2206      	movs	r2, #6
 800a5ba:	751a      	strb	r2, [r3, #20]
      break;
 800a5bc:	e0b0      	b.n	800a720 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 f9ca 	bl	800a958 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a5c4:	4b60      	ldr	r3, [pc, #384]	; (800a748 <tcp_process+0x7d8>)
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	f003 0320 	and.w	r3, r3, #32
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f000 80a9 	beq.w	800a724 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	8b5b      	ldrh	r3, [r3, #26]
 800a5d6:	f043 0302 	orr.w	r3, r3, #2
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f7fe fd39 	bl	8009058 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a5e6:	4b59      	ldr	r3, [pc, #356]	; (800a74c <tcp_process+0x7dc>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d105      	bne.n	800a5fc <tcp_process+0x68c>
 800a5f0:	4b56      	ldr	r3, [pc, #344]	; (800a74c <tcp_process+0x7dc>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	4a55      	ldr	r2, [pc, #340]	; (800a74c <tcp_process+0x7dc>)
 800a5f8:	6013      	str	r3, [r2, #0]
 800a5fa:	e013      	b.n	800a624 <tcp_process+0x6b4>
 800a5fc:	4b53      	ldr	r3, [pc, #332]	; (800a74c <tcp_process+0x7dc>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	613b      	str	r3, [r7, #16]
 800a602:	e00c      	b.n	800a61e <tcp_process+0x6ae>
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d104      	bne.n	800a618 <tcp_process+0x6a8>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	68da      	ldr	r2, [r3, #12]
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	60da      	str	r2, [r3, #12]
 800a616:	e005      	b.n	800a624 <tcp_process+0x6b4>
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	613b      	str	r3, [r7, #16]
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d1ef      	bne.n	800a604 <tcp_process+0x694>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	60da      	str	r2, [r3, #12]
 800a62a:	4b43      	ldr	r3, [pc, #268]	; (800a738 <tcp_process+0x7c8>)
 800a62c:	2201      	movs	r2, #1
 800a62e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	220a      	movs	r2, #10
 800a634:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a636:	4b41      	ldr	r3, [pc, #260]	; (800a73c <tcp_process+0x7cc>)
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	60da      	str	r2, [r3, #12]
 800a63e:	4a3f      	ldr	r2, [pc, #252]	; (800a73c <tcp_process+0x7cc>)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6013      	str	r3, [r2, #0]
 800a644:	f003 f8ea 	bl	800d81c <tcp_timer_needed>
      }
      break;
 800a648:	e06c      	b.n	800a724 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 f984 	bl	800a958 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a650:	4b3b      	ldr	r3, [pc, #236]	; (800a740 <tcp_process+0x7d0>)
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	f003 0310 	and.w	r3, r3, #16
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d065      	beq.n	800a728 <tcp_process+0x7b8>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a660:	4b38      	ldr	r3, [pc, #224]	; (800a744 <tcp_process+0x7d4>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	429a      	cmp	r2, r3
 800a666:	d15f      	bne.n	800a728 <tcp_process+0x7b8>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d15b      	bne.n	800a728 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7fe fcf1 	bl	8009058 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a676:	4b35      	ldr	r3, [pc, #212]	; (800a74c <tcp_process+0x7dc>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d105      	bne.n	800a68c <tcp_process+0x71c>
 800a680:	4b32      	ldr	r3, [pc, #200]	; (800a74c <tcp_process+0x7dc>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	4a31      	ldr	r2, [pc, #196]	; (800a74c <tcp_process+0x7dc>)
 800a688:	6013      	str	r3, [r2, #0]
 800a68a:	e013      	b.n	800a6b4 <tcp_process+0x744>
 800a68c:	4b2f      	ldr	r3, [pc, #188]	; (800a74c <tcp_process+0x7dc>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	60fb      	str	r3, [r7, #12]
 800a692:	e00c      	b.n	800a6ae <tcp_process+0x73e>
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d104      	bne.n	800a6a8 <tcp_process+0x738>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	68da      	ldr	r2, [r3, #12]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	60da      	str	r2, [r3, #12]
 800a6a6:	e005      	b.n	800a6b4 <tcp_process+0x744>
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	60fb      	str	r3, [r7, #12]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d1ef      	bne.n	800a694 <tcp_process+0x724>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	60da      	str	r2, [r3, #12]
 800a6ba:	4b1f      	ldr	r3, [pc, #124]	; (800a738 <tcp_process+0x7c8>)
 800a6bc:	2201      	movs	r2, #1
 800a6be:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	220a      	movs	r2, #10
 800a6c4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a6c6:	4b1d      	ldr	r3, [pc, #116]	; (800a73c <tcp_process+0x7cc>)
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	60da      	str	r2, [r3, #12]
 800a6ce:	4a1b      	ldr	r2, [pc, #108]	; (800a73c <tcp_process+0x7cc>)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6013      	str	r3, [r2, #0]
 800a6d4:	f003 f8a2 	bl	800d81c <tcp_timer_needed>
      }
      break;
 800a6d8:	e026      	b.n	800a728 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 f93c 	bl	800a958 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a6e0:	4b17      	ldr	r3, [pc, #92]	; (800a740 <tcp_process+0x7d0>)
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	f003 0310 	and.w	r3, r3, #16
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d01f      	beq.n	800a72c <tcp_process+0x7bc>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a6f0:	4b14      	ldr	r3, [pc, #80]	; (800a744 <tcp_process+0x7d4>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d119      	bne.n	800a72c <tcp_process+0x7bc>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d115      	bne.n	800a72c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800a700:	4b11      	ldr	r3, [pc, #68]	; (800a748 <tcp_process+0x7d8>)
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	f043 0310 	orr.w	r3, r3, #16
 800a708:	b2da      	uxtb	r2, r3
 800a70a:	4b0f      	ldr	r3, [pc, #60]	; (800a748 <tcp_process+0x7d8>)
 800a70c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a70e:	e00d      	b.n	800a72c <tcp_process+0x7bc>
    default:
      break;
 800a710:	bf00      	nop
 800a712:	e00c      	b.n	800a72e <tcp_process+0x7be>
      break;
 800a714:	bf00      	nop
 800a716:	e00a      	b.n	800a72e <tcp_process+0x7be>
      break;
 800a718:	bf00      	nop
 800a71a:	e008      	b.n	800a72e <tcp_process+0x7be>
      break;
 800a71c:	bf00      	nop
 800a71e:	e006      	b.n	800a72e <tcp_process+0x7be>
      break;
 800a720:	bf00      	nop
 800a722:	e004      	b.n	800a72e <tcp_process+0x7be>
      break;
 800a724:	bf00      	nop
 800a726:	e002      	b.n	800a72e <tcp_process+0x7be>
      break;
 800a728:	bf00      	nop
 800a72a:	e000      	b.n	800a72e <tcp_process+0x7be>
      break;
 800a72c:	bf00      	nop
  }
  return ERR_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3724      	adds	r7, #36	; 0x24
 800a734:	46bd      	mov	sp, r7
 800a736:	bd90      	pop	{r4, r7, pc}
 800a738:	20006814 	.word	0x20006814
 800a73c:	20006810 	.word	0x20006810
 800a740:	20006844 	.word	0x20006844
 800a744:	2000683c 	.word	0x2000683c
 800a748:	20006845 	.word	0x20006845
 800a74c:	2000680c 	.word	0x2000680c

0800a750 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a750:	b590      	push	{r4, r7, lr}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d106      	bne.n	800a76e <tcp_oos_insert_segment+0x1e>
 800a760:	4b3b      	ldr	r3, [pc, #236]	; (800a850 <tcp_oos_insert_segment+0x100>)
 800a762:	f240 421f 	movw	r2, #1055	; 0x41f
 800a766:	493b      	ldr	r1, [pc, #236]	; (800a854 <tcp_oos_insert_segment+0x104>)
 800a768:	483b      	ldr	r0, [pc, #236]	; (800a858 <tcp_oos_insert_segment+0x108>)
 800a76a:	f005 febf 	bl	80104ec <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	899b      	ldrh	r3, [r3, #12]
 800a774:	b29b      	uxth	r3, r3
 800a776:	4618      	mov	r0, r3
 800a778:	f7fb fa22 	bl	8005bc0 <lwip_htons>
 800a77c:	4603      	mov	r3, r0
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	f003 0301 	and.w	r3, r3, #1
 800a784:	2b00      	cmp	r3, #0
 800a786:	d028      	beq.n	800a7da <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a788:	6838      	ldr	r0, [r7, #0]
 800a78a:	f7fe f9ad 	bl	8008ae8 <tcp_segs_free>
    next = NULL;
 800a78e:	2300      	movs	r3, #0
 800a790:	603b      	str	r3, [r7, #0]
 800a792:	e056      	b.n	800a842 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	899b      	ldrh	r3, [r3, #12]
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7fb fa0f 	bl	8005bc0 <lwip_htons>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	f003 0301 	and.w	r3, r3, #1
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00d      	beq.n	800a7ca <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	899b      	ldrh	r3, [r3, #12]
 800a7b4:	b29c      	uxth	r4, r3
 800a7b6:	2001      	movs	r0, #1
 800a7b8:	f7fb fa02 	bl	8005bc0 <lwip_htons>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	461a      	mov	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	4322      	orrs	r2, r4
 800a7c6:	b292      	uxth	r2, r2
 800a7c8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	f7fe f99c 	bl	8008b12 <tcp_seg_free>
    while (next &&
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00e      	beq.n	800a7fe <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	891b      	ldrh	r3, [r3, #8]
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	4b1d      	ldr	r3, [pc, #116]	; (800a85c <tcp_oos_insert_segment+0x10c>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	441a      	add	r2, r3
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	6839      	ldr	r1, [r7, #0]
 800a7f4:	8909      	ldrh	r1, [r1, #8]
 800a7f6:	440b      	add	r3, r1
 800a7f8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	daca      	bge.n	800a794 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d01e      	beq.n	800a842 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	891b      	ldrh	r3, [r3, #8]
 800a808:	461a      	mov	r2, r3
 800a80a:	4b14      	ldr	r3, [pc, #80]	; (800a85c <tcp_oos_insert_segment+0x10c>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	441a      	add	r2, r3
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a818:	2b00      	cmp	r3, #0
 800a81a:	dd12      	ble.n	800a842 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	b29a      	uxth	r2, r3
 800a824:	4b0d      	ldr	r3, [pc, #52]	; (800a85c <tcp_oos_insert_segment+0x10c>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	b29b      	uxth	r3, r3
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	685a      	ldr	r2, [r3, #4]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	891b      	ldrh	r3, [r3, #8]
 800a83a:	4619      	mov	r1, r3
 800a83c:	4610      	mov	r0, r2
 800a83e:	f7fc fb15 	bl	8006e6c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	683a      	ldr	r2, [r7, #0]
 800a846:	601a      	str	r2, [r3, #0]
}
 800a848:	bf00      	nop
 800a84a:	3714      	adds	r7, #20
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd90      	pop	{r4, r7, pc}
 800a850:	080135bc 	.word	0x080135bc
 800a854:	0801387c 	.word	0x0801387c
 800a858:	08013608 	.word	0x08013608
 800a85c:	20006838 	.word	0x20006838

0800a860 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800a860:	b5b0      	push	{r4, r5, r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	607a      	str	r2, [r7, #4]
 800a86c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a86e:	e03e      	b.n	800a8ee <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fc fd02 	bl	8007288 <pbuf_clen>
 800a884:	4603      	mov	r3, r0
 800a886:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a88e:	8a7a      	ldrh	r2, [r7, #18]
 800a890:	429a      	cmp	r2, r3
 800a892:	d906      	bls.n	800a8a2 <tcp_free_acked_segments+0x42>
 800a894:	4b2a      	ldr	r3, [pc, #168]	; (800a940 <tcp_free_acked_segments+0xe0>)
 800a896:	f240 4257 	movw	r2, #1111	; 0x457
 800a89a:	492a      	ldr	r1, [pc, #168]	; (800a944 <tcp_free_acked_segments+0xe4>)
 800a89c:	482a      	ldr	r0, [pc, #168]	; (800a948 <tcp_free_acked_segments+0xe8>)
 800a89e:	f005 fe25 	bl	80104ec <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800a8a8:	8a7b      	ldrh	r3, [r7, #18]
 800a8aa:	1ad3      	subs	r3, r2, r3
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	891a      	ldrh	r2, [r3, #8]
 800a8b8:	4b24      	ldr	r3, [pc, #144]	; (800a94c <tcp_free_acked_segments+0xec>)
 800a8ba:	881b      	ldrh	r3, [r3, #0]
 800a8bc:	4413      	add	r3, r2
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	4b22      	ldr	r3, [pc, #136]	; (800a94c <tcp_free_acked_segments+0xec>)
 800a8c2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a8c4:	6978      	ldr	r0, [r7, #20]
 800a8c6:	f7fe f924 	bl	8008b12 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d00c      	beq.n	800a8ee <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d109      	bne.n	800a8ee <tcp_free_acked_segments+0x8e>
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d106      	bne.n	800a8ee <tcp_free_acked_segments+0x8e>
 800a8e0:	4b17      	ldr	r3, [pc, #92]	; (800a940 <tcp_free_acked_segments+0xe0>)
 800a8e2:	f240 4261 	movw	r2, #1121	; 0x461
 800a8e6:	491a      	ldr	r1, [pc, #104]	; (800a950 <tcp_free_acked_segments+0xf0>)
 800a8e8:	4817      	ldr	r0, [pc, #92]	; (800a948 <tcp_free_acked_segments+0xe8>)
 800a8ea:	f005 fdff 	bl	80104ec <iprintf>
  while (seg_list != NULL &&
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d020      	beq.n	800a936 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7fb f975 	bl	8005bea <lwip_htonl>
 800a900:	4604      	mov	r4, r0
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	891b      	ldrh	r3, [r3, #8]
 800a906:	461d      	mov	r5, r3
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	899b      	ldrh	r3, [r3, #12]
 800a90e:	b29b      	uxth	r3, r3
 800a910:	4618      	mov	r0, r3
 800a912:	f7fb f955 	bl	8005bc0 <lwip_htons>
 800a916:	4603      	mov	r3, r0
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	f003 0303 	and.w	r3, r3, #3
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d001      	beq.n	800a926 <tcp_free_acked_segments+0xc6>
 800a922:	2301      	movs	r3, #1
 800a924:	e000      	b.n	800a928 <tcp_free_acked_segments+0xc8>
 800a926:	2300      	movs	r3, #0
 800a928:	442b      	add	r3, r5
 800a92a:	18e2      	adds	r2, r4, r3
 800a92c:	4b09      	ldr	r3, [pc, #36]	; (800a954 <tcp_free_acked_segments+0xf4>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a932:	2b00      	cmp	r3, #0
 800a934:	dd9c      	ble.n	800a870 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a936:	68bb      	ldr	r3, [r7, #8]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3718      	adds	r7, #24
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bdb0      	pop	{r4, r5, r7, pc}
 800a940:	080135bc 	.word	0x080135bc
 800a944:	080138a4 	.word	0x080138a4
 800a948:	08013608 	.word	0x08013608
 800a94c:	20006840 	.word	0x20006840
 800a950:	080138cc 	.word	0x080138cc
 800a954:	2000683c 	.word	0x2000683c

0800a958 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a958:	b5b0      	push	{r4, r5, r7, lr}
 800a95a:	b094      	sub	sp, #80	; 0x50
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a960:	2300      	movs	r3, #0
 800a962:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d106      	bne.n	800a978 <tcp_receive+0x20>
 800a96a:	4b91      	ldr	r3, [pc, #580]	; (800abb0 <tcp_receive+0x258>)
 800a96c:	f240 427b 	movw	r2, #1147	; 0x47b
 800a970:	4990      	ldr	r1, [pc, #576]	; (800abb4 <tcp_receive+0x25c>)
 800a972:	4891      	ldr	r0, [pc, #580]	; (800abb8 <tcp_receive+0x260>)
 800a974:	f005 fdba 	bl	80104ec <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	7d1b      	ldrb	r3, [r3, #20]
 800a97c:	2b03      	cmp	r3, #3
 800a97e:	d806      	bhi.n	800a98e <tcp_receive+0x36>
 800a980:	4b8b      	ldr	r3, [pc, #556]	; (800abb0 <tcp_receive+0x258>)
 800a982:	f240 427c 	movw	r2, #1148	; 0x47c
 800a986:	498d      	ldr	r1, [pc, #564]	; (800abbc <tcp_receive+0x264>)
 800a988:	488b      	ldr	r0, [pc, #556]	; (800abb8 <tcp_receive+0x260>)
 800a98a:	f005 fdaf 	bl	80104ec <iprintf>

  if (flags & TCP_ACK) {
 800a98e:	4b8c      	ldr	r3, [pc, #560]	; (800abc0 <tcp_receive+0x268>)
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	f003 0310 	and.w	r3, r3, #16
 800a996:	2b00      	cmp	r3, #0
 800a998:	f000 8264 	beq.w	800ae64 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9a8:	4413      	add	r3, r2
 800a9aa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9b0:	4b84      	ldr	r3, [pc, #528]	; (800abc4 <tcp_receive+0x26c>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	db1b      	blt.n	800a9f2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9be:	4b81      	ldr	r3, [pc, #516]	; (800abc4 <tcp_receive+0x26c>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d106      	bne.n	800a9d4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a9ca:	4b7f      	ldr	r3, [pc, #508]	; (800abc8 <tcp_receive+0x270>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	1ad3      	subs	r3, r2, r3
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	db0e      	blt.n	800a9f2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a9d8:	4b7b      	ldr	r3, [pc, #492]	; (800abc8 <tcp_receive+0x270>)
 800a9da:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d125      	bne.n	800aa2c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a9e0:	4b7a      	ldr	r3, [pc, #488]	; (800abcc <tcp_receive+0x274>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	89db      	ldrh	r3, [r3, #14]
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d91c      	bls.n	800aa2c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a9f2:	4b76      	ldr	r3, [pc, #472]	; (800abcc <tcp_receive+0x274>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	89db      	ldrh	r3, [r3, #14]
 800a9f8:	b29a      	uxth	r2, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d205      	bcs.n	800aa1c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800aa1c:	4b69      	ldr	r3, [pc, #420]	; (800abc4 <tcp_receive+0x26c>)
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800aa24:	4b68      	ldr	r3, [pc, #416]	; (800abc8 <tcp_receive+0x270>)
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800aa2c:	4b66      	ldr	r3, [pc, #408]	; (800abc8 <tcp_receive+0x270>)
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa34:	1ad3      	subs	r3, r2, r3
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	dc58      	bgt.n	800aaec <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800aa3a:	4b65      	ldr	r3, [pc, #404]	; (800abd0 <tcp_receive+0x278>)
 800aa3c:	881b      	ldrh	r3, [r3, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d14b      	bne.n	800aada <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800aa4c:	4413      	add	r3, r2
 800aa4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d142      	bne.n	800aada <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	db3d      	blt.n	800aada <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa62:	4b59      	ldr	r3, [pc, #356]	; (800abc8 <tcp_receive+0x270>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d137      	bne.n	800aada <tcp_receive+0x182>
              found_dupack = 1;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aa74:	2bff      	cmp	r3, #255	; 0xff
 800aa76:	d007      	beq.n	800aa88 <tcp_receive+0x130>
                ++pcb->dupacks;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aa7e:	3301      	adds	r3, #1
 800aa80:	b2da      	uxtb	r2, r3
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aa8e:	2b03      	cmp	r3, #3
 800aa90:	d91b      	bls.n	800aaca <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aa9c:	4413      	add	r3, r2
 800aa9e:	b29a      	uxth	r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d30a      	bcc.n	800aac0 <tcp_receive+0x168>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aab4:	4413      	add	r3, r2
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800aabe:	e004      	b.n	800aaca <tcp_receive+0x172>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aac6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aad0:	2b02      	cmp	r3, #2
 800aad2:	d902      	bls.n	800aada <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f002 fb43 	bl	800d160 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800aada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aadc:	2b00      	cmp	r3, #0
 800aade:	f040 8161 	bne.w	800ada4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aaea:	e15b      	b.n	800ada4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aaec:	4b36      	ldr	r3, [pc, #216]	; (800abc8 <tcp_receive+0x270>)
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaf4:	1ad3      	subs	r3, r2, r3
 800aaf6:	3b01      	subs	r3, #1
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f2c0 814e 	blt.w	800ad9a <tcp_receive+0x442>
 800aafe:	4b32      	ldr	r3, [pc, #200]	; (800abc8 <tcp_receive+0x270>)
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab06:	1ad3      	subs	r3, r2, r3
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f300 8146 	bgt.w	800ad9a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	8b5b      	ldrh	r3, [r3, #26]
 800ab12:	f003 0304 	and.w	r3, r3, #4
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d010      	beq.n	800ab3c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	8b5b      	ldrh	r3, [r3, #26]
 800ab1e:	f023 0304 	bic.w	r3, r3, #4
 800ab22:	b29a      	uxth	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2200      	movs	r2, #0
 800ab38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ab4a:	10db      	asrs	r3, r3, #3
 800ab4c:	b21b      	sxth	r3, r3
 800ab4e:	b29a      	uxth	r2, r3
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	4413      	add	r3, r2
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	b21a      	sxth	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ab64:	4b18      	ldr	r3, [pc, #96]	; (800abc8 <tcp_receive+0x270>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	b29a      	uxth	r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	1ad3      	subs	r3, r2, r3
 800ab72:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ab7c:	4b12      	ldr	r3, [pc, #72]	; (800abc8 <tcp_receive+0x270>)
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	7d1b      	ldrb	r3, [r3, #20]
 800ab88:	2b03      	cmp	r3, #3
 800ab8a:	f240 8097 	bls.w	800acbc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d245      	bcs.n	800ac2a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	8b5b      	ldrh	r3, [r3, #26]
 800aba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d014      	beq.n	800abd4 <tcp_receive+0x27c>
 800abaa:	2301      	movs	r3, #1
 800abac:	e013      	b.n	800abd6 <tcp_receive+0x27e>
 800abae:	bf00      	nop
 800abb0:	080135bc 	.word	0x080135bc
 800abb4:	080138ec 	.word	0x080138ec
 800abb8:	08013608 	.word	0x08013608
 800abbc:	08013908 	.word	0x08013908
 800abc0:	20006844 	.word	0x20006844
 800abc4:	20006838 	.word	0x20006838
 800abc8:	2000683c 	.word	0x2000683c
 800abcc:	20006828 	.word	0x20006828
 800abd0:	20006842 	.word	0x20006842
 800abd4:	2302      	movs	r3, #2
 800abd6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800abda:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800abde:	b29a      	uxth	r2, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abe4:	fb12 f303 	smulbb	r3, r2, r3
 800abe8:	b29b      	uxth	r3, r3
 800abea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800abec:	4293      	cmp	r3, r2
 800abee:	bf28      	it	cs
 800abf0:	4613      	movcs	r3, r2
 800abf2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800abfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800abfc:	4413      	add	r3, r2
 800abfe:	b29a      	uxth	r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d309      	bcc.n	800ac1e <tcp_receive+0x2c6>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ac10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ac12:	4413      	add	r3, r2
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ac1c:	e04e      	b.n	800acbc <tcp_receive+0x364>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac24:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ac28:	e048      	b.n	800acbc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ac30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ac32:	4413      	add	r3, r2
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d309      	bcc.n	800ac54 <tcp_receive+0x2fc>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ac46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ac48:	4413      	add	r3, r2
 800ac4a:	b29a      	uxth	r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ac52:	e004      	b.n	800ac5e <tcp_receive+0x306>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d326      	bcc.n	800acbc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ac7a:	1ad3      	subs	r3, r2, r3
 800ac7c:	b29a      	uxth	r2, r3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac8e:	4413      	add	r3, r2
 800ac90:	b29a      	uxth	r2, r3
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d30a      	bcc.n	800acb2 <tcp_receive+0x35a>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aca6:	4413      	add	r3, r2
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800acb0:	e004      	b.n	800acbc <tcp_receive+0x364>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acb8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acc4:	4a98      	ldr	r2, [pc, #608]	; (800af28 <tcp_receive+0x5d0>)
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f7ff fdca 	bl	800a860 <tcp_free_acked_segments>
 800accc:	4602      	mov	r2, r0
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acda:	4a94      	ldr	r2, [pc, #592]	; (800af2c <tcp_receive+0x5d4>)
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f7ff fdbf 	bl	800a860 <tcp_free_acked_segments>
 800ace2:	4602      	mov	r2, r0
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acec:	2b00      	cmp	r3, #0
 800acee:	d104      	bne.n	800acfa <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acf6:	861a      	strh	r2, [r3, #48]	; 0x30
 800acf8:	e002      	b.n	800ad00 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d103      	bne.n	800ad16 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ad1c:	4b84      	ldr	r3, [pc, #528]	; (800af30 <tcp_receive+0x5d8>)
 800ad1e:	881b      	ldrh	r3, [r3, #0]
 800ad20:	4413      	add	r3, r2
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	8b5b      	ldrh	r3, [r3, #26]
 800ad2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d035      	beq.n	800ada2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d118      	bne.n	800ad70 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00c      	beq.n	800ad60 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad4e:	68db      	ldr	r3, [r3, #12]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7fa ff49 	bl	8005bea <lwip_htonl>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	dc20      	bgt.n	800ada2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	8b5b      	ldrh	r3, [r3, #26]
 800ad64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad68:	b29a      	uxth	r2, r3
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ad6e:	e018      	b.n	800ada2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7fa ff34 	bl	8005bea <lwip_htonl>
 800ad82:	4603      	mov	r3, r0
 800ad84:	1ae3      	subs	r3, r4, r3
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	dc0b      	bgt.n	800ada2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	8b5b      	ldrh	r3, [r3, #26]
 800ad8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ad98:	e003      	b.n	800ada2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f002 fbce 	bl	800d53c <tcp_send_empty_ack>
 800ada0:	e000      	b.n	800ada4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ada2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d05b      	beq.n	800ae64 <tcp_receive+0x50c>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adb0:	4b60      	ldr	r3, [pc, #384]	; (800af34 <tcp_receive+0x5dc>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	1ad3      	subs	r3, r2, r3
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	da54      	bge.n	800ae64 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800adba:	4b5f      	ldr	r3, [pc, #380]	; (800af38 <tcp_receive+0x5e0>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	1ad3      	subs	r3, r2, r3
 800adc8:	b29b      	uxth	r3, r3
 800adca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800adce:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800add8:	10db      	asrs	r3, r3, #3
 800adda:	b21b      	sxth	r3, r3
 800addc:	b29b      	uxth	r3, r3
 800adde:	1ad3      	subs	r3, r2, r3
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800adec:	b29a      	uxth	r2, r3
 800adee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800adf2:	4413      	add	r3, r2
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	b21a      	sxth	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800adfc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	da05      	bge.n	800ae10 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800ae04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ae08:	425b      	negs	r3, r3
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ae10:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ae1a:	109b      	asrs	r3, r3, #2
 800ae1c:	b21b      	sxth	r3, r3
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ae2e:	b29a      	uxth	r2, r3
 800ae30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ae34:	4413      	add	r3, r2
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	b21a      	sxth	r2, r3
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ae44:	10db      	asrs	r3, r3, #3
 800ae46:	b21b      	sxth	r3, r3
 800ae48:	b29a      	uxth	r2, r3
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	4413      	add	r3, r2
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	b21a      	sxth	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ae64:	4b35      	ldr	r3, [pc, #212]	; (800af3c <tcp_receive+0x5e4>)
 800ae66:	881b      	ldrh	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f000 84e2 	beq.w	800b832 <tcp_receive+0xeda>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	7d1b      	ldrb	r3, [r3, #20]
 800ae72:	2b06      	cmp	r3, #6
 800ae74:	f200 84dd 	bhi.w	800b832 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae7c:	4b30      	ldr	r3, [pc, #192]	; (800af40 <tcp_receive+0x5e8>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	3b01      	subs	r3, #1
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f2c0 808f 	blt.w	800afa8 <tcp_receive+0x650>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae8e:	4b2b      	ldr	r3, [pc, #172]	; (800af3c <tcp_receive+0x5e4>)
 800ae90:	881b      	ldrh	r3, [r3, #0]
 800ae92:	4619      	mov	r1, r3
 800ae94:	4b2a      	ldr	r3, [pc, #168]	; (800af40 <tcp_receive+0x5e8>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	440b      	add	r3, r1
 800ae9a:	1ad3      	subs	r3, r2, r3
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	f300 8082 	bgt.w	800afa8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800aea4:	4b27      	ldr	r3, [pc, #156]	; (800af44 <tcp_receive+0x5ec>)
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aeae:	4b24      	ldr	r3, [pc, #144]	; (800af40 <tcp_receive+0x5e8>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800aeb6:	4b23      	ldr	r3, [pc, #140]	; (800af44 <tcp_receive+0x5ec>)
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d106      	bne.n	800aecc <tcp_receive+0x574>
 800aebe:	4b22      	ldr	r3, [pc, #136]	; (800af48 <tcp_receive+0x5f0>)
 800aec0:	f240 5294 	movw	r2, #1428	; 0x594
 800aec4:	4921      	ldr	r1, [pc, #132]	; (800af4c <tcp_receive+0x5f4>)
 800aec6:	4822      	ldr	r0, [pc, #136]	; (800af50 <tcp_receive+0x5f8>)
 800aec8:	f005 fb10 	bl	80104ec <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800aecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aece:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d906      	bls.n	800aee4 <tcp_receive+0x58c>
 800aed6:	4b1c      	ldr	r3, [pc, #112]	; (800af48 <tcp_receive+0x5f0>)
 800aed8:	f240 5295 	movw	r2, #1429	; 0x595
 800aedc:	491d      	ldr	r1, [pc, #116]	; (800af54 <tcp_receive+0x5fc>)
 800aede:	481c      	ldr	r0, [pc, #112]	; (800af50 <tcp_receive+0x5f8>)
 800aee0:	f005 fb04 	bl	80104ec <iprintf>
      off = (u16_t)off32;
 800aee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800aeea:	4b16      	ldr	r3, [pc, #88]	; (800af44 <tcp_receive+0x5ec>)
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	891b      	ldrh	r3, [r3, #8]
 800aef0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d906      	bls.n	800af06 <tcp_receive+0x5ae>
 800aef8:	4b13      	ldr	r3, [pc, #76]	; (800af48 <tcp_receive+0x5f0>)
 800aefa:	f240 5297 	movw	r2, #1431	; 0x597
 800aefe:	4916      	ldr	r1, [pc, #88]	; (800af58 <tcp_receive+0x600>)
 800af00:	4813      	ldr	r0, [pc, #76]	; (800af50 <tcp_receive+0x5f8>)
 800af02:	f005 faf3 	bl	80104ec <iprintf>
      inseg.len -= off;
 800af06:	4b0f      	ldr	r3, [pc, #60]	; (800af44 <tcp_receive+0x5ec>)
 800af08:	891a      	ldrh	r2, [r3, #8]
 800af0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800af0e:	1ad3      	subs	r3, r2, r3
 800af10:	b29a      	uxth	r2, r3
 800af12:	4b0c      	ldr	r3, [pc, #48]	; (800af44 <tcp_receive+0x5ec>)
 800af14:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800af16:	4b0b      	ldr	r3, [pc, #44]	; (800af44 <tcp_receive+0x5ec>)
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	891a      	ldrh	r2, [r3, #8]
 800af1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800af20:	1ad3      	subs	r3, r2, r3
 800af22:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800af24:	e02a      	b.n	800af7c <tcp_receive+0x624>
 800af26:	bf00      	nop
 800af28:	08013924 	.word	0x08013924
 800af2c:	0801392c 	.word	0x0801392c
 800af30:	20006840 	.word	0x20006840
 800af34:	2000683c 	.word	0x2000683c
 800af38:	20006800 	.word	0x20006800
 800af3c:	20006842 	.word	0x20006842
 800af40:	20006838 	.word	0x20006838
 800af44:	20006818 	.word	0x20006818
 800af48:	080135bc 	.word	0x080135bc
 800af4c:	08013934 	.word	0x08013934
 800af50:	08013608 	.word	0x08013608
 800af54:	08013944 	.word	0x08013944
 800af58:	08013954 	.word	0x08013954
        off -= p->len;
 800af5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af5e:	895b      	ldrh	r3, [r3, #10]
 800af60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800af64:	1ad3      	subs	r3, r2, r3
 800af66:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800af6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af6c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800af6e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800af70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af72:	2200      	movs	r2, #0
 800af74:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800af76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800af7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af7e:	895b      	ldrh	r3, [r3, #10]
 800af80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800af84:	429a      	cmp	r2, r3
 800af86:	d8e9      	bhi.n	800af5c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800af88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800af8c:	4619      	mov	r1, r3
 800af8e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800af90:	f7fc f86c 	bl	800706c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af98:	4a91      	ldr	r2, [pc, #580]	; (800b1e0 <tcp_receive+0x888>)
 800af9a:	6013      	str	r3, [r2, #0]
 800af9c:	4b91      	ldr	r3, [pc, #580]	; (800b1e4 <tcp_receive+0x88c>)
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	4a8f      	ldr	r2, [pc, #572]	; (800b1e0 <tcp_receive+0x888>)
 800afa2:	6812      	ldr	r2, [r2, #0]
 800afa4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800afa6:	e00d      	b.n	800afc4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800afa8:	4b8d      	ldr	r3, [pc, #564]	; (800b1e0 <tcp_receive+0x888>)
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb0:	1ad3      	subs	r3, r2, r3
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	da06      	bge.n	800afc4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	8b5b      	ldrh	r3, [r3, #26]
 800afba:	f043 0302 	orr.w	r3, r3, #2
 800afbe:	b29a      	uxth	r2, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800afc4:	4b86      	ldr	r3, [pc, #536]	; (800b1e0 <tcp_receive+0x888>)
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afcc:	1ad3      	subs	r3, r2, r3
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f2c0 842a 	blt.w	800b828 <tcp_receive+0xed0>
 800afd4:	4b82      	ldr	r3, [pc, #520]	; (800b1e0 <tcp_receive+0x888>)
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afdc:	6879      	ldr	r1, [r7, #4]
 800afde:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800afe0:	440b      	add	r3, r1
 800afe2:	1ad3      	subs	r3, r2, r3
 800afe4:	3301      	adds	r3, #1
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f300 841e 	bgt.w	800b828 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aff0:	4b7b      	ldr	r3, [pc, #492]	; (800b1e0 <tcp_receive+0x888>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	f040 829a 	bne.w	800b52e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800affa:	4b7a      	ldr	r3, [pc, #488]	; (800b1e4 <tcp_receive+0x88c>)
 800affc:	891c      	ldrh	r4, [r3, #8]
 800affe:	4b79      	ldr	r3, [pc, #484]	; (800b1e4 <tcp_receive+0x88c>)
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	899b      	ldrh	r3, [r3, #12]
 800b004:	b29b      	uxth	r3, r3
 800b006:	4618      	mov	r0, r3
 800b008:	f7fa fdda 	bl	8005bc0 <lwip_htons>
 800b00c:	4603      	mov	r3, r0
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	f003 0303 	and.w	r3, r3, #3
 800b014:	2b00      	cmp	r3, #0
 800b016:	d001      	beq.n	800b01c <tcp_receive+0x6c4>
 800b018:	2301      	movs	r3, #1
 800b01a:	e000      	b.n	800b01e <tcp_receive+0x6c6>
 800b01c:	2300      	movs	r3, #0
 800b01e:	4423      	add	r3, r4
 800b020:	b29a      	uxth	r2, r3
 800b022:	4b71      	ldr	r3, [pc, #452]	; (800b1e8 <tcp_receive+0x890>)
 800b024:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b02a:	4b6f      	ldr	r3, [pc, #444]	; (800b1e8 <tcp_receive+0x890>)
 800b02c:	881b      	ldrh	r3, [r3, #0]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d275      	bcs.n	800b11e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b032:	4b6c      	ldr	r3, [pc, #432]	; (800b1e4 <tcp_receive+0x88c>)
 800b034:	68db      	ldr	r3, [r3, #12]
 800b036:	899b      	ldrh	r3, [r3, #12]
 800b038:	b29b      	uxth	r3, r3
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7fa fdc0 	bl	8005bc0 <lwip_htons>
 800b040:	4603      	mov	r3, r0
 800b042:	b2db      	uxtb	r3, r3
 800b044:	f003 0301 	and.w	r3, r3, #1
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d01f      	beq.n	800b08c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b04c:	4b65      	ldr	r3, [pc, #404]	; (800b1e4 <tcp_receive+0x88c>)
 800b04e:	68db      	ldr	r3, [r3, #12]
 800b050:	899b      	ldrh	r3, [r3, #12]
 800b052:	b29b      	uxth	r3, r3
 800b054:	b21b      	sxth	r3, r3
 800b056:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b05a:	b21c      	sxth	r4, r3
 800b05c:	4b61      	ldr	r3, [pc, #388]	; (800b1e4 <tcp_receive+0x88c>)
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	899b      	ldrh	r3, [r3, #12]
 800b062:	b29b      	uxth	r3, r3
 800b064:	4618      	mov	r0, r3
 800b066:	f7fa fdab 	bl	8005bc0 <lwip_htons>
 800b06a:	4603      	mov	r3, r0
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	b29b      	uxth	r3, r3
 800b070:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b074:	b29b      	uxth	r3, r3
 800b076:	4618      	mov	r0, r3
 800b078:	f7fa fda2 	bl	8005bc0 <lwip_htons>
 800b07c:	4603      	mov	r3, r0
 800b07e:	b21b      	sxth	r3, r3
 800b080:	4323      	orrs	r3, r4
 800b082:	b21a      	sxth	r2, r3
 800b084:	4b57      	ldr	r3, [pc, #348]	; (800b1e4 <tcp_receive+0x88c>)
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	b292      	uxth	r2, r2
 800b08a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b090:	4b54      	ldr	r3, [pc, #336]	; (800b1e4 <tcp_receive+0x88c>)
 800b092:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b094:	4b53      	ldr	r3, [pc, #332]	; (800b1e4 <tcp_receive+0x88c>)
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	899b      	ldrh	r3, [r3, #12]
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7fa fd8f 	bl	8005bc0 <lwip_htons>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	f003 0302 	and.w	r3, r3, #2
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d005      	beq.n	800b0ba <tcp_receive+0x762>
            inseg.len -= 1;
 800b0ae:	4b4d      	ldr	r3, [pc, #308]	; (800b1e4 <tcp_receive+0x88c>)
 800b0b0:	891b      	ldrh	r3, [r3, #8]
 800b0b2:	3b01      	subs	r3, #1
 800b0b4:	b29a      	uxth	r2, r3
 800b0b6:	4b4b      	ldr	r3, [pc, #300]	; (800b1e4 <tcp_receive+0x88c>)
 800b0b8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b0ba:	4b4a      	ldr	r3, [pc, #296]	; (800b1e4 <tcp_receive+0x88c>)
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	4a49      	ldr	r2, [pc, #292]	; (800b1e4 <tcp_receive+0x88c>)
 800b0c0:	8912      	ldrh	r2, [r2, #8]
 800b0c2:	4611      	mov	r1, r2
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7fb fed1 	bl	8006e6c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b0ca:	4b46      	ldr	r3, [pc, #280]	; (800b1e4 <tcp_receive+0x88c>)
 800b0cc:	891c      	ldrh	r4, [r3, #8]
 800b0ce:	4b45      	ldr	r3, [pc, #276]	; (800b1e4 <tcp_receive+0x88c>)
 800b0d0:	68db      	ldr	r3, [r3, #12]
 800b0d2:	899b      	ldrh	r3, [r3, #12]
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7fa fd72 	bl	8005bc0 <lwip_htons>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	f003 0303 	and.w	r3, r3, #3
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d001      	beq.n	800b0ec <tcp_receive+0x794>
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	e000      	b.n	800b0ee <tcp_receive+0x796>
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	4423      	add	r3, r4
 800b0f0:	b29a      	uxth	r2, r3
 800b0f2:	4b3d      	ldr	r3, [pc, #244]	; (800b1e8 <tcp_receive+0x890>)
 800b0f4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b0f6:	4b3c      	ldr	r3, [pc, #240]	; (800b1e8 <tcp_receive+0x890>)
 800b0f8:	881b      	ldrh	r3, [r3, #0]
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	4b38      	ldr	r3, [pc, #224]	; (800b1e0 <tcp_receive+0x888>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	441a      	add	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b106:	6879      	ldr	r1, [r7, #4]
 800b108:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b10a:	440b      	add	r3, r1
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d006      	beq.n	800b11e <tcp_receive+0x7c6>
 800b110:	4b36      	ldr	r3, [pc, #216]	; (800b1ec <tcp_receive+0x894>)
 800b112:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800b116:	4936      	ldr	r1, [pc, #216]	; (800b1f0 <tcp_receive+0x898>)
 800b118:	4836      	ldr	r0, [pc, #216]	; (800b1f4 <tcp_receive+0x89c>)
 800b11a:	f005 f9e7 	bl	80104ec <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b122:	2b00      	cmp	r3, #0
 800b124:	f000 80e7 	beq.w	800b2f6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b128:	4b2e      	ldr	r3, [pc, #184]	; (800b1e4 <tcp_receive+0x88c>)
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	899b      	ldrh	r3, [r3, #12]
 800b12e:	b29b      	uxth	r3, r3
 800b130:	4618      	mov	r0, r3
 800b132:	f7fa fd45 	bl	8005bc0 <lwip_htons>
 800b136:	4603      	mov	r3, r0
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	f003 0301 	and.w	r3, r3, #1
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d010      	beq.n	800b164 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b142:	e00a      	b.n	800b15a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b148:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b14e:	681a      	ldr	r2, [r3, #0]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f7fd fcdc 	bl	8008b12 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d1f0      	bne.n	800b144 <tcp_receive+0x7ec>
 800b162:	e0c8      	b.n	800b2f6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b168:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b16a:	e052      	b.n	800b212 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b16c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	899b      	ldrh	r3, [r3, #12]
 800b172:	b29b      	uxth	r3, r3
 800b174:	4618      	mov	r0, r3
 800b176:	f7fa fd23 	bl	8005bc0 <lwip_htons>
 800b17a:	4603      	mov	r3, r0
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	f003 0301 	and.w	r3, r3, #1
 800b182:	2b00      	cmp	r3, #0
 800b184:	d03d      	beq.n	800b202 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b186:	4b17      	ldr	r3, [pc, #92]	; (800b1e4 <tcp_receive+0x88c>)
 800b188:	68db      	ldr	r3, [r3, #12]
 800b18a:	899b      	ldrh	r3, [r3, #12]
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	4618      	mov	r0, r3
 800b190:	f7fa fd16 	bl	8005bc0 <lwip_htons>
 800b194:	4603      	mov	r3, r0
 800b196:	b2db      	uxtb	r3, r3
 800b198:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d130      	bne.n	800b202 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b1a0:	4b10      	ldr	r3, [pc, #64]	; (800b1e4 <tcp_receive+0x88c>)
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	899b      	ldrh	r3, [r3, #12]
 800b1a6:	b29c      	uxth	r4, r3
 800b1a8:	2001      	movs	r0, #1
 800b1aa:	f7fa fd09 	bl	8005bc0 <lwip_htons>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	4b0c      	ldr	r3, [pc, #48]	; (800b1e4 <tcp_receive+0x88c>)
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	4322      	orrs	r2, r4
 800b1b8:	b292      	uxth	r2, r2
 800b1ba:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b1bc:	4b09      	ldr	r3, [pc, #36]	; (800b1e4 <tcp_receive+0x88c>)
 800b1be:	891c      	ldrh	r4, [r3, #8]
 800b1c0:	4b08      	ldr	r3, [pc, #32]	; (800b1e4 <tcp_receive+0x88c>)
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	899b      	ldrh	r3, [r3, #12]
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7fa fcf9 	bl	8005bc0 <lwip_htons>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	f003 0303 	and.w	r3, r3, #3
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00e      	beq.n	800b1f8 <tcp_receive+0x8a0>
 800b1da:	2301      	movs	r3, #1
 800b1dc:	e00d      	b.n	800b1fa <tcp_receive+0x8a2>
 800b1de:	bf00      	nop
 800b1e0:	20006838 	.word	0x20006838
 800b1e4:	20006818 	.word	0x20006818
 800b1e8:	20006842 	.word	0x20006842
 800b1ec:	080135bc 	.word	0x080135bc
 800b1f0:	08013964 	.word	0x08013964
 800b1f4:	08013608 	.word	0x08013608
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	4423      	add	r3, r4
 800b1fc:	b29a      	uxth	r2, r3
 800b1fe:	4b98      	ldr	r3, [pc, #608]	; (800b460 <tcp_receive+0xb08>)
 800b200:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b204:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800b20c:	6938      	ldr	r0, [r7, #16]
 800b20e:	f7fd fc80 	bl	8008b12 <tcp_seg_free>
            while (next &&
 800b212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00e      	beq.n	800b236 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b218:	4b91      	ldr	r3, [pc, #580]	; (800b460 <tcp_receive+0xb08>)
 800b21a:	881b      	ldrh	r3, [r3, #0]
 800b21c:	461a      	mov	r2, r3
 800b21e:	4b91      	ldr	r3, [pc, #580]	; (800b464 <tcp_receive+0xb0c>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	441a      	add	r2, r3
 800b224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b22c:	8909      	ldrh	r1, [r1, #8]
 800b22e:	440b      	add	r3, r1
 800b230:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b232:	2b00      	cmp	r3, #0
 800b234:	da9a      	bge.n	800b16c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d059      	beq.n	800b2f0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800b23c:	4b88      	ldr	r3, [pc, #544]	; (800b460 <tcp_receive+0xb08>)
 800b23e:	881b      	ldrh	r3, [r3, #0]
 800b240:	461a      	mov	r2, r3
 800b242:	4b88      	ldr	r3, [pc, #544]	; (800b464 <tcp_receive+0xb0c>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	441a      	add	r2, r3
 800b248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b250:	2b00      	cmp	r3, #0
 800b252:	dd4d      	ble.n	800b2f0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	b29a      	uxth	r2, r3
 800b25c:	4b81      	ldr	r3, [pc, #516]	; (800b464 <tcp_receive+0xb0c>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	b29b      	uxth	r3, r3
 800b262:	1ad3      	subs	r3, r2, r3
 800b264:	b29a      	uxth	r2, r3
 800b266:	4b80      	ldr	r3, [pc, #512]	; (800b468 <tcp_receive+0xb10>)
 800b268:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b26a:	4b7f      	ldr	r3, [pc, #508]	; (800b468 <tcp_receive+0xb10>)
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	899b      	ldrh	r3, [r3, #12]
 800b270:	b29b      	uxth	r3, r3
 800b272:	4618      	mov	r0, r3
 800b274:	f7fa fca4 	bl	8005bc0 <lwip_htons>
 800b278:	4603      	mov	r3, r0
 800b27a:	b2db      	uxtb	r3, r3
 800b27c:	f003 0302 	and.w	r3, r3, #2
 800b280:	2b00      	cmp	r3, #0
 800b282:	d005      	beq.n	800b290 <tcp_receive+0x938>
                inseg.len -= 1;
 800b284:	4b78      	ldr	r3, [pc, #480]	; (800b468 <tcp_receive+0xb10>)
 800b286:	891b      	ldrh	r3, [r3, #8]
 800b288:	3b01      	subs	r3, #1
 800b28a:	b29a      	uxth	r2, r3
 800b28c:	4b76      	ldr	r3, [pc, #472]	; (800b468 <tcp_receive+0xb10>)
 800b28e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b290:	4b75      	ldr	r3, [pc, #468]	; (800b468 <tcp_receive+0xb10>)
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	4a74      	ldr	r2, [pc, #464]	; (800b468 <tcp_receive+0xb10>)
 800b296:	8912      	ldrh	r2, [r2, #8]
 800b298:	4611      	mov	r1, r2
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fb fde6 	bl	8006e6c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b2a0:	4b71      	ldr	r3, [pc, #452]	; (800b468 <tcp_receive+0xb10>)
 800b2a2:	891c      	ldrh	r4, [r3, #8]
 800b2a4:	4b70      	ldr	r3, [pc, #448]	; (800b468 <tcp_receive+0xb10>)
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	899b      	ldrh	r3, [r3, #12]
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7fa fc87 	bl	8005bc0 <lwip_htons>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	f003 0303 	and.w	r3, r3, #3
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d001      	beq.n	800b2c2 <tcp_receive+0x96a>
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e000      	b.n	800b2c4 <tcp_receive+0x96c>
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	4423      	add	r3, r4
 800b2c6:	b29a      	uxth	r2, r3
 800b2c8:	4b65      	ldr	r3, [pc, #404]	; (800b460 <tcp_receive+0xb08>)
 800b2ca:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b2cc:	4b64      	ldr	r3, [pc, #400]	; (800b460 <tcp_receive+0xb08>)
 800b2ce:	881b      	ldrh	r3, [r3, #0]
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	4b64      	ldr	r3, [pc, #400]	; (800b464 <tcp_receive+0xb0c>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	441a      	add	r2, r3
 800b2d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d006      	beq.n	800b2f0 <tcp_receive+0x998>
 800b2e2:	4b62      	ldr	r3, [pc, #392]	; (800b46c <tcp_receive+0xb14>)
 800b2e4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800b2e8:	4961      	ldr	r1, [pc, #388]	; (800b470 <tcp_receive+0xb18>)
 800b2ea:	4862      	ldr	r0, [pc, #392]	; (800b474 <tcp_receive+0xb1c>)
 800b2ec:	f005 f8fe 	bl	80104ec <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b2f4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b2f6:	4b5a      	ldr	r3, [pc, #360]	; (800b460 <tcp_receive+0xb08>)
 800b2f8:	881b      	ldrh	r3, [r3, #0]
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	4b59      	ldr	r3, [pc, #356]	; (800b464 <tcp_receive+0xb0c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	441a      	add	r2, r3
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b30a:	4b55      	ldr	r3, [pc, #340]	; (800b460 <tcp_receive+0xb08>)
 800b30c:	881b      	ldrh	r3, [r3, #0]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d206      	bcs.n	800b320 <tcp_receive+0x9c8>
 800b312:	4b56      	ldr	r3, [pc, #344]	; (800b46c <tcp_receive+0xb14>)
 800b314:	f240 6207 	movw	r2, #1543	; 0x607
 800b318:	4957      	ldr	r1, [pc, #348]	; (800b478 <tcp_receive+0xb20>)
 800b31a:	4856      	ldr	r0, [pc, #344]	; (800b474 <tcp_receive+0xb1c>)
 800b31c:	f005 f8e6 	bl	80104ec <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b324:	4b4e      	ldr	r3, [pc, #312]	; (800b460 <tcp_receive+0xb08>)
 800b326:	881b      	ldrh	r3, [r3, #0]
 800b328:	1ad3      	subs	r3, r2, r3
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f7fc fdb1 	bl	8007e98 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b336:	4b4c      	ldr	r3, [pc, #304]	; (800b468 <tcp_receive+0xb10>)
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	891b      	ldrh	r3, [r3, #8]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d006      	beq.n	800b34e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800b340:	4b49      	ldr	r3, [pc, #292]	; (800b468 <tcp_receive+0xb10>)
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	4a4d      	ldr	r2, [pc, #308]	; (800b47c <tcp_receive+0xb24>)
 800b346:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b348:	4b47      	ldr	r3, [pc, #284]	; (800b468 <tcp_receive+0xb10>)
 800b34a:	2200      	movs	r2, #0
 800b34c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b34e:	4b46      	ldr	r3, [pc, #280]	; (800b468 <tcp_receive+0xb10>)
 800b350:	68db      	ldr	r3, [r3, #12]
 800b352:	899b      	ldrh	r3, [r3, #12]
 800b354:	b29b      	uxth	r3, r3
 800b356:	4618      	mov	r0, r3
 800b358:	f7fa fc32 	bl	8005bc0 <lwip_htons>
 800b35c:	4603      	mov	r3, r0
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	f003 0301 	and.w	r3, r3, #1
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 80b8 	beq.w	800b4da <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b36a:	4b45      	ldr	r3, [pc, #276]	; (800b480 <tcp_receive+0xb28>)
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	f043 0320 	orr.w	r3, r3, #32
 800b372:	b2da      	uxtb	r2, r3
 800b374:	4b42      	ldr	r3, [pc, #264]	; (800b480 <tcp_receive+0xb28>)
 800b376:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b378:	e0af      	b.n	800b4da <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b37e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	4a36      	ldr	r2, [pc, #216]	; (800b464 <tcp_receive+0xb0c>)
 800b38a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	891b      	ldrh	r3, [r3, #8]
 800b390:	461c      	mov	r4, r3
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	899b      	ldrh	r3, [r3, #12]
 800b398:	b29b      	uxth	r3, r3
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7fa fc10 	bl	8005bc0 <lwip_htons>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	f003 0303 	and.w	r3, r3, #3
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d001      	beq.n	800b3b0 <tcp_receive+0xa58>
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e000      	b.n	800b3b2 <tcp_receive+0xa5a>
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	191a      	adds	r2, r3, r4
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b8:	441a      	add	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3c2:	461c      	mov	r4, r3
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	891b      	ldrh	r3, [r3, #8]
 800b3c8:	461d      	mov	r5, r3
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	68db      	ldr	r3, [r3, #12]
 800b3ce:	899b      	ldrh	r3, [r3, #12]
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7fa fbf4 	bl	8005bc0 <lwip_htons>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	f003 0303 	and.w	r3, r3, #3
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d001      	beq.n	800b3e8 <tcp_receive+0xa90>
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	e000      	b.n	800b3ea <tcp_receive+0xa92>
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	442b      	add	r3, r5
 800b3ec:	429c      	cmp	r4, r3
 800b3ee:	d206      	bcs.n	800b3fe <tcp_receive+0xaa6>
 800b3f0:	4b1e      	ldr	r3, [pc, #120]	; (800b46c <tcp_receive+0xb14>)
 800b3f2:	f240 622b 	movw	r2, #1579	; 0x62b
 800b3f6:	4923      	ldr	r1, [pc, #140]	; (800b484 <tcp_receive+0xb2c>)
 800b3f8:	481e      	ldr	r0, [pc, #120]	; (800b474 <tcp_receive+0xb1c>)
 800b3fa:	f005 f877 	bl	80104ec <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	891b      	ldrh	r3, [r3, #8]
 800b402:	461c      	mov	r4, r3
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	899b      	ldrh	r3, [r3, #12]
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7fa fbd7 	bl	8005bc0 <lwip_htons>
 800b412:	4603      	mov	r3, r0
 800b414:	b2db      	uxtb	r3, r3
 800b416:	f003 0303 	and.w	r3, r3, #3
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d001      	beq.n	800b422 <tcp_receive+0xaca>
 800b41e:	2301      	movs	r3, #1
 800b420:	e000      	b.n	800b424 <tcp_receive+0xacc>
 800b422:	2300      	movs	r3, #0
 800b424:	1919      	adds	r1, r3, r4
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b42a:	b28b      	uxth	r3, r1
 800b42c:	1ad3      	subs	r3, r2, r3
 800b42e:	b29a      	uxth	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f7fc fd2f 	bl	8007e98 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	891b      	ldrh	r3, [r3, #8]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d028      	beq.n	800b496 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b444:	4b0d      	ldr	r3, [pc, #52]	; (800b47c <tcp_receive+0xb24>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d01d      	beq.n	800b488 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800b44c:	4b0b      	ldr	r3, [pc, #44]	; (800b47c <tcp_receive+0xb24>)
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	4619      	mov	r1, r3
 800b456:	4610      	mov	r0, r2
 800b458:	f7fb ff50 	bl	80072fc <pbuf_cat>
 800b45c:	e018      	b.n	800b490 <tcp_receive+0xb38>
 800b45e:	bf00      	nop
 800b460:	20006842 	.word	0x20006842
 800b464:	20006838 	.word	0x20006838
 800b468:	20006818 	.word	0x20006818
 800b46c:	080135bc 	.word	0x080135bc
 800b470:	0801399c 	.word	0x0801399c
 800b474:	08013608 	.word	0x08013608
 800b478:	080139d8 	.word	0x080139d8
 800b47c:	20006848 	.word	0x20006848
 800b480:	20006845 	.word	0x20006845
 800b484:	080139f8 	.word	0x080139f8
            } else {
              recv_data = cseg->p;
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	4a70      	ldr	r2, [pc, #448]	; (800b650 <tcp_receive+0xcf8>)
 800b48e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	2200      	movs	r2, #0
 800b494:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	68db      	ldr	r3, [r3, #12]
 800b49a:	899b      	ldrh	r3, [r3, #12]
 800b49c:	b29b      	uxth	r3, r3
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f7fa fb8e 	bl	8005bc0 <lwip_htons>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	f003 0301 	and.w	r3, r3, #1
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00d      	beq.n	800b4cc <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b4b0:	4b68      	ldr	r3, [pc, #416]	; (800b654 <tcp_receive+0xcfc>)
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	f043 0320 	orr.w	r3, r3, #32
 800b4b8:	b2da      	uxtb	r2, r3
 800b4ba:	4b66      	ldr	r3, [pc, #408]	; (800b654 <tcp_receive+0xcfc>)
 800b4bc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	7d1b      	ldrb	r3, [r3, #20]
 800b4c2:	2b04      	cmp	r3, #4
 800b4c4:	d102      	bne.n	800b4cc <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2207      	movs	r2, #7
 800b4ca:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800b4d4:	68b8      	ldr	r0, [r7, #8]
 800b4d6:	f7fd fb1c 	bl	8008b12 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d008      	beq.n	800b4f4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	685a      	ldr	r2, [r3, #4]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	f43f af43 	beq.w	800b37a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	8b5b      	ldrh	r3, [r3, #26]
 800b4f8:	f003 0301 	and.w	r3, r3, #1
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d00e      	beq.n	800b51e <tcp_receive+0xbc6>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	8b5b      	ldrh	r3, [r3, #26]
 800b504:	f023 0301 	bic.w	r3, r3, #1
 800b508:	b29a      	uxth	r2, r3
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	835a      	strh	r2, [r3, #26]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	8b5b      	ldrh	r3, [r3, #26]
 800b512:	f043 0302 	orr.w	r3, r3, #2
 800b516:	b29a      	uxth	r2, r3
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b51c:	e188      	b.n	800b830 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	8b5b      	ldrh	r3, [r3, #26]
 800b522:	f043 0301 	orr.w	r3, r3, #1
 800b526:	b29a      	uxth	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b52c:	e180      	b.n	800b830 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b532:	2b00      	cmp	r3, #0
 800b534:	d106      	bne.n	800b544 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b536:	4848      	ldr	r0, [pc, #288]	; (800b658 <tcp_receive+0xd00>)
 800b538:	f7fd fb04 	bl	8008b44 <tcp_seg_copy>
 800b53c:	4602      	mov	r2, r0
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	675a      	str	r2, [r3, #116]	; 0x74
 800b542:	e16d      	b.n	800b820 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b544:	2300      	movs	r3, #0
 800b546:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b54c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b54e:	e157      	b.n	800b800 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800b550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	685a      	ldr	r2, [r3, #4]
 800b556:	4b41      	ldr	r3, [pc, #260]	; (800b65c <tcp_receive+0xd04>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d11d      	bne.n	800b59a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b55e:	4b3e      	ldr	r3, [pc, #248]	; (800b658 <tcp_receive+0xd00>)
 800b560:	891a      	ldrh	r2, [r3, #8]
 800b562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b564:	891b      	ldrh	r3, [r3, #8]
 800b566:	429a      	cmp	r2, r3
 800b568:	f240 814f 	bls.w	800b80a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b56c:	483a      	ldr	r0, [pc, #232]	; (800b658 <tcp_receive+0xd00>)
 800b56e:	f7fd fae9 	bl	8008b44 <tcp_seg_copy>
 800b572:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	2b00      	cmp	r3, #0
 800b578:	f000 8149 	beq.w	800b80e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800b57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d003      	beq.n	800b58a <tcp_receive+0xc32>
                    prev->next = cseg;
 800b582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b584:	697a      	ldr	r2, [r7, #20]
 800b586:	601a      	str	r2, [r3, #0]
 800b588:	e002      	b.n	800b590 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	697a      	ldr	r2, [r7, #20]
 800b58e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b590:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b592:	6978      	ldr	r0, [r7, #20]
 800b594:	f7ff f8dc 	bl	800a750 <tcp_oos_insert_segment>
                }
                break;
 800b598:	e139      	b.n	800b80e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d117      	bne.n	800b5d0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b5a0:	4b2e      	ldr	r3, [pc, #184]	; (800b65c <tcp_receive+0xd04>)
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a6:	68db      	ldr	r3, [r3, #12]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	1ad3      	subs	r3, r2, r3
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	da57      	bge.n	800b660 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b5b0:	4829      	ldr	r0, [pc, #164]	; (800b658 <tcp_receive+0xd00>)
 800b5b2:	f7fd fac7 	bl	8008b44 <tcp_seg_copy>
 800b5b6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	f000 8129 	beq.w	800b812 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	69ba      	ldr	r2, [r7, #24]
 800b5c4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b5c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b5c8:	69b8      	ldr	r0, [r7, #24]
 800b5ca:	f7ff f8c1 	bl	800a750 <tcp_oos_insert_segment>
                  }
                  break;
 800b5ce:	e120      	b.n	800b812 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b5d0:	4b22      	ldr	r3, [pc, #136]	; (800b65c <tcp_receive+0xd04>)
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	1ad3      	subs	r3, r2, r3
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	db3e      	blt.n	800b660 <tcp_receive+0xd08>
 800b5e2:	4b1e      	ldr	r3, [pc, #120]	; (800b65c <tcp_receive+0xd04>)
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	1ad3      	subs	r3, r2, r3
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	dc35      	bgt.n	800b660 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b5f4:	4818      	ldr	r0, [pc, #96]	; (800b658 <tcp_receive+0xd00>)
 800b5f6:	f7fd faa5 	bl	8008b44 <tcp_seg_copy>
 800b5fa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f000 8109 	beq.w	800b816 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b60c:	8912      	ldrh	r2, [r2, #8]
 800b60e:	441a      	add	r2, r3
 800b610:	4b12      	ldr	r3, [pc, #72]	; (800b65c <tcp_receive+0xd04>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	1ad3      	subs	r3, r2, r3
 800b616:	2b00      	cmp	r3, #0
 800b618:	dd12      	ble.n	800b640 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b61a:	4b10      	ldr	r3, [pc, #64]	; (800b65c <tcp_receive+0xd04>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	b29a      	uxth	r2, r3
 800b620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	b29b      	uxth	r3, r3
 800b628:	1ad3      	subs	r3, r2, r3
 800b62a:	b29a      	uxth	r2, r3
 800b62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b62e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b632:	685a      	ldr	r2, [r3, #4]
 800b634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b636:	891b      	ldrh	r3, [r3, #8]
 800b638:	4619      	mov	r1, r3
 800b63a:	4610      	mov	r0, r2
 800b63c:	f7fb fc16 	bl	8006e6c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b642:	69fa      	ldr	r2, [r7, #28]
 800b644:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b646:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b648:	69f8      	ldr	r0, [r7, #28]
 800b64a:	f7ff f881 	bl	800a750 <tcp_oos_insert_segment>
                  }
                  break;
 800b64e:	e0e2      	b.n	800b816 <tcp_receive+0xebe>
 800b650:	20006848 	.word	0x20006848
 800b654:	20006845 	.word	0x20006845
 800b658:	20006818 	.word	0x20006818
 800b65c:	20006838 	.word	0x20006838
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800b660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b662:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f040 80c6 	bne.w	800b7fa <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b66e:	4b80      	ldr	r3, [pc, #512]	; (800b870 <tcp_receive+0xf18>)
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	f340 80bd 	ble.w	800b7fa <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	899b      	ldrh	r3, [r3, #12]
 800b686:	b29b      	uxth	r3, r3
 800b688:	4618      	mov	r0, r3
 800b68a:	f7fa fa99 	bl	8005bc0 <lwip_htons>
 800b68e:	4603      	mov	r3, r0
 800b690:	b2db      	uxtb	r3, r3
 800b692:	f003 0301 	and.w	r3, r3, #1
 800b696:	2b00      	cmp	r3, #0
 800b698:	f040 80bf 	bne.w	800b81a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b69c:	4875      	ldr	r0, [pc, #468]	; (800b874 <tcp_receive+0xf1c>)
 800b69e:	f7fd fa51 	bl	8008b44 <tcp_seg_copy>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	f000 80b6 	beq.w	800b81e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6ba:	8912      	ldrh	r2, [r2, #8]
 800b6bc:	441a      	add	r2, r3
 800b6be:	4b6c      	ldr	r3, [pc, #432]	; (800b870 <tcp_receive+0xf18>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	1ad3      	subs	r3, r2, r3
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	dd12      	ble.n	800b6ee <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b6c8:	4b69      	ldr	r3, [pc, #420]	; (800b870 <tcp_receive+0xf18>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	b29a      	uxth	r2, r3
 800b6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	1ad3      	subs	r3, r2, r3
 800b6d8:	b29a      	uxth	r2, r3
 800b6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6dc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e0:	685a      	ldr	r2, [r3, #4]
 800b6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e4:	891b      	ldrh	r3, [r3, #8]
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	4610      	mov	r0, r2
 800b6ea:	f7fb fbbf 	bl	8006e6c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b6ee:	4b62      	ldr	r3, [pc, #392]	; (800b878 <tcp_receive+0xf20>)
 800b6f0:	881b      	ldrh	r3, [r3, #0]
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	4b5e      	ldr	r3, [pc, #376]	; (800b870 <tcp_receive+0xf18>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	441a      	add	r2, r3
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6fe:	6879      	ldr	r1, [r7, #4]
 800b700:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b702:	440b      	add	r3, r1
 800b704:	1ad3      	subs	r3, r2, r3
 800b706:	2b00      	cmp	r3, #0
 800b708:	f340 8089 	ble.w	800b81e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	899b      	ldrh	r3, [r3, #12]
 800b714:	b29b      	uxth	r3, r3
 800b716:	4618      	mov	r0, r3
 800b718:	f7fa fa52 	bl	8005bc0 <lwip_htons>
 800b71c:	4603      	mov	r3, r0
 800b71e:	b2db      	uxtb	r3, r3
 800b720:	f003 0301 	and.w	r3, r3, #1
 800b724:	2b00      	cmp	r3, #0
 800b726:	d022      	beq.n	800b76e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	68db      	ldr	r3, [r3, #12]
 800b72e:	899b      	ldrh	r3, [r3, #12]
 800b730:	b29b      	uxth	r3, r3
 800b732:	b21b      	sxth	r3, r3
 800b734:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b738:	b21c      	sxth	r4, r3
 800b73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	899b      	ldrh	r3, [r3, #12]
 800b742:	b29b      	uxth	r3, r3
 800b744:	4618      	mov	r0, r3
 800b746:	f7fa fa3b 	bl	8005bc0 <lwip_htons>
 800b74a:	4603      	mov	r3, r0
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	b29b      	uxth	r3, r3
 800b750:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b754:	b29b      	uxth	r3, r3
 800b756:	4618      	mov	r0, r3
 800b758:	f7fa fa32 	bl	8005bc0 <lwip_htons>
 800b75c:	4603      	mov	r3, r0
 800b75e:	b21b      	sxth	r3, r3
 800b760:	4323      	orrs	r3, r4
 800b762:	b21a      	sxth	r2, r3
 800b764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	b292      	uxth	r2, r2
 800b76c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b772:	b29a      	uxth	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b778:	4413      	add	r3, r2
 800b77a:	b299      	uxth	r1, r3
 800b77c:	4b3c      	ldr	r3, [pc, #240]	; (800b870 <tcp_receive+0xf18>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	b29a      	uxth	r2, r3
 800b782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	1a8a      	subs	r2, r1, r2
 800b788:	b292      	uxth	r2, r2
 800b78a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	685a      	ldr	r2, [r3, #4]
 800b792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	891b      	ldrh	r3, [r3, #8]
 800b798:	4619      	mov	r1, r3
 800b79a:	4610      	mov	r0, r2
 800b79c:	f7fb fb66 	bl	8006e6c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	891c      	ldrh	r4, [r3, #8]
 800b7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	899b      	ldrh	r3, [r3, #12]
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7fa fa05 	bl	8005bc0 <lwip_htons>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	f003 0303 	and.w	r3, r3, #3
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d001      	beq.n	800b7c6 <tcp_receive+0xe6e>
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e000      	b.n	800b7c8 <tcp_receive+0xe70>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	4423      	add	r3, r4
 800b7ca:	b29a      	uxth	r2, r3
 800b7cc:	4b2a      	ldr	r3, [pc, #168]	; (800b878 <tcp_receive+0xf20>)
 800b7ce:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b7d0:	4b29      	ldr	r3, [pc, #164]	; (800b878 <tcp_receive+0xf20>)
 800b7d2:	881b      	ldrh	r3, [r3, #0]
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	4b26      	ldr	r3, [pc, #152]	; (800b870 <tcp_receive+0xf18>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	441a      	add	r2, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e0:	6879      	ldr	r1, [r7, #4]
 800b7e2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b7e4:	440b      	add	r3, r1
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d019      	beq.n	800b81e <tcp_receive+0xec6>
 800b7ea:	4b24      	ldr	r3, [pc, #144]	; (800b87c <tcp_receive+0xf24>)
 800b7ec:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800b7f0:	4923      	ldr	r1, [pc, #140]	; (800b880 <tcp_receive+0xf28>)
 800b7f2:	4824      	ldr	r0, [pc, #144]	; (800b884 <tcp_receive+0xf2c>)
 800b7f4:	f004 fe7a 	bl	80104ec <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b7f8:	e011      	b.n	800b81e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	63bb      	str	r3, [r7, #56]	; 0x38
 800b800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b802:	2b00      	cmp	r3, #0
 800b804:	f47f aea4 	bne.w	800b550 <tcp_receive+0xbf8>
 800b808:	e00a      	b.n	800b820 <tcp_receive+0xec8>
                break;
 800b80a:	bf00      	nop
 800b80c:	e008      	b.n	800b820 <tcp_receive+0xec8>
                break;
 800b80e:	bf00      	nop
 800b810:	e006      	b.n	800b820 <tcp_receive+0xec8>
                  break;
 800b812:	bf00      	nop
 800b814:	e004      	b.n	800b820 <tcp_receive+0xec8>
                  break;
 800b816:	bf00      	nop
 800b818:	e002      	b.n	800b820 <tcp_receive+0xec8>
                  break;
 800b81a:	bf00      	nop
 800b81c:	e000      	b.n	800b820 <tcp_receive+0xec8>
                break;
 800b81e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f001 fe8b 	bl	800d53c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800b826:	e003      	b.n	800b830 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f001 fe87 	bl	800d53c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b82e:	e01a      	b.n	800b866 <tcp_receive+0xf0e>
 800b830:	e019      	b.n	800b866 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b832:	4b0f      	ldr	r3, [pc, #60]	; (800b870 <tcp_receive+0xf18>)
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83a:	1ad3      	subs	r3, r2, r3
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	db0a      	blt.n	800b856 <tcp_receive+0xefe>
 800b840:	4b0b      	ldr	r3, [pc, #44]	; (800b870 <tcp_receive+0xf18>)
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b848:	6879      	ldr	r1, [r7, #4]
 800b84a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b84c:	440b      	add	r3, r1
 800b84e:	1ad3      	subs	r3, r2, r3
 800b850:	3301      	adds	r3, #1
 800b852:	2b00      	cmp	r3, #0
 800b854:	dd07      	ble.n	800b866 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	8b5b      	ldrh	r3, [r3, #26]
 800b85a:	f043 0302 	orr.w	r3, r3, #2
 800b85e:	b29a      	uxth	r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800b864:	e7ff      	b.n	800b866 <tcp_receive+0xf0e>
 800b866:	bf00      	nop
 800b868:	3750      	adds	r7, #80	; 0x50
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bdb0      	pop	{r4, r5, r7, pc}
 800b86e:	bf00      	nop
 800b870:	20006838 	.word	0x20006838
 800b874:	20006818 	.word	0x20006818
 800b878:	20006842 	.word	0x20006842
 800b87c:	080135bc 	.word	0x080135bc
 800b880:	08013964 	.word	0x08013964
 800b884:	08013608 	.word	0x08013608

0800b888 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b888:	b480      	push	{r7}
 800b88a:	b083      	sub	sp, #12
 800b88c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b88e:	4b15      	ldr	r3, [pc, #84]	; (800b8e4 <tcp_get_next_optbyte+0x5c>)
 800b890:	881b      	ldrh	r3, [r3, #0]
 800b892:	1c5a      	adds	r2, r3, #1
 800b894:	b291      	uxth	r1, r2
 800b896:	4a13      	ldr	r2, [pc, #76]	; (800b8e4 <tcp_get_next_optbyte+0x5c>)
 800b898:	8011      	strh	r1, [r2, #0]
 800b89a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b89c:	4b12      	ldr	r3, [pc, #72]	; (800b8e8 <tcp_get_next_optbyte+0x60>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d004      	beq.n	800b8ae <tcp_get_next_optbyte+0x26>
 800b8a4:	4b11      	ldr	r3, [pc, #68]	; (800b8ec <tcp_get_next_optbyte+0x64>)
 800b8a6:	881b      	ldrh	r3, [r3, #0]
 800b8a8:	88fa      	ldrh	r2, [r7, #6]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d208      	bcs.n	800b8c0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b8ae:	4b10      	ldr	r3, [pc, #64]	; (800b8f0 <tcp_get_next_optbyte+0x68>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	3314      	adds	r3, #20
 800b8b4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b8b6:	88fb      	ldrh	r3, [r7, #6]
 800b8b8:	683a      	ldr	r2, [r7, #0]
 800b8ba:	4413      	add	r3, r2
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	e00b      	b.n	800b8d8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b8c0:	88fb      	ldrh	r3, [r7, #6]
 800b8c2:	b2da      	uxtb	r2, r3
 800b8c4:	4b09      	ldr	r3, [pc, #36]	; (800b8ec <tcp_get_next_optbyte+0x64>)
 800b8c6:	881b      	ldrh	r3, [r3, #0]
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	1ad3      	subs	r3, r2, r3
 800b8cc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b8ce:	4b06      	ldr	r3, [pc, #24]	; (800b8e8 <tcp_get_next_optbyte+0x60>)
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	797b      	ldrb	r3, [r7, #5]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr
 800b8e4:	20006834 	.word	0x20006834
 800b8e8:	20006830 	.word	0x20006830
 800b8ec:	2000682e 	.word	0x2000682e
 800b8f0:	20006828 	.word	0x20006828

0800b8f4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d106      	bne.n	800b910 <tcp_parseopt+0x1c>
 800b902:	4b32      	ldr	r3, [pc, #200]	; (800b9cc <tcp_parseopt+0xd8>)
 800b904:	f240 727d 	movw	r2, #1917	; 0x77d
 800b908:	4931      	ldr	r1, [pc, #196]	; (800b9d0 <tcp_parseopt+0xdc>)
 800b90a:	4832      	ldr	r0, [pc, #200]	; (800b9d4 <tcp_parseopt+0xe0>)
 800b90c:	f004 fdee 	bl	80104ec <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b910:	4b31      	ldr	r3, [pc, #196]	; (800b9d8 <tcp_parseopt+0xe4>)
 800b912:	881b      	ldrh	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d055      	beq.n	800b9c4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b918:	4b30      	ldr	r3, [pc, #192]	; (800b9dc <tcp_parseopt+0xe8>)
 800b91a:	2200      	movs	r2, #0
 800b91c:	801a      	strh	r2, [r3, #0]
 800b91e:	e045      	b.n	800b9ac <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800b920:	f7ff ffb2 	bl	800b888 <tcp_get_next_optbyte>
 800b924:	4603      	mov	r3, r0
 800b926:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b928:	7bfb      	ldrb	r3, [r7, #15]
 800b92a:	2b02      	cmp	r3, #2
 800b92c:	d006      	beq.n	800b93c <tcp_parseopt+0x48>
 800b92e:	2b02      	cmp	r3, #2
 800b930:	dc2b      	bgt.n	800b98a <tcp_parseopt+0x96>
 800b932:	2b00      	cmp	r3, #0
 800b934:	d041      	beq.n	800b9ba <tcp_parseopt+0xc6>
 800b936:	2b01      	cmp	r3, #1
 800b938:	d127      	bne.n	800b98a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800b93a:	e037      	b.n	800b9ac <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b93c:	f7ff ffa4 	bl	800b888 <tcp_get_next_optbyte>
 800b940:	4603      	mov	r3, r0
 800b942:	2b04      	cmp	r3, #4
 800b944:	d13b      	bne.n	800b9be <tcp_parseopt+0xca>
 800b946:	4b25      	ldr	r3, [pc, #148]	; (800b9dc <tcp_parseopt+0xe8>)
 800b948:	881b      	ldrh	r3, [r3, #0]
 800b94a:	3301      	adds	r3, #1
 800b94c:	4a22      	ldr	r2, [pc, #136]	; (800b9d8 <tcp_parseopt+0xe4>)
 800b94e:	8812      	ldrh	r2, [r2, #0]
 800b950:	4293      	cmp	r3, r2
 800b952:	da34      	bge.n	800b9be <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b954:	f7ff ff98 	bl	800b888 <tcp_get_next_optbyte>
 800b958:	4603      	mov	r3, r0
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	021b      	lsls	r3, r3, #8
 800b95e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b960:	f7ff ff92 	bl	800b888 <tcp_get_next_optbyte>
 800b964:	4603      	mov	r3, r0
 800b966:	b29a      	uxth	r2, r3
 800b968:	89bb      	ldrh	r3, [r7, #12]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b96e:	89bb      	ldrh	r3, [r7, #12]
 800b970:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b974:	d804      	bhi.n	800b980 <tcp_parseopt+0x8c>
 800b976:	89bb      	ldrh	r3, [r7, #12]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d001      	beq.n	800b980 <tcp_parseopt+0x8c>
 800b97c:	89ba      	ldrh	r2, [r7, #12]
 800b97e:	e001      	b.n	800b984 <tcp_parseopt+0x90>
 800b980:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800b988:	e010      	b.n	800b9ac <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b98a:	f7ff ff7d 	bl	800b888 <tcp_get_next_optbyte>
 800b98e:	4603      	mov	r3, r0
 800b990:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b992:	7afb      	ldrb	r3, [r7, #11]
 800b994:	2b01      	cmp	r3, #1
 800b996:	d914      	bls.n	800b9c2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b998:	7afb      	ldrb	r3, [r7, #11]
 800b99a:	b29a      	uxth	r2, r3
 800b99c:	4b0f      	ldr	r3, [pc, #60]	; (800b9dc <tcp_parseopt+0xe8>)
 800b99e:	881b      	ldrh	r3, [r3, #0]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	3b02      	subs	r3, #2
 800b9a6:	b29a      	uxth	r2, r3
 800b9a8:	4b0c      	ldr	r3, [pc, #48]	; (800b9dc <tcp_parseopt+0xe8>)
 800b9aa:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b9ac:	4b0b      	ldr	r3, [pc, #44]	; (800b9dc <tcp_parseopt+0xe8>)
 800b9ae:	881a      	ldrh	r2, [r3, #0]
 800b9b0:	4b09      	ldr	r3, [pc, #36]	; (800b9d8 <tcp_parseopt+0xe4>)
 800b9b2:	881b      	ldrh	r3, [r3, #0]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d3b3      	bcc.n	800b920 <tcp_parseopt+0x2c>
 800b9b8:	e004      	b.n	800b9c4 <tcp_parseopt+0xd0>
          return;
 800b9ba:	bf00      	nop
 800b9bc:	e002      	b.n	800b9c4 <tcp_parseopt+0xd0>
            return;
 800b9be:	bf00      	nop
 800b9c0:	e000      	b.n	800b9c4 <tcp_parseopt+0xd0>
            return;
 800b9c2:	bf00      	nop
      }
    }
  }
}
 800b9c4:	3710      	adds	r7, #16
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	080135bc 	.word	0x080135bc
 800b9d0:	08013a20 	.word	0x08013a20
 800b9d4:	08013608 	.word	0x08013608
 800b9d8:	2000682c 	.word	0x2000682c
 800b9dc:	20006834 	.word	0x20006834

0800b9e0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b9e4:	4b05      	ldr	r3, [pc, #20]	; (800b9fc <tcp_trigger_input_pcb_close+0x1c>)
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	f043 0310 	orr.w	r3, r3, #16
 800b9ec:	b2da      	uxtb	r2, r3
 800b9ee:	4b03      	ldr	r3, [pc, #12]	; (800b9fc <tcp_trigger_input_pcb_close+0x1c>)
 800b9f0:	701a      	strb	r2, [r3, #0]
}
 800b9f2:	bf00      	nop
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr
 800b9fc:	20006845 	.word	0x20006845

0800ba00 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00a      	beq.n	800ba28 <tcp_route+0x28>
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	7a1b      	ldrb	r3, [r3, #8]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d006      	beq.n	800ba28 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	7a1b      	ldrb	r3, [r3, #8]
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7fb f84a 	bl	8006ab8 <netif_get_by_index>
 800ba24:	4603      	mov	r3, r0
 800ba26:	e003      	b.n	800ba30 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f003 fb0f 	bl	800f04c <ip4_route>
 800ba2e:	4603      	mov	r3, r0
  }
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3710      	adds	r7, #16
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ba38:	b590      	push	{r4, r7, lr}
 800ba3a:	b087      	sub	sp, #28
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	603b      	str	r3, [r7, #0]
 800ba44:	4613      	mov	r3, r2
 800ba46:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d105      	bne.n	800ba5a <tcp_create_segment+0x22>
 800ba4e:	4b44      	ldr	r3, [pc, #272]	; (800bb60 <tcp_create_segment+0x128>)
 800ba50:	22a3      	movs	r2, #163	; 0xa3
 800ba52:	4944      	ldr	r1, [pc, #272]	; (800bb64 <tcp_create_segment+0x12c>)
 800ba54:	4844      	ldr	r0, [pc, #272]	; (800bb68 <tcp_create_segment+0x130>)
 800ba56:	f004 fd49 	bl	80104ec <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d105      	bne.n	800ba6c <tcp_create_segment+0x34>
 800ba60:	4b3f      	ldr	r3, [pc, #252]	; (800bb60 <tcp_create_segment+0x128>)
 800ba62:	22a4      	movs	r2, #164	; 0xa4
 800ba64:	4941      	ldr	r1, [pc, #260]	; (800bb6c <tcp_create_segment+0x134>)
 800ba66:	4840      	ldr	r0, [pc, #256]	; (800bb68 <tcp_create_segment+0x130>)
 800ba68:	f004 fd40 	bl	80104ec <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ba6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	f003 0304 	and.w	r3, r3, #4
 800ba78:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ba7a:	2003      	movs	r0, #3
 800ba7c:	f7fa fd1e 	bl	80064bc <memp_malloc>
 800ba80:	6138      	str	r0, [r7, #16]
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d104      	bne.n	800ba92 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ba88:	68b8      	ldr	r0, [r7, #8]
 800ba8a:	f7fb fb75 	bl	8007178 <pbuf_free>
    return NULL;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	e061      	b.n	800bb56 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ba98:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	891a      	ldrh	r2, [r3, #8]
 800baaa:	7dfb      	ldrb	r3, [r7, #23]
 800baac:	b29b      	uxth	r3, r3
 800baae:	429a      	cmp	r2, r3
 800bab0:	d205      	bcs.n	800babe <tcp_create_segment+0x86>
 800bab2:	4b2b      	ldr	r3, [pc, #172]	; (800bb60 <tcp_create_segment+0x128>)
 800bab4:	22b0      	movs	r2, #176	; 0xb0
 800bab6:	492e      	ldr	r1, [pc, #184]	; (800bb70 <tcp_create_segment+0x138>)
 800bab8:	482b      	ldr	r0, [pc, #172]	; (800bb68 <tcp_create_segment+0x130>)
 800baba:	f004 fd17 	bl	80104ec <iprintf>
  seg->len = p->tot_len - optlen;
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	891a      	ldrh	r2, [r3, #8]
 800bac2:	7dfb      	ldrb	r3, [r7, #23]
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	1ad3      	subs	r3, r2, r3
 800bac8:	b29a      	uxth	r2, r3
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800bace:	2114      	movs	r1, #20
 800bad0:	68b8      	ldr	r0, [r7, #8]
 800bad2:	f7fb fabb 	bl	800704c <pbuf_add_header>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d004      	beq.n	800bae6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800badc:	6938      	ldr	r0, [r7, #16]
 800bade:	f7fd f818 	bl	8008b12 <tcp_seg_free>
    return NULL;
 800bae2:	2300      	movs	r3, #0
 800bae4:	e037      	b.n	800bb56 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	685a      	ldr	r2, [r3, #4]
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	8ada      	ldrh	r2, [r3, #22]
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	68dc      	ldr	r4, [r3, #12]
 800baf8:	4610      	mov	r0, r2
 800bafa:	f7fa f861 	bl	8005bc0 <lwip_htons>
 800bafe:	4603      	mov	r3, r0
 800bb00:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	8b1a      	ldrh	r2, [r3, #24]
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	68dc      	ldr	r4, [r3, #12]
 800bb0a:	4610      	mov	r0, r2
 800bb0c:	f7fa f858 	bl	8005bc0 <lwip_htons>
 800bb10:	4603      	mov	r3, r0
 800bb12:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	68dc      	ldr	r4, [r3, #12]
 800bb18:	6838      	ldr	r0, [r7, #0]
 800bb1a:	f7fa f866 	bl	8005bea <lwip_htonl>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800bb22:	7dfb      	ldrb	r3, [r7, #23]
 800bb24:	089b      	lsrs	r3, r3, #2
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	3305      	adds	r3, #5
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	031b      	lsls	r3, r3, #12
 800bb30:	b29a      	uxth	r2, r3
 800bb32:	79fb      	ldrb	r3, [r7, #7]
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	4313      	orrs	r3, r2
 800bb38:	b29a      	uxth	r2, r3
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	68dc      	ldr	r4, [r3, #12]
 800bb3e:	4610      	mov	r0, r2
 800bb40:	f7fa f83e 	bl	8005bc0 <lwip_htons>
 800bb44:	4603      	mov	r3, r0
 800bb46:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	749a      	strb	r2, [r3, #18]
 800bb50:	2200      	movs	r2, #0
 800bb52:	74da      	strb	r2, [r3, #19]
  return seg;
 800bb54:	693b      	ldr	r3, [r7, #16]
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	371c      	adds	r7, #28
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd90      	pop	{r4, r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	08013a3c 	.word	0x08013a3c
 800bb64:	08013a70 	.word	0x08013a70
 800bb68:	08013a90 	.word	0x08013a90
 800bb6c:	08013ab8 	.word	0x08013ab8
 800bb70:	08013adc 	.word	0x08013adc

0800bb74 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b086      	sub	sp, #24
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	607b      	str	r3, [r7, #4]
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	73fb      	strb	r3, [r7, #15]
 800bb80:	460b      	mov	r3, r1
 800bb82:	81bb      	strh	r3, [r7, #12]
 800bb84:	4613      	mov	r3, r2
 800bb86:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800bb88:	89bb      	ldrh	r3, [r7, #12]
 800bb8a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d105      	bne.n	800bb9e <tcp_pbuf_prealloc+0x2a>
 800bb92:	4b30      	ldr	r3, [pc, #192]	; (800bc54 <tcp_pbuf_prealloc+0xe0>)
 800bb94:	22e8      	movs	r2, #232	; 0xe8
 800bb96:	4930      	ldr	r1, [pc, #192]	; (800bc58 <tcp_pbuf_prealloc+0xe4>)
 800bb98:	4830      	ldr	r0, [pc, #192]	; (800bc5c <tcp_pbuf_prealloc+0xe8>)
 800bb9a:	f004 fca7 	bl	80104ec <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800bb9e:	6a3b      	ldr	r3, [r7, #32]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d105      	bne.n	800bbb0 <tcp_pbuf_prealloc+0x3c>
 800bba4:	4b2b      	ldr	r3, [pc, #172]	; (800bc54 <tcp_pbuf_prealloc+0xe0>)
 800bba6:	22e9      	movs	r2, #233	; 0xe9
 800bba8:	492d      	ldr	r1, [pc, #180]	; (800bc60 <tcp_pbuf_prealloc+0xec>)
 800bbaa:	482c      	ldr	r0, [pc, #176]	; (800bc5c <tcp_pbuf_prealloc+0xe8>)
 800bbac:	f004 fc9e 	bl	80104ec <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800bbb0:	89ba      	ldrh	r2, [r7, #12]
 800bbb2:	897b      	ldrh	r3, [r7, #10]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d221      	bcs.n	800bbfc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800bbb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bbbc:	f003 0302 	and.w	r3, r3, #2
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d111      	bne.n	800bbe8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800bbc4:	6a3b      	ldr	r3, [r7, #32]
 800bbc6:	8b5b      	ldrh	r3, [r3, #26]
 800bbc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d115      	bne.n	800bbfc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800bbd0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d007      	beq.n	800bbe8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800bbd8:	6a3b      	ldr	r3, [r7, #32]
 800bbda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d103      	bne.n	800bbe8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800bbe0:	6a3b      	ldr	r3, [r7, #32]
 800bbe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d009      	beq.n	800bbfc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800bbe8:	89bb      	ldrh	r3, [r7, #12]
 800bbea:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800bbee:	f023 0203 	bic.w	r2, r3, #3
 800bbf2:	897b      	ldrh	r3, [r7, #10]
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	bf28      	it	cs
 800bbf8:	4613      	movcs	r3, r2
 800bbfa:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800bbfc:	8af9      	ldrh	r1, [r7, #22]
 800bbfe:	7bfb      	ldrb	r3, [r7, #15]
 800bc00:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7fa ffd3 	bl	8006bb0 <pbuf_alloc>
 800bc0a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d101      	bne.n	800bc16 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800bc12:	2300      	movs	r3, #0
 800bc14:	e019      	b.n	800bc4a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d006      	beq.n	800bc2c <tcp_pbuf_prealloc+0xb8>
 800bc1e:	4b0d      	ldr	r3, [pc, #52]	; (800bc54 <tcp_pbuf_prealloc+0xe0>)
 800bc20:	f240 120b 	movw	r2, #267	; 0x10b
 800bc24:	490f      	ldr	r1, [pc, #60]	; (800bc64 <tcp_pbuf_prealloc+0xf0>)
 800bc26:	480d      	ldr	r0, [pc, #52]	; (800bc5c <tcp_pbuf_prealloc+0xe8>)
 800bc28:	f004 fc60 	bl	80104ec <iprintf>
  *oversize = p->len - length;
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	895a      	ldrh	r2, [r3, #10]
 800bc30:	89bb      	ldrh	r3, [r7, #12]
 800bc32:	1ad3      	subs	r3, r2, r3
 800bc34:	b29a      	uxth	r2, r3
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	89ba      	ldrh	r2, [r7, #12]
 800bc3e:	811a      	strh	r2, [r3, #8]
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	891a      	ldrh	r2, [r3, #8]
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	815a      	strh	r2, [r3, #10]
  return p;
 800bc48:	693b      	ldr	r3, [r7, #16]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3718      	adds	r7, #24
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	bf00      	nop
 800bc54:	08013a3c 	.word	0x08013a3c
 800bc58:	08013af4 	.word	0x08013af4
 800bc5c:	08013a90 	.word	0x08013a90
 800bc60:	08013b18 	.word	0x08013b18
 800bc64:	08013b38 	.word	0x08013b38

0800bc68 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	460b      	mov	r3, r1
 800bc72:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d106      	bne.n	800bc88 <tcp_write_checks+0x20>
 800bc7a:	4b33      	ldr	r3, [pc, #204]	; (800bd48 <tcp_write_checks+0xe0>)
 800bc7c:	f240 1233 	movw	r2, #307	; 0x133
 800bc80:	4932      	ldr	r1, [pc, #200]	; (800bd4c <tcp_write_checks+0xe4>)
 800bc82:	4833      	ldr	r0, [pc, #204]	; (800bd50 <tcp_write_checks+0xe8>)
 800bc84:	f004 fc32 	bl	80104ec <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	7d1b      	ldrb	r3, [r3, #20]
 800bc8c:	2b04      	cmp	r3, #4
 800bc8e:	d00e      	beq.n	800bcae <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800bc94:	2b07      	cmp	r3, #7
 800bc96:	d00a      	beq.n	800bcae <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800bc9c:	2b02      	cmp	r3, #2
 800bc9e:	d006      	beq.n	800bcae <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800bca4:	2b03      	cmp	r3, #3
 800bca6:	d002      	beq.n	800bcae <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800bca8:	f06f 030a 	mvn.w	r3, #10
 800bcac:	e048      	b.n	800bd40 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800bcae:	887b      	ldrh	r3, [r7, #2]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d101      	bne.n	800bcb8 <tcp_write_checks+0x50>
    return ERR_OK;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	e043      	b.n	800bd40 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bcbe:	887a      	ldrh	r2, [r7, #2]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d909      	bls.n	800bcd8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	8b5b      	ldrh	r3, [r3, #26]
 800bcc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bccc:	b29a      	uxth	r2, r3
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800bcd2:	f04f 33ff 	mov.w	r3, #4294967295
 800bcd6:	e033      	b.n	800bd40 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bcde:	2b08      	cmp	r3, #8
 800bce0:	d909      	bls.n	800bcf6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	8b5b      	ldrh	r3, [r3, #26]
 800bce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcea:	b29a      	uxth	r2, r3
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800bcf0:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf4:	e024      	b.n	800bd40 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d00f      	beq.n	800bd20 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d11a      	bne.n	800bd3e <tcp_write_checks+0xd6>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d116      	bne.n	800bd3e <tcp_write_checks+0xd6>
 800bd10:	4b0d      	ldr	r3, [pc, #52]	; (800bd48 <tcp_write_checks+0xe0>)
 800bd12:	f240 1255 	movw	r2, #341	; 0x155
 800bd16:	490f      	ldr	r1, [pc, #60]	; (800bd54 <tcp_write_checks+0xec>)
 800bd18:	480d      	ldr	r0, [pc, #52]	; (800bd50 <tcp_write_checks+0xe8>)
 800bd1a:	f004 fbe7 	bl	80104ec <iprintf>
 800bd1e:	e00e      	b.n	800bd3e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d103      	bne.n	800bd30 <tcp_write_checks+0xc8>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d006      	beq.n	800bd3e <tcp_write_checks+0xd6>
 800bd30:	4b05      	ldr	r3, [pc, #20]	; (800bd48 <tcp_write_checks+0xe0>)
 800bd32:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800bd36:	4908      	ldr	r1, [pc, #32]	; (800bd58 <tcp_write_checks+0xf0>)
 800bd38:	4805      	ldr	r0, [pc, #20]	; (800bd50 <tcp_write_checks+0xe8>)
 800bd3a:	f004 fbd7 	bl	80104ec <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800bd3e:	2300      	movs	r3, #0
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3708      	adds	r7, #8
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	08013a3c 	.word	0x08013a3c
 800bd4c:	08013b4c 	.word	0x08013b4c
 800bd50:	08013a90 	.word	0x08013a90
 800bd54:	08013b6c 	.word	0x08013b6c
 800bd58:	08013ba8 	.word	0x08013ba8

0800bd5c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800bd5c:	b590      	push	{r4, r7, lr}
 800bd5e:	b09b      	sub	sp, #108	; 0x6c
 800bd60:	af04      	add	r7, sp, #16
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	4611      	mov	r1, r2
 800bd68:	461a      	mov	r2, r3
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	80fb      	strh	r3, [r7, #6]
 800bd6e:	4613      	mov	r3, r2
 800bd70:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800bd72:	2300      	movs	r3, #0
 800bd74:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bd76:	2300      	movs	r3, #0
 800bd78:	653b      	str	r3, [r7, #80]	; 0x50
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd7e:	2300      	movs	r3, #0
 800bd80:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd82:	2300      	movs	r3, #0
 800bd84:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800bd86:	2300      	movs	r3, #0
 800bd88:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800bd92:	2300      	movs	r3, #0
 800bd94:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800bd96:	2300      	movs	r3, #0
 800bd98:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d109      	bne.n	800bdb8 <tcp_write+0x5c>
 800bda4:	4ba4      	ldr	r3, [pc, #656]	; (800c038 <tcp_write+0x2dc>)
 800bda6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800bdaa:	49a4      	ldr	r1, [pc, #656]	; (800c03c <tcp_write+0x2e0>)
 800bdac:	48a4      	ldr	r0, [pc, #656]	; (800c040 <tcp_write+0x2e4>)
 800bdae:	f004 fb9d 	bl	80104ec <iprintf>
 800bdb2:	f06f 030f 	mvn.w	r3, #15
 800bdb6:	e32a      	b.n	800c40e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bdbe:	085b      	lsrs	r3, r3, #1
 800bdc0:	b29a      	uxth	r2, r3
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	bf28      	it	cs
 800bdca:	4613      	movcs	r3, r2
 800bdcc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800bdce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d102      	bne.n	800bdda <tcp_write+0x7e>
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdd8:	e000      	b.n	800bddc <tcp_write+0x80>
 800bdda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bddc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d109      	bne.n	800bdf8 <tcp_write+0x9c>
 800bde4:	4b94      	ldr	r3, [pc, #592]	; (800c038 <tcp_write+0x2dc>)
 800bde6:	f240 12ad 	movw	r2, #429	; 0x1ad
 800bdea:	4996      	ldr	r1, [pc, #600]	; (800c044 <tcp_write+0x2e8>)
 800bdec:	4894      	ldr	r0, [pc, #592]	; (800c040 <tcp_write+0x2e4>)
 800bdee:	f004 fb7d 	bl	80104ec <iprintf>
 800bdf2:	f06f 030f 	mvn.w	r3, #15
 800bdf6:	e30a      	b.n	800c40e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800bdf8:	88fb      	ldrh	r3, [r7, #6]
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	68f8      	ldr	r0, [r7, #12]
 800bdfe:	f7ff ff33 	bl	800bc68 <tcp_write_checks>
 800be02:	4603      	mov	r3, r0
 800be04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800be08:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d002      	beq.n	800be16 <tcp_write+0xba>
    return err;
 800be10:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800be14:	e2fb      	b.n	800c40e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800be1c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800be20:	2300      	movs	r3, #0
 800be22:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	f000 80f6 	beq.w	800c01c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be34:	653b      	str	r3, [r7, #80]	; 0x50
 800be36:	e002      	b.n	800be3e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800be38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800be3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d1f8      	bne.n	800be38 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800be46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be48:	7a9b      	ldrb	r3, [r3, #10]
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	f003 0304 	and.w	r3, r3, #4
 800be52:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800be54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800be56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be58:	891b      	ldrh	r3, [r3, #8]
 800be5a:	4619      	mov	r1, r3
 800be5c:	8c3b      	ldrh	r3, [r7, #32]
 800be5e:	440b      	add	r3, r1
 800be60:	429a      	cmp	r2, r3
 800be62:	da06      	bge.n	800be72 <tcp_write+0x116>
 800be64:	4b74      	ldr	r3, [pc, #464]	; (800c038 <tcp_write+0x2dc>)
 800be66:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800be6a:	4977      	ldr	r1, [pc, #476]	; (800c048 <tcp_write+0x2ec>)
 800be6c:	4874      	ldr	r0, [pc, #464]	; (800c040 <tcp_write+0x2e4>)
 800be6e:	f004 fb3d 	bl	80104ec <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800be72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be74:	891a      	ldrh	r2, [r3, #8]
 800be76:	8c3b      	ldrh	r3, [r7, #32]
 800be78:	4413      	add	r3, r2
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800be7e:	1ad3      	subs	r3, r2, r3
 800be80:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800be88:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800be8a:	8a7b      	ldrh	r3, [r7, #18]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d026      	beq.n	800bede <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800be90:	8a7b      	ldrh	r3, [r7, #18]
 800be92:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800be94:	429a      	cmp	r2, r3
 800be96:	d206      	bcs.n	800bea6 <tcp_write+0x14a>
 800be98:	4b67      	ldr	r3, [pc, #412]	; (800c038 <tcp_write+0x2dc>)
 800be9a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800be9e:	496b      	ldr	r1, [pc, #428]	; (800c04c <tcp_write+0x2f0>)
 800bea0:	4867      	ldr	r0, [pc, #412]	; (800c040 <tcp_write+0x2e4>)
 800bea2:	f004 fb23 	bl	80104ec <iprintf>
      seg = last_unsent;
 800bea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bea8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800beaa:	8a7b      	ldrh	r3, [r7, #18]
 800beac:	88fa      	ldrh	r2, [r7, #6]
 800beae:	4293      	cmp	r3, r2
 800beb0:	bf28      	it	cs
 800beb2:	4613      	movcs	r3, r2
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800beb8:	4293      	cmp	r3, r2
 800beba:	bf28      	it	cs
 800bebc:	4613      	movcs	r3, r2
 800bebe:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800bec0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bec4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bec6:	4413      	add	r3, r2
 800bec8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800becc:	8a7a      	ldrh	r2, [r7, #18]
 800bece:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bed0:	1ad3      	subs	r3, r2, r3
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800bed6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bed8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800beda:	1ad3      	subs	r3, r2, r3
 800bedc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800bede:	8a7b      	ldrh	r3, [r7, #18]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00b      	beq.n	800befc <tcp_write+0x1a0>
 800bee4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bee8:	88fb      	ldrh	r3, [r7, #6]
 800beea:	429a      	cmp	r2, r3
 800beec:	d006      	beq.n	800befc <tcp_write+0x1a0>
 800beee:	4b52      	ldr	r3, [pc, #328]	; (800c038 <tcp_write+0x2dc>)
 800bef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bef4:	4956      	ldr	r1, [pc, #344]	; (800c050 <tcp_write+0x2f4>)
 800bef6:	4852      	ldr	r0, [pc, #328]	; (800c040 <tcp_write+0x2e4>)
 800bef8:	f004 faf8 	bl	80104ec <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800befc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bf00:	88fb      	ldrh	r3, [r7, #6]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	f080 8167 	bcs.w	800c1d6 <tcp_write+0x47a>
 800bf08:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	f000 8163 	beq.w	800c1d6 <tcp_write+0x47a>
 800bf10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf12:	891b      	ldrh	r3, [r3, #8]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f000 815e 	beq.w	800c1d6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800bf1a:	88fa      	ldrh	r2, [r7, #6]
 800bf1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bf20:	1ad2      	subs	r2, r2, r3
 800bf22:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bf24:	4293      	cmp	r3, r2
 800bf26:	bfa8      	it	ge
 800bf28:	4613      	movge	r3, r2
 800bf2a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800bf2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf2e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bf30:	797b      	ldrb	r3, [r7, #5]
 800bf32:	f003 0301 	and.w	r3, r3, #1
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d027      	beq.n	800bf8a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800bf3a:	f107 0012 	add.w	r0, r7, #18
 800bf3e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bf40:	8bf9      	ldrh	r1, [r7, #30]
 800bf42:	2301      	movs	r3, #1
 800bf44:	9302      	str	r3, [sp, #8]
 800bf46:	797b      	ldrb	r3, [r7, #5]
 800bf48:	9301      	str	r3, [sp, #4]
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	9300      	str	r3, [sp, #0]
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2000      	movs	r0, #0
 800bf52:	f7ff fe0f 	bl	800bb74 <tcp_pbuf_prealloc>
 800bf56:	6578      	str	r0, [r7, #84]	; 0x54
 800bf58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	f000 8225 	beq.w	800c3aa <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800bf60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf62:	6858      	ldr	r0, [r3, #4]
 800bf64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bf68:	68ba      	ldr	r2, [r7, #8]
 800bf6a:	4413      	add	r3, r2
 800bf6c:	8bfa      	ldrh	r2, [r7, #30]
 800bf6e:	4619      	mov	r1, r3
 800bf70:	f004 fa8c 	bl	801048c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800bf74:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bf76:	f7fb f987 	bl	8007288 <pbuf_clen>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bf82:	4413      	add	r3, r2
 800bf84:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800bf88:	e041      	b.n	800c00e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800bf8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	637b      	str	r3, [r7, #52]	; 0x34
 800bf90:	e002      	b.n	800bf98 <tcp_write+0x23c>
 800bf92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	637b      	str	r3, [r7, #52]	; 0x34
 800bf98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d1f8      	bne.n	800bf92 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bfa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa2:	7b1b      	ldrb	r3, [r3, #12]
 800bfa4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d115      	bne.n	800bfd8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800bfac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfb2:	8952      	ldrh	r2, [r2, #10]
 800bfb4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bfb6:	68ba      	ldr	r2, [r7, #8]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d10d      	bne.n	800bfd8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800bfbc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d006      	beq.n	800bfd2 <tcp_write+0x276>
 800bfc4:	4b1c      	ldr	r3, [pc, #112]	; (800c038 <tcp_write+0x2dc>)
 800bfc6:	f240 2231 	movw	r2, #561	; 0x231
 800bfca:	4922      	ldr	r1, [pc, #136]	; (800c054 <tcp_write+0x2f8>)
 800bfcc:	481c      	ldr	r0, [pc, #112]	; (800c040 <tcp_write+0x2e4>)
 800bfce:	f004 fa8d 	bl	80104ec <iprintf>
          extendlen = seglen;
 800bfd2:	8bfb      	ldrh	r3, [r7, #30]
 800bfd4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800bfd6:	e01a      	b.n	800c00e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800bfd8:	8bfb      	ldrh	r3, [r7, #30]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	4619      	mov	r1, r3
 800bfde:	2000      	movs	r0, #0
 800bfe0:	f7fa fde6 	bl	8006bb0 <pbuf_alloc>
 800bfe4:	6578      	str	r0, [r7, #84]	; 0x54
 800bfe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f000 81e0 	beq.w	800c3ae <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800bfee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bff2:	68ba      	ldr	r2, [r7, #8]
 800bff4:	441a      	add	r2, r3
 800bff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bff8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800bffa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bffc:	f7fb f944 	bl	8007288 <pbuf_clen>
 800c000:	4603      	mov	r3, r0
 800c002:	461a      	mov	r2, r3
 800c004:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c008:	4413      	add	r3, r2
 800c00a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800c00e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c012:	8bfb      	ldrh	r3, [r7, #30]
 800c014:	4413      	add	r3, r2
 800c016:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c01a:	e0dc      	b.n	800c1d6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c022:	2b00      	cmp	r3, #0
 800c024:	f000 80d7 	beq.w	800c1d6 <tcp_write+0x47a>
 800c028:	4b03      	ldr	r3, [pc, #12]	; (800c038 <tcp_write+0x2dc>)
 800c02a:	f240 224a 	movw	r2, #586	; 0x24a
 800c02e:	490a      	ldr	r1, [pc, #40]	; (800c058 <tcp_write+0x2fc>)
 800c030:	4803      	ldr	r0, [pc, #12]	; (800c040 <tcp_write+0x2e4>)
 800c032:	f004 fa5b 	bl	80104ec <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800c036:	e0ce      	b.n	800c1d6 <tcp_write+0x47a>
 800c038:	08013a3c 	.word	0x08013a3c
 800c03c:	08013bdc 	.word	0x08013bdc
 800c040:	08013a90 	.word	0x08013a90
 800c044:	08013bf4 	.word	0x08013bf4
 800c048:	08013c28 	.word	0x08013c28
 800c04c:	08013c40 	.word	0x08013c40
 800c050:	08013c60 	.word	0x08013c60
 800c054:	08013c80 	.word	0x08013c80
 800c058:	08013cac 	.word	0x08013cac
    struct pbuf *p;
    u16_t left = len - pos;
 800c05c:	88fa      	ldrh	r2, [r7, #6]
 800c05e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c062:	1ad3      	subs	r3, r2, r3
 800c064:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800c066:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c06a:	b29b      	uxth	r3, r3
 800c06c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c06e:	1ad3      	subs	r3, r2, r3
 800c070:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800c072:	8b7a      	ldrh	r2, [r7, #26]
 800c074:	8bbb      	ldrh	r3, [r7, #28]
 800c076:	4293      	cmp	r3, r2
 800c078:	bf28      	it	cs
 800c07a:	4613      	movcs	r3, r2
 800c07c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c07e:	797b      	ldrb	r3, [r7, #5]
 800c080:	f003 0301 	and.w	r3, r3, #1
 800c084:	2b00      	cmp	r3, #0
 800c086:	d036      	beq.n	800c0f6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800c088:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c08c:	b29a      	uxth	r2, r3
 800c08e:	8b3b      	ldrh	r3, [r7, #24]
 800c090:	4413      	add	r3, r2
 800c092:	b299      	uxth	r1, r3
 800c094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c096:	2b00      	cmp	r3, #0
 800c098:	bf0c      	ite	eq
 800c09a:	2301      	moveq	r3, #1
 800c09c:	2300      	movne	r3, #0
 800c09e:	b2db      	uxtb	r3, r3
 800c0a0:	f107 0012 	add.w	r0, r7, #18
 800c0a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c0a6:	9302      	str	r3, [sp, #8]
 800c0a8:	797b      	ldrb	r3, [r7, #5]
 800c0aa:	9301      	str	r3, [sp, #4]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	9300      	str	r3, [sp, #0]
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2036      	movs	r0, #54	; 0x36
 800c0b4:	f7ff fd5e 	bl	800bb74 <tcp_pbuf_prealloc>
 800c0b8:	6338      	str	r0, [r7, #48]	; 0x30
 800c0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f000 8178 	beq.w	800c3b2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800c0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c4:	895b      	ldrh	r3, [r3, #10]
 800c0c6:	8b3a      	ldrh	r2, [r7, #24]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d906      	bls.n	800c0da <tcp_write+0x37e>
 800c0cc:	4b8c      	ldr	r3, [pc, #560]	; (800c300 <tcp_write+0x5a4>)
 800c0ce:	f240 2266 	movw	r2, #614	; 0x266
 800c0d2:	498c      	ldr	r1, [pc, #560]	; (800c304 <tcp_write+0x5a8>)
 800c0d4:	488c      	ldr	r0, [pc, #560]	; (800c308 <tcp_write+0x5ac>)
 800c0d6:	f004 fa09 	bl	80104ec <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800c0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0dc:	685a      	ldr	r2, [r3, #4]
 800c0de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c0e2:	18d0      	adds	r0, r2, r3
 800c0e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c0e8:	68ba      	ldr	r2, [r7, #8]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	8b3a      	ldrh	r2, [r7, #24]
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	f004 f9cc 	bl	801048c <memcpy>
 800c0f4:	e02f      	b.n	800c156 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800c0f6:	8a7b      	ldrh	r3, [r7, #18]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d006      	beq.n	800c10a <tcp_write+0x3ae>
 800c0fc:	4b80      	ldr	r3, [pc, #512]	; (800c300 <tcp_write+0x5a4>)
 800c0fe:	f240 2271 	movw	r2, #625	; 0x271
 800c102:	4982      	ldr	r1, [pc, #520]	; (800c30c <tcp_write+0x5b0>)
 800c104:	4880      	ldr	r0, [pc, #512]	; (800c308 <tcp_write+0x5ac>)
 800c106:	f004 f9f1 	bl	80104ec <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800c10a:	8b3b      	ldrh	r3, [r7, #24]
 800c10c:	2201      	movs	r2, #1
 800c10e:	4619      	mov	r1, r3
 800c110:	2036      	movs	r0, #54	; 0x36
 800c112:	f7fa fd4d 	bl	8006bb0 <pbuf_alloc>
 800c116:	6178      	str	r0, [r7, #20]
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f000 814b 	beq.w	800c3b6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c120:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c124:	68ba      	ldr	r2, [r7, #8]
 800c126:	441a      	add	r2, r3
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c12c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c130:	b29b      	uxth	r3, r3
 800c132:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c136:	4619      	mov	r1, r3
 800c138:	2036      	movs	r0, #54	; 0x36
 800c13a:	f7fa fd39 	bl	8006bb0 <pbuf_alloc>
 800c13e:	6338      	str	r0, [r7, #48]	; 0x30
 800c140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c142:	2b00      	cmp	r3, #0
 800c144:	d103      	bne.n	800c14e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800c146:	6978      	ldr	r0, [r7, #20]
 800c148:	f7fb f816 	bl	8007178 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800c14c:	e136      	b.n	800c3bc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800c14e:	6979      	ldr	r1, [r7, #20]
 800c150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c152:	f7fb f8d3 	bl	80072fc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800c156:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c158:	f7fb f896 	bl	8007288 <pbuf_clen>
 800c15c:	4603      	mov	r3, r0
 800c15e:	461a      	mov	r2, r3
 800c160:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c164:	4413      	add	r3, r2
 800c166:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c16a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c16e:	2b09      	cmp	r3, #9
 800c170:	d903      	bls.n	800c17a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800c172:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c174:	f7fb f800 	bl	8007178 <pbuf_free>
      goto memerr;
 800c178:	e120      	b.n	800c3bc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c17e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c182:	441a      	add	r2, r3
 800c184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c188:	9300      	str	r3, [sp, #0]
 800c18a:	4613      	mov	r3, r2
 800c18c:	2200      	movs	r2, #0
 800c18e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c190:	68f8      	ldr	r0, [r7, #12]
 800c192:	f7ff fc51 	bl	800ba38 <tcp_create_segment>
 800c196:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	f000 810d 	beq.w	800c3ba <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800c1a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d102      	bne.n	800c1ac <tcp_write+0x450>
      queue = seg;
 800c1a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1a8:	647b      	str	r3, [r7, #68]	; 0x44
 800c1aa:	e00c      	b.n	800c1c6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c1ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d106      	bne.n	800c1c0 <tcp_write+0x464>
 800c1b2:	4b53      	ldr	r3, [pc, #332]	; (800c300 <tcp_write+0x5a4>)
 800c1b4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c1b8:	4955      	ldr	r1, [pc, #340]	; (800c310 <tcp_write+0x5b4>)
 800c1ba:	4853      	ldr	r0, [pc, #332]	; (800c308 <tcp_write+0x5ac>)
 800c1bc:	f004 f996 	bl	80104ec <iprintf>
      prev_seg->next = seg;
 800c1c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c1c4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800c1c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1c8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800c1ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c1ce:	8b3b      	ldrh	r3, [r7, #24]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800c1d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c1da:	88fb      	ldrh	r3, [r7, #6]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	f4ff af3d 	bcc.w	800c05c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800c1e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d02c      	beq.n	800c242 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800c1e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1ee:	e01e      	b.n	800c22e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800c1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f2:	891a      	ldrh	r2, [r3, #8]
 800c1f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c1f6:	4413      	add	r3, r2
 800c1f8:	b29a      	uxth	r2, r3
 800c1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1fc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800c1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d110      	bne.n	800c228 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c20c:	8952      	ldrh	r2, [r2, #10]
 800c20e:	4413      	add	r3, r2
 800c210:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c212:	68b9      	ldr	r1, [r7, #8]
 800c214:	4618      	mov	r0, r3
 800c216:	f004 f939 	bl	801048c <memcpy>
        p->len += oversize_used;
 800c21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21c:	895a      	ldrh	r2, [r3, #10]
 800c21e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c220:	4413      	add	r3, r2
 800c222:	b29a      	uxth	r2, r3
 800c224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c226:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800c228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c230:	2b00      	cmp	r3, #0
 800c232:	d1dd      	bne.n	800c1f0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800c234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c236:	891a      	ldrh	r2, [r3, #8]
 800c238:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c23a:	4413      	add	r3, r2
 800c23c:	b29a      	uxth	r2, r3
 800c23e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c240:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800c242:	8a7a      	ldrh	r2, [r7, #18]
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800c24a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d018      	beq.n	800c282 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c252:	2b00      	cmp	r3, #0
 800c254:	d106      	bne.n	800c264 <tcp_write+0x508>
 800c256:	4b2a      	ldr	r3, [pc, #168]	; (800c300 <tcp_write+0x5a4>)
 800c258:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800c25c:	492d      	ldr	r1, [pc, #180]	; (800c314 <tcp_write+0x5b8>)
 800c25e:	482a      	ldr	r0, [pc, #168]	; (800c308 <tcp_write+0x5ac>)
 800c260:	f004 f944 	bl	80104ec <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800c264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7fb f846 	bl	80072fc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c272:	891a      	ldrh	r2, [r3, #8]
 800c274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c276:	891b      	ldrh	r3, [r3, #8]
 800c278:	4413      	add	r3, r2
 800c27a:	b29a      	uxth	r2, r3
 800c27c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c27e:	811a      	strh	r2, [r3, #8]
 800c280:	e037      	b.n	800c2f2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800c282:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c284:	2b00      	cmp	r3, #0
 800c286:	d034      	beq.n	800c2f2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d003      	beq.n	800c296 <tcp_write+0x53a>
 800c28e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d106      	bne.n	800c2a4 <tcp_write+0x548>
 800c296:	4b1a      	ldr	r3, [pc, #104]	; (800c300 <tcp_write+0x5a4>)
 800c298:	f240 22e6 	movw	r2, #742	; 0x2e6
 800c29c:	491e      	ldr	r1, [pc, #120]	; (800c318 <tcp_write+0x5bc>)
 800c29e:	481a      	ldr	r0, [pc, #104]	; (800c308 <tcp_write+0x5ac>)
 800c2a0:	f004 f924 	bl	80104ec <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c2a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2aa:	e009      	b.n	800c2c0 <tcp_write+0x564>
      p->tot_len += extendlen;
 800c2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ae:	891a      	ldrh	r2, [r3, #8]
 800c2b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c2b2:	4413      	add	r3, r2
 800c2b4:	b29a      	uxth	r2, r3
 800c2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d1f1      	bne.n	800c2ac <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800c2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ca:	891a      	ldrh	r2, [r3, #8]
 800c2cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c2ce:	4413      	add	r3, r2
 800c2d0:	b29a      	uxth	r2, r3
 800c2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800c2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d8:	895a      	ldrh	r2, [r3, #10]
 800c2da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c2dc:	4413      	add	r3, r2
 800c2de:	b29a      	uxth	r2, r3
 800c2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800c2e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2e6:	891a      	ldrh	r2, [r3, #8]
 800c2e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c2ea:	4413      	add	r3, r2
 800c2ec:	b29a      	uxth	r2, r3
 800c2ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2f0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800c2f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d111      	bne.n	800c31c <tcp_write+0x5c0>
    pcb->unsent = queue;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2fc:	66da      	str	r2, [r3, #108]	; 0x6c
 800c2fe:	e010      	b.n	800c322 <tcp_write+0x5c6>
 800c300:	08013a3c 	.word	0x08013a3c
 800c304:	08013cdc 	.word	0x08013cdc
 800c308:	08013a90 	.word	0x08013a90
 800c30c:	08013d1c 	.word	0x08013d1c
 800c310:	08013d2c 	.word	0x08013d2c
 800c314:	08013d40 	.word	0x08013d40
 800c318:	08013d78 	.word	0x08013d78
  } else {
    last_unsent->next = queue;
 800c31c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c31e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c320:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c326:	88fb      	ldrh	r3, [r7, #6]
 800c328:	441a      	add	r2, r3
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c334:	88fb      	ldrh	r3, [r7, #6]
 800c336:	1ad3      	subs	r3, r2, r3
 800c338:	b29a      	uxth	r2, r3
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c346:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c350:	2b00      	cmp	r3, #0
 800c352:	d00e      	beq.n	800c372 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d10a      	bne.n	800c372 <tcp_write+0x616>
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c360:	2b00      	cmp	r3, #0
 800c362:	d106      	bne.n	800c372 <tcp_write+0x616>
 800c364:	4b2c      	ldr	r3, [pc, #176]	; (800c418 <tcp_write+0x6bc>)
 800c366:	f240 3212 	movw	r2, #786	; 0x312
 800c36a:	492c      	ldr	r1, [pc, #176]	; (800c41c <tcp_write+0x6c0>)
 800c36c:	482c      	ldr	r0, [pc, #176]	; (800c420 <tcp_write+0x6c4>)
 800c36e:	f004 f8bd 	bl	80104ec <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800c372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c374:	2b00      	cmp	r3, #0
 800c376:	d016      	beq.n	800c3a6 <tcp_write+0x64a>
 800c378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c37a:	68db      	ldr	r3, [r3, #12]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d012      	beq.n	800c3a6 <tcp_write+0x64a>
 800c380:	797b      	ldrb	r3, [r7, #5]
 800c382:	f003 0302 	and.w	r3, r3, #2
 800c386:	2b00      	cmp	r3, #0
 800c388:	d10d      	bne.n	800c3a6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c38a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	899b      	ldrh	r3, [r3, #12]
 800c390:	b29c      	uxth	r4, r3
 800c392:	2008      	movs	r0, #8
 800c394:	f7f9 fc14 	bl	8005bc0 <lwip_htons>
 800c398:	4603      	mov	r3, r0
 800c39a:	461a      	mov	r2, r3
 800c39c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	4322      	orrs	r2, r4
 800c3a2:	b292      	uxth	r2, r2
 800c3a4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	e031      	b.n	800c40e <tcp_write+0x6b2>
          goto memerr;
 800c3aa:	bf00      	nop
 800c3ac:	e006      	b.n	800c3bc <tcp_write+0x660>
            goto memerr;
 800c3ae:	bf00      	nop
 800c3b0:	e004      	b.n	800c3bc <tcp_write+0x660>
        goto memerr;
 800c3b2:	bf00      	nop
 800c3b4:	e002      	b.n	800c3bc <tcp_write+0x660>
        goto memerr;
 800c3b6:	bf00      	nop
 800c3b8:	e000      	b.n	800c3bc <tcp_write+0x660>
      goto memerr;
 800c3ba:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	8b5b      	ldrh	r3, [r3, #26]
 800c3c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3c4:	b29a      	uxth	r2, r3
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800c3ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d002      	beq.n	800c3d6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800c3d0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c3d2:	f7fa fed1 	bl	8007178 <pbuf_free>
  }
  if (queue != NULL) {
 800c3d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d002      	beq.n	800c3e2 <tcp_write+0x686>
    tcp_segs_free(queue);
 800c3dc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c3de:	f7fc fb83 	bl	8008ae8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d00e      	beq.n	800c40a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d10a      	bne.n	800c40a <tcp_write+0x6ae>
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d106      	bne.n	800c40a <tcp_write+0x6ae>
 800c3fc:	4b06      	ldr	r3, [pc, #24]	; (800c418 <tcp_write+0x6bc>)
 800c3fe:	f240 3227 	movw	r2, #807	; 0x327
 800c402:	4906      	ldr	r1, [pc, #24]	; (800c41c <tcp_write+0x6c0>)
 800c404:	4806      	ldr	r0, [pc, #24]	; (800c420 <tcp_write+0x6c4>)
 800c406:	f004 f871 	bl	80104ec <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800c40a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c40e:	4618      	mov	r0, r3
 800c410:	375c      	adds	r7, #92	; 0x5c
 800c412:	46bd      	mov	sp, r7
 800c414:	bd90      	pop	{r4, r7, pc}
 800c416:	bf00      	nop
 800c418:	08013a3c 	.word	0x08013a3c
 800c41c:	08013db0 	.word	0x08013db0
 800c420:	08013a90 	.word	0x08013a90

0800c424 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c424:	b590      	push	{r4, r7, lr}
 800c426:	b08b      	sub	sp, #44	; 0x2c
 800c428:	af02      	add	r7, sp, #8
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	460b      	mov	r3, r1
 800c42e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c430:	2300      	movs	r3, #0
 800c432:	61fb      	str	r3, [r7, #28]
 800c434:	2300      	movs	r3, #0
 800c436:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c438:	2300      	movs	r3, #0
 800c43a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d106      	bne.n	800c450 <tcp_split_unsent_seg+0x2c>
 800c442:	4b95      	ldr	r3, [pc, #596]	; (800c698 <tcp_split_unsent_seg+0x274>)
 800c444:	f240 324b 	movw	r2, #843	; 0x34b
 800c448:	4994      	ldr	r1, [pc, #592]	; (800c69c <tcp_split_unsent_seg+0x278>)
 800c44a:	4895      	ldr	r0, [pc, #596]	; (800c6a0 <tcp_split_unsent_seg+0x27c>)
 800c44c:	f004 f84e 	bl	80104ec <iprintf>

  useg = pcb->unsent;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c454:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d102      	bne.n	800c462 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c45c:	f04f 33ff 	mov.w	r3, #4294967295
 800c460:	e116      	b.n	800c690 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c462:	887b      	ldrh	r3, [r7, #2]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d109      	bne.n	800c47c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c468:	4b8b      	ldr	r3, [pc, #556]	; (800c698 <tcp_split_unsent_seg+0x274>)
 800c46a:	f240 3253 	movw	r2, #851	; 0x353
 800c46e:	498d      	ldr	r1, [pc, #564]	; (800c6a4 <tcp_split_unsent_seg+0x280>)
 800c470:	488b      	ldr	r0, [pc, #556]	; (800c6a0 <tcp_split_unsent_seg+0x27c>)
 800c472:	f004 f83b 	bl	80104ec <iprintf>
    return ERR_VAL;
 800c476:	f06f 0305 	mvn.w	r3, #5
 800c47a:	e109      	b.n	800c690 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	891b      	ldrh	r3, [r3, #8]
 800c480:	887a      	ldrh	r2, [r7, #2]
 800c482:	429a      	cmp	r2, r3
 800c484:	d301      	bcc.n	800c48a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c486:	2300      	movs	r3, #0
 800c488:	e102      	b.n	800c690 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c48e:	887a      	ldrh	r2, [r7, #2]
 800c490:	429a      	cmp	r2, r3
 800c492:	d906      	bls.n	800c4a2 <tcp_split_unsent_seg+0x7e>
 800c494:	4b80      	ldr	r3, [pc, #512]	; (800c698 <tcp_split_unsent_seg+0x274>)
 800c496:	f240 325b 	movw	r2, #859	; 0x35b
 800c49a:	4983      	ldr	r1, [pc, #524]	; (800c6a8 <tcp_split_unsent_seg+0x284>)
 800c49c:	4880      	ldr	r0, [pc, #512]	; (800c6a0 <tcp_split_unsent_seg+0x27c>)
 800c49e:	f004 f825 	bl	80104ec <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	891b      	ldrh	r3, [r3, #8]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d106      	bne.n	800c4b8 <tcp_split_unsent_seg+0x94>
 800c4aa:	4b7b      	ldr	r3, [pc, #492]	; (800c698 <tcp_split_unsent_seg+0x274>)
 800c4ac:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c4b0:	497e      	ldr	r1, [pc, #504]	; (800c6ac <tcp_split_unsent_seg+0x288>)
 800c4b2:	487b      	ldr	r0, [pc, #492]	; (800c6a0 <tcp_split_unsent_seg+0x27c>)
 800c4b4:	f004 f81a 	bl	80104ec <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	7a9b      	ldrb	r3, [r3, #10]
 800c4bc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c4be:	7bfb      	ldrb	r3, [r7, #15]
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	b2db      	uxtb	r3, r3
 800c4c4:	f003 0304 	and.w	r3, r3, #4
 800c4c8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	891a      	ldrh	r2, [r3, #8]
 800c4ce:	887b      	ldrh	r3, [r7, #2]
 800c4d0:	1ad3      	subs	r3, r2, r3
 800c4d2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c4d4:	7bbb      	ldrb	r3, [r7, #14]
 800c4d6:	b29a      	uxth	r2, r3
 800c4d8:	89bb      	ldrh	r3, [r7, #12]
 800c4da:	4413      	add	r3, r2
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	2036      	movs	r0, #54	; 0x36
 800c4e6:	f7fa fb63 	bl	8006bb0 <pbuf_alloc>
 800c4ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	f000 80b7 	beq.w	800c662 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	891a      	ldrh	r2, [r3, #8]
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	891b      	ldrh	r3, [r3, #8]
 800c4fe:	1ad3      	subs	r3, r2, r3
 800c500:	b29a      	uxth	r2, r3
 800c502:	887b      	ldrh	r3, [r7, #2]
 800c504:	4413      	add	r3, r2
 800c506:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	6858      	ldr	r0, [r3, #4]
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	685a      	ldr	r2, [r3, #4]
 800c510:	7bbb      	ldrb	r3, [r7, #14]
 800c512:	18d1      	adds	r1, r2, r3
 800c514:	897b      	ldrh	r3, [r7, #10]
 800c516:	89ba      	ldrh	r2, [r7, #12]
 800c518:	f7fb f818 	bl	800754c <pbuf_copy_partial>
 800c51c:	4603      	mov	r3, r0
 800c51e:	461a      	mov	r2, r3
 800c520:	89bb      	ldrh	r3, [r7, #12]
 800c522:	4293      	cmp	r3, r2
 800c524:	f040 809f 	bne.w	800c666 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	899b      	ldrh	r3, [r3, #12]
 800c52e:	b29b      	uxth	r3, r3
 800c530:	4618      	mov	r0, r3
 800c532:	f7f9 fb45 	bl	8005bc0 <lwip_htons>
 800c536:	4603      	mov	r3, r0
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c53e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c540:	2300      	movs	r3, #0
 800c542:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c544:	7efb      	ldrb	r3, [r7, #27]
 800c546:	f003 0308 	and.w	r3, r3, #8
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d007      	beq.n	800c55e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c54e:	7efb      	ldrb	r3, [r7, #27]
 800c550:	f023 0308 	bic.w	r3, r3, #8
 800c554:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c556:	7ebb      	ldrb	r3, [r7, #26]
 800c558:	f043 0308 	orr.w	r3, r3, #8
 800c55c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c55e:	7efb      	ldrb	r3, [r7, #27]
 800c560:	f003 0301 	and.w	r3, r3, #1
 800c564:	2b00      	cmp	r3, #0
 800c566:	d007      	beq.n	800c578 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c568:	7efb      	ldrb	r3, [r7, #27]
 800c56a:	f023 0301 	bic.w	r3, r3, #1
 800c56e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c570:	7ebb      	ldrb	r3, [r7, #26]
 800c572:	f043 0301 	orr.w	r3, r3, #1
 800c576:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	4618      	mov	r0, r3
 800c580:	f7f9 fb33 	bl	8005bea <lwip_htonl>
 800c584:	4602      	mov	r2, r0
 800c586:	887b      	ldrh	r3, [r7, #2]
 800c588:	18d1      	adds	r1, r2, r3
 800c58a:	7eba      	ldrb	r2, [r7, #26]
 800c58c:	7bfb      	ldrb	r3, [r7, #15]
 800c58e:	9300      	str	r3, [sp, #0]
 800c590:	460b      	mov	r3, r1
 800c592:	6939      	ldr	r1, [r7, #16]
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f7ff fa4f 	bl	800ba38 <tcp_create_segment>
 800c59a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d063      	beq.n	800c66a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7fa fe6e 	bl	8007288 <pbuf_clen>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c5b6:	1a9b      	subs	r3, r3, r2
 800c5b8:	b29a      	uxth	r2, r3
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	6858      	ldr	r0, [r3, #4]
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	891a      	ldrh	r2, [r3, #8]
 800c5ca:	89bb      	ldrh	r3, [r7, #12]
 800c5cc:	1ad3      	subs	r3, r2, r3
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	f7fa fc4b 	bl	8006e6c <pbuf_realloc>
  useg->len -= remainder;
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	891a      	ldrh	r2, [r3, #8]
 800c5da:	89bb      	ldrh	r3, [r7, #12]
 800c5dc:	1ad3      	subs	r3, r2, r3
 800c5de:	b29a      	uxth	r2, r3
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	899b      	ldrh	r3, [r3, #12]
 800c5ea:	b29c      	uxth	r4, r3
 800c5ec:	7efb      	ldrb	r3, [r7, #27]
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7f9 fae5 	bl	8005bc0 <lwip_htons>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	68db      	ldr	r3, [r3, #12]
 800c5fe:	4322      	orrs	r2, r4
 800c600:	b292      	uxth	r2, r2
 800c602:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	4618      	mov	r0, r3
 800c60a:	f7fa fe3d 	bl	8007288 <pbuf_clen>
 800c60e:	4603      	mov	r3, r0
 800c610:	461a      	mov	r2, r3
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c618:	4413      	add	r3, r2
 800c61a:	b29a      	uxth	r2, r3
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c622:	69fb      	ldr	r3, [r7, #28]
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	4618      	mov	r0, r3
 800c628:	f7fa fe2e 	bl	8007288 <pbuf_clen>
 800c62c:	4603      	mov	r3, r0
 800c62e:	461a      	mov	r2, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c636:	4413      	add	r3, r2
 800c638:	b29a      	uxth	r2, r3
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	69fb      	ldr	r3, [r7, #28]
 800c646:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	69fa      	ldr	r2, [r7, #28]
 800c64c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c64e:	69fb      	ldr	r3, [r7, #28]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d103      	bne.n	800c65e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2200      	movs	r2, #0
 800c65a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c65e:	2300      	movs	r3, #0
 800c660:	e016      	b.n	800c690 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c662:	bf00      	nop
 800c664:	e002      	b.n	800c66c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c666:	bf00      	nop
 800c668:	e000      	b.n	800c66c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c66a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d006      	beq.n	800c680 <tcp_split_unsent_seg+0x25c>
 800c672:	4b09      	ldr	r3, [pc, #36]	; (800c698 <tcp_split_unsent_seg+0x274>)
 800c674:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c678:	490d      	ldr	r1, [pc, #52]	; (800c6b0 <tcp_split_unsent_seg+0x28c>)
 800c67a:	4809      	ldr	r0, [pc, #36]	; (800c6a0 <tcp_split_unsent_seg+0x27c>)
 800c67c:	f003 ff36 	bl	80104ec <iprintf>
  if (p != NULL) {
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d002      	beq.n	800c68c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c686:	6938      	ldr	r0, [r7, #16]
 800c688:	f7fa fd76 	bl	8007178 <pbuf_free>
  }

  return ERR_MEM;
 800c68c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c690:	4618      	mov	r0, r3
 800c692:	3724      	adds	r7, #36	; 0x24
 800c694:	46bd      	mov	sp, r7
 800c696:	bd90      	pop	{r4, r7, pc}
 800c698:	08013a3c 	.word	0x08013a3c
 800c69c:	08013dd0 	.word	0x08013dd0
 800c6a0:	08013a90 	.word	0x08013a90
 800c6a4:	08013df4 	.word	0x08013df4
 800c6a8:	08013e18 	.word	0x08013e18
 800c6ac:	08013e28 	.word	0x08013e28
 800c6b0:	08013e38 	.word	0x08013e38

0800c6b4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c6b4:	b590      	push	{r4, r7, lr}
 800c6b6:	b085      	sub	sp, #20
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d106      	bne.n	800c6d0 <tcp_send_fin+0x1c>
 800c6c2:	4b21      	ldr	r3, [pc, #132]	; (800c748 <tcp_send_fin+0x94>)
 800c6c4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c6c8:	4920      	ldr	r1, [pc, #128]	; (800c74c <tcp_send_fin+0x98>)
 800c6ca:	4821      	ldr	r0, [pc, #132]	; (800c750 <tcp_send_fin+0x9c>)
 800c6cc:	f003 ff0e 	bl	80104ec <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d02e      	beq.n	800c736 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6dc:	60fb      	str	r3, [r7, #12]
 800c6de:	e002      	b.n	800c6e6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d1f8      	bne.n	800c6e0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	899b      	ldrh	r3, [r3, #12]
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f7f9 fa62 	bl	8005bc0 <lwip_htons>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	b2db      	uxtb	r3, r3
 800c700:	f003 0307 	and.w	r3, r3, #7
 800c704:	2b00      	cmp	r3, #0
 800c706:	d116      	bne.n	800c736 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	899b      	ldrh	r3, [r3, #12]
 800c70e:	b29c      	uxth	r4, r3
 800c710:	2001      	movs	r0, #1
 800c712:	f7f9 fa55 	bl	8005bc0 <lwip_htons>
 800c716:	4603      	mov	r3, r0
 800c718:	461a      	mov	r2, r3
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	68db      	ldr	r3, [r3, #12]
 800c71e:	4322      	orrs	r2, r4
 800c720:	b292      	uxth	r2, r2
 800c722:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	8b5b      	ldrh	r3, [r3, #26]
 800c728:	f043 0320 	orr.w	r3, r3, #32
 800c72c:	b29a      	uxth	r2, r3
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c732:	2300      	movs	r3, #0
 800c734:	e004      	b.n	800c740 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c736:	2101      	movs	r1, #1
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 f80b 	bl	800c754 <tcp_enqueue_flags>
 800c73e:	4603      	mov	r3, r0
}
 800c740:	4618      	mov	r0, r3
 800c742:	3714      	adds	r7, #20
 800c744:	46bd      	mov	sp, r7
 800c746:	bd90      	pop	{r4, r7, pc}
 800c748:	08013a3c 	.word	0x08013a3c
 800c74c:	08013e44 	.word	0x08013e44
 800c750:	08013a90 	.word	0x08013a90

0800c754 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b08a      	sub	sp, #40	; 0x28
 800c758:	af02      	add	r7, sp, #8
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	460b      	mov	r3, r1
 800c75e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c760:	2300      	movs	r3, #0
 800c762:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c764:	2300      	movs	r3, #0
 800c766:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c768:	78fb      	ldrb	r3, [r7, #3]
 800c76a:	f003 0303 	and.w	r3, r3, #3
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d106      	bne.n	800c780 <tcp_enqueue_flags+0x2c>
 800c772:	4b67      	ldr	r3, [pc, #412]	; (800c910 <tcp_enqueue_flags+0x1bc>)
 800c774:	f240 4211 	movw	r2, #1041	; 0x411
 800c778:	4966      	ldr	r1, [pc, #408]	; (800c914 <tcp_enqueue_flags+0x1c0>)
 800c77a:	4867      	ldr	r0, [pc, #412]	; (800c918 <tcp_enqueue_flags+0x1c4>)
 800c77c:	f003 feb6 	bl	80104ec <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d106      	bne.n	800c794 <tcp_enqueue_flags+0x40>
 800c786:	4b62      	ldr	r3, [pc, #392]	; (800c910 <tcp_enqueue_flags+0x1bc>)
 800c788:	f240 4213 	movw	r2, #1043	; 0x413
 800c78c:	4963      	ldr	r1, [pc, #396]	; (800c91c <tcp_enqueue_flags+0x1c8>)
 800c78e:	4862      	ldr	r0, [pc, #392]	; (800c918 <tcp_enqueue_flags+0x1c4>)
 800c790:	f003 feac 	bl	80104ec <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c794:	78fb      	ldrb	r3, [r7, #3]
 800c796:	f003 0302 	and.w	r3, r3, #2
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d001      	beq.n	800c7a2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c7a2:	7ffb      	ldrb	r3, [r7, #31]
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	f003 0304 	and.w	r3, r3, #4
 800c7ac:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c7ae:	7dfb      	ldrb	r3, [r7, #23]
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	2036      	movs	r0, #54	; 0x36
 800c7ba:	f7fa f9f9 	bl	8006bb0 <pbuf_alloc>
 800c7be:	6138      	str	r0, [r7, #16]
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d109      	bne.n	800c7da <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	8b5b      	ldrh	r3, [r3, #26]
 800c7ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7ce:	b29a      	uxth	r2, r3
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c7d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c7d8:	e095      	b.n	800c906 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	895a      	ldrh	r2, [r3, #10]
 800c7de:	7dfb      	ldrb	r3, [r7, #23]
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d206      	bcs.n	800c7f4 <tcp_enqueue_flags+0xa0>
 800c7e6:	4b4a      	ldr	r3, [pc, #296]	; (800c910 <tcp_enqueue_flags+0x1bc>)
 800c7e8:	f240 4239 	movw	r2, #1081	; 0x439
 800c7ec:	494c      	ldr	r1, [pc, #304]	; (800c920 <tcp_enqueue_flags+0x1cc>)
 800c7ee:	484a      	ldr	r0, [pc, #296]	; (800c918 <tcp_enqueue_flags+0x1c4>)
 800c7f0:	f003 fe7c 	bl	80104ec <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c7f8:	78fa      	ldrb	r2, [r7, #3]
 800c7fa:	7ffb      	ldrb	r3, [r7, #31]
 800c7fc:	9300      	str	r3, [sp, #0]
 800c7fe:	460b      	mov	r3, r1
 800c800:	6939      	ldr	r1, [r7, #16]
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f7ff f918 	bl	800ba38 <tcp_create_segment>
 800c808:	60f8      	str	r0, [r7, #12]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d109      	bne.n	800c824 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	8b5b      	ldrh	r3, [r3, #26]
 800c814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c818:	b29a      	uxth	r2, r3
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c81e:	f04f 33ff 	mov.w	r3, #4294967295
 800c822:	e070      	b.n	800c906 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	f003 0303 	and.w	r3, r3, #3
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d006      	beq.n	800c83e <tcp_enqueue_flags+0xea>
 800c830:	4b37      	ldr	r3, [pc, #220]	; (800c910 <tcp_enqueue_flags+0x1bc>)
 800c832:	f240 4242 	movw	r2, #1090	; 0x442
 800c836:	493b      	ldr	r1, [pc, #236]	; (800c924 <tcp_enqueue_flags+0x1d0>)
 800c838:	4837      	ldr	r0, [pc, #220]	; (800c918 <tcp_enqueue_flags+0x1c4>)
 800c83a:	f003 fe57 	bl	80104ec <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	891b      	ldrh	r3, [r3, #8]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d006      	beq.n	800c854 <tcp_enqueue_flags+0x100>
 800c846:	4b32      	ldr	r3, [pc, #200]	; (800c910 <tcp_enqueue_flags+0x1bc>)
 800c848:	f240 4243 	movw	r2, #1091	; 0x443
 800c84c:	4936      	ldr	r1, [pc, #216]	; (800c928 <tcp_enqueue_flags+0x1d4>)
 800c84e:	4832      	ldr	r0, [pc, #200]	; (800c918 <tcp_enqueue_flags+0x1c4>)
 800c850:	f003 fe4c 	bl	80104ec <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d103      	bne.n	800c864 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	68fa      	ldr	r2, [r7, #12]
 800c860:	66da      	str	r2, [r3, #108]	; 0x6c
 800c862:	e00d      	b.n	800c880 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c868:	61bb      	str	r3, [r7, #24]
 800c86a:	e002      	b.n	800c872 <tcp_enqueue_flags+0x11e>
 800c86c:	69bb      	ldr	r3, [r7, #24]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	61bb      	str	r3, [r7, #24]
 800c872:	69bb      	ldr	r3, [r7, #24]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d1f8      	bne.n	800c86c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c87a:	69bb      	ldr	r3, [r7, #24]
 800c87c:	68fa      	ldr	r2, [r7, #12]
 800c87e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c888:	78fb      	ldrb	r3, [r7, #3]
 800c88a:	f003 0302 	and.w	r3, r3, #2
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d104      	bne.n	800c89c <tcp_enqueue_flags+0x148>
 800c892:	78fb      	ldrb	r3, [r7, #3]
 800c894:	f003 0301 	and.w	r3, r3, #1
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d004      	beq.n	800c8a6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8a0:	1c5a      	adds	r2, r3, #1
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c8a6:	78fb      	ldrb	r3, [r7, #3]
 800c8a8:	f003 0301 	and.w	r3, r3, #1
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d006      	beq.n	800c8be <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	8b5b      	ldrh	r3, [r3, #26]
 800c8b4:	f043 0320 	orr.w	r3, r3, #32
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7fa fce0 	bl	8007288 <pbuf_clen>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c8d2:	4413      	add	r3, r2
 800c8d4:	b29a      	uxth	r2, r3
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d00e      	beq.n	800c904 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d10a      	bne.n	800c904 <tcp_enqueue_flags+0x1b0>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d106      	bne.n	800c904 <tcp_enqueue_flags+0x1b0>
 800c8f6:	4b06      	ldr	r3, [pc, #24]	; (800c910 <tcp_enqueue_flags+0x1bc>)
 800c8f8:	f240 4265 	movw	r2, #1125	; 0x465
 800c8fc:	490b      	ldr	r1, [pc, #44]	; (800c92c <tcp_enqueue_flags+0x1d8>)
 800c8fe:	4806      	ldr	r0, [pc, #24]	; (800c918 <tcp_enqueue_flags+0x1c4>)
 800c900:	f003 fdf4 	bl	80104ec <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c904:	2300      	movs	r3, #0
}
 800c906:	4618      	mov	r0, r3
 800c908:	3720      	adds	r7, #32
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	08013a3c 	.word	0x08013a3c
 800c914:	08013e60 	.word	0x08013e60
 800c918:	08013a90 	.word	0x08013a90
 800c91c:	08013eb8 	.word	0x08013eb8
 800c920:	08013ed8 	.word	0x08013ed8
 800c924:	08013f14 	.word	0x08013f14
 800c928:	08013f2c 	.word	0x08013f2c
 800c92c:	08013f58 	.word	0x08013f58

0800c930 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c930:	b5b0      	push	{r4, r5, r7, lr}
 800c932:	b08a      	sub	sp, #40	; 0x28
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d106      	bne.n	800c94c <tcp_output+0x1c>
 800c93e:	4b8a      	ldr	r3, [pc, #552]	; (800cb68 <tcp_output+0x238>)
 800c940:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c944:	4989      	ldr	r1, [pc, #548]	; (800cb6c <tcp_output+0x23c>)
 800c946:	488a      	ldr	r0, [pc, #552]	; (800cb70 <tcp_output+0x240>)
 800c948:	f003 fdd0 	bl	80104ec <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	7d1b      	ldrb	r3, [r3, #20]
 800c950:	2b01      	cmp	r3, #1
 800c952:	d106      	bne.n	800c962 <tcp_output+0x32>
 800c954:	4b84      	ldr	r3, [pc, #528]	; (800cb68 <tcp_output+0x238>)
 800c956:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c95a:	4986      	ldr	r1, [pc, #536]	; (800cb74 <tcp_output+0x244>)
 800c95c:	4884      	ldr	r0, [pc, #528]	; (800cb70 <tcp_output+0x240>)
 800c95e:	f003 fdc5 	bl	80104ec <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c962:	4b85      	ldr	r3, [pc, #532]	; (800cb78 <tcp_output+0x248>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d101      	bne.n	800c970 <tcp_output+0x40>
    return ERR_OK;
 800c96c:	2300      	movs	r3, #0
 800c96e:	e1ce      	b.n	800cd0e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c97c:	4293      	cmp	r3, r2
 800c97e:	bf28      	it	cs
 800c980:	4613      	movcs	r3, r2
 800c982:	b29b      	uxth	r3, r3
 800c984:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c98a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d10b      	bne.n	800c9aa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	8b5b      	ldrh	r3, [r3, #26]
 800c996:	f003 0302 	and.w	r3, r3, #2
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	f000 81aa 	beq.w	800ccf4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f000 fdcb 	bl	800d53c <tcp_send_empty_ack>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	e1b1      	b.n	800cd0e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c9aa:	6879      	ldr	r1, [r7, #4]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	3304      	adds	r3, #4
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f7ff f824 	bl	800ba00 <tcp_route>
 800c9b8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d102      	bne.n	800c9c6 <tcp_output+0x96>
    return ERR_RTE;
 800c9c0:	f06f 0303 	mvn.w	r3, #3
 800c9c4:	e1a3      	b.n	800cd0e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d003      	beq.n	800c9d4 <tcp_output+0xa4>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d111      	bne.n	800c9f8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d002      	beq.n	800c9e0 <tcp_output+0xb0>
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	3304      	adds	r3, #4
 800c9de:	e000      	b.n	800c9e2 <tcp_output+0xb2>
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d102      	bne.n	800c9f0 <tcp_output+0xc0>
      return ERR_RTE;
 800c9ea:	f06f 0303 	mvn.w	r3, #3
 800c9ee:	e18e      	b.n	800cd0e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	681a      	ldr	r2, [r3, #0]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fa:	68db      	ldr	r3, [r3, #12]
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7f9 f8f3 	bl	8005bea <lwip_htonl>
 800ca04:	4602      	mov	r2, r0
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca0a:	1ad3      	subs	r3, r2, r3
 800ca0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca0e:	8912      	ldrh	r2, [r2, #8]
 800ca10:	4413      	add	r3, r2
 800ca12:	69ba      	ldr	r2, [r7, #24]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d227      	bcs.n	800ca68 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ca1e:	461a      	mov	r2, r3
 800ca20:	69bb      	ldr	r3, [r7, #24]
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d114      	bne.n	800ca50 <tcp_output+0x120>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d110      	bne.n	800ca50 <tcp_output+0x120>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d10b      	bne.n	800ca50 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2201      	movs	r2, #1
 800ca44:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	8b5b      	ldrh	r3, [r3, #26]
 800ca54:	f003 0302 	and.w	r3, r3, #2
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f000 814d 	beq.w	800ccf8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f000 fd6c 	bl	800d53c <tcp_send_empty_ack>
 800ca64:	4603      	mov	r3, r0
 800ca66:	e152      	b.n	800cd0e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca74:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ca76:	6a3b      	ldr	r3, [r7, #32]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	f000 811c 	beq.w	800ccb6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ca7e:	e002      	b.n	800ca86 <tcp_output+0x156>
 800ca80:	6a3b      	ldr	r3, [r7, #32]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	623b      	str	r3, [r7, #32]
 800ca86:	6a3b      	ldr	r3, [r7, #32]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d1f8      	bne.n	800ca80 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ca8e:	e112      	b.n	800ccb6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ca90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca92:	68db      	ldr	r3, [r3, #12]
 800ca94:	899b      	ldrh	r3, [r3, #12]
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f7f9 f891 	bl	8005bc0 <lwip_htons>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	f003 0304 	and.w	r3, r3, #4
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d006      	beq.n	800cab8 <tcp_output+0x188>
 800caaa:	4b2f      	ldr	r3, [pc, #188]	; (800cb68 <tcp_output+0x238>)
 800caac:	f240 5236 	movw	r2, #1334	; 0x536
 800cab0:	4932      	ldr	r1, [pc, #200]	; (800cb7c <tcp_output+0x24c>)
 800cab2:	482f      	ldr	r0, [pc, #188]	; (800cb70 <tcp_output+0x240>)
 800cab4:	f003 fd1a 	bl	80104ec <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d01f      	beq.n	800cb00 <tcp_output+0x1d0>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	8b5b      	ldrh	r3, [r3, #26]
 800cac4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d119      	bne.n	800cb00 <tcp_output+0x1d0>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00b      	beq.n	800caec <tcp_output+0x1bc>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d110      	bne.n	800cb00 <tcp_output+0x1d0>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cae2:	891a      	ldrh	r2, [r3, #8]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cae8:	429a      	cmp	r2, r3
 800caea:	d209      	bcs.n	800cb00 <tcp_output+0x1d0>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d004      	beq.n	800cb00 <tcp_output+0x1d0>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cafc:	2b08      	cmp	r3, #8
 800cafe:	d901      	bls.n	800cb04 <tcp_output+0x1d4>
 800cb00:	2301      	movs	r3, #1
 800cb02:	e000      	b.n	800cb06 <tcp_output+0x1d6>
 800cb04:	2300      	movs	r3, #0
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d106      	bne.n	800cb18 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	8b5b      	ldrh	r3, [r3, #26]
 800cb0e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	f000 80e4 	beq.w	800cce0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	7d1b      	ldrb	r3, [r3, #20]
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	d00d      	beq.n	800cb3c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800cb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb22:	68db      	ldr	r3, [r3, #12]
 800cb24:	899b      	ldrh	r3, [r3, #12]
 800cb26:	b29c      	uxth	r4, r3
 800cb28:	2010      	movs	r0, #16
 800cb2a:	f7f9 f849 	bl	8005bc0 <lwip_htons>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	461a      	mov	r2, r3
 800cb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb34:	68db      	ldr	r3, [r3, #12]
 800cb36:	4322      	orrs	r2, r4
 800cb38:	b292      	uxth	r2, r2
 800cb3a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800cb3c:	697a      	ldr	r2, [r7, #20]
 800cb3e:	6879      	ldr	r1, [r7, #4]
 800cb40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb42:	f000 f909 	bl	800cd58 <tcp_output_segment>
 800cb46:	4603      	mov	r3, r0
 800cb48:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800cb4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d016      	beq.n	800cb80 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	8b5b      	ldrh	r3, [r3, #26]
 800cb56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb5a:	b29a      	uxth	r2, r3
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	835a      	strh	r2, [r3, #26]
      return err;
 800cb60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb64:	e0d3      	b.n	800cd0e <tcp_output+0x3de>
 800cb66:	bf00      	nop
 800cb68:	08013a3c 	.word	0x08013a3c
 800cb6c:	08013f80 	.word	0x08013f80
 800cb70:	08013a90 	.word	0x08013a90
 800cb74:	08013f98 	.word	0x08013f98
 800cb78:	2000684c 	.word	0x2000684c
 800cb7c:	08013fc0 	.word	0x08013fc0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800cb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb82:	681a      	ldr	r2, [r3, #0]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	7d1b      	ldrb	r3, [r3, #20]
 800cb8c:	2b02      	cmp	r3, #2
 800cb8e:	d006      	beq.n	800cb9e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	8b5b      	ldrh	r3, [r3, #26]
 800cb94:	f023 0303 	bic.w	r3, r3, #3
 800cb98:	b29a      	uxth	r2, r3
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7f9 f820 	bl	8005bea <lwip_htonl>
 800cbaa:	4604      	mov	r4, r0
 800cbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbae:	891b      	ldrh	r3, [r3, #8]
 800cbb0:	461d      	mov	r5, r3
 800cbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb4:	68db      	ldr	r3, [r3, #12]
 800cbb6:	899b      	ldrh	r3, [r3, #12]
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f7f9 f800 	bl	8005bc0 <lwip_htons>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	f003 0303 	and.w	r3, r3, #3
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d001      	beq.n	800cbd0 <tcp_output+0x2a0>
 800cbcc:	2301      	movs	r3, #1
 800cbce:	e000      	b.n	800cbd2 <tcp_output+0x2a2>
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	442b      	add	r3, r5
 800cbd4:	4423      	add	r3, r4
 800cbd6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	1ad3      	subs	r3, r2, r3
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	da02      	bge.n	800cbea <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	68ba      	ldr	r2, [r7, #8]
 800cbe8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800cbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbec:	891b      	ldrh	r3, [r3, #8]
 800cbee:	461c      	mov	r4, r3
 800cbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf2:	68db      	ldr	r3, [r3, #12]
 800cbf4:	899b      	ldrh	r3, [r3, #12]
 800cbf6:	b29b      	uxth	r3, r3
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7f8 ffe1 	bl	8005bc0 <lwip_htons>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	f003 0303 	and.w	r3, r3, #3
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d001      	beq.n	800cc0e <tcp_output+0x2de>
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	e000      	b.n	800cc10 <tcp_output+0x2e0>
 800cc0e:	2300      	movs	r3, #0
 800cc10:	4423      	add	r3, r4
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d049      	beq.n	800ccaa <tcp_output+0x37a>
      seg->next = NULL;
 800cc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc18:	2200      	movs	r2, #0
 800cc1a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d105      	bne.n	800cc30 <tcp_output+0x300>
        pcb->unacked = seg;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc28:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800cc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2c:	623b      	str	r3, [r7, #32]
 800cc2e:	e03f      	b.n	800ccb0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800cc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc32:	68db      	ldr	r3, [r3, #12]
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7f8 ffd7 	bl	8005bea <lwip_htonl>
 800cc3c:	4604      	mov	r4, r0
 800cc3e:	6a3b      	ldr	r3, [r7, #32]
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7f8 ffd0 	bl	8005bea <lwip_htonl>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	1ae3      	subs	r3, r4, r3
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	da24      	bge.n	800cc9c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	3370      	adds	r3, #112	; 0x70
 800cc56:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800cc58:	e002      	b.n	800cc60 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d011      	beq.n	800cc8c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	685b      	ldr	r3, [r3, #4]
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7f8 ffba 	bl	8005bea <lwip_htonl>
 800cc76:	4604      	mov	r4, r0
 800cc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7a:	68db      	ldr	r3, [r3, #12]
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7f8 ffb3 	bl	8005bea <lwip_htonl>
 800cc84:	4603      	mov	r3, r0
 800cc86:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	dbe6      	blt.n	800cc5a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800cc8c:	69fb      	ldr	r3, [r7, #28]
 800cc8e:	681a      	ldr	r2, [r3, #0]
 800cc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc92:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc98:	601a      	str	r2, [r3, #0]
 800cc9a:	e009      	b.n	800ccb0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800cc9c:	6a3b      	ldr	r3, [r7, #32]
 800cc9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cca0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800cca2:	6a3b      	ldr	r3, [r7, #32]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	623b      	str	r3, [r7, #32]
 800cca8:	e002      	b.n	800ccb0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ccaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ccac:	f7fb ff31 	bl	8008b12 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccb4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ccb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d012      	beq.n	800cce2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7f8 ff91 	bl	8005bea <lwip_htonl>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccce:	1ad3      	subs	r3, r2, r3
 800ccd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccd2:	8912      	ldrh	r2, [r2, #8]
 800ccd4:	4413      	add	r3, r2
  while (seg != NULL &&
 800ccd6:	69ba      	ldr	r2, [r7, #24]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	f4bf aed9 	bcs.w	800ca90 <tcp_output+0x160>
 800ccde:	e000      	b.n	800cce2 <tcp_output+0x3b2>
      break;
 800cce0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d108      	bne.n	800ccfc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2200      	movs	r2, #0
 800ccee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800ccf2:	e004      	b.n	800ccfe <tcp_output+0x3ce>
    goto output_done;
 800ccf4:	bf00      	nop
 800ccf6:	e002      	b.n	800ccfe <tcp_output+0x3ce>
    goto output_done;
 800ccf8:	bf00      	nop
 800ccfa:	e000      	b.n	800ccfe <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800ccfc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	8b5b      	ldrh	r3, [r3, #26]
 800cd02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd06:	b29a      	uxth	r2, r3
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800cd0c:	2300      	movs	r3, #0
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3728      	adds	r7, #40	; 0x28
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bdb0      	pop	{r4, r5, r7, pc}
 800cd16:	bf00      	nop

0800cd18 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d106      	bne.n	800cd34 <tcp_output_segment_busy+0x1c>
 800cd26:	4b09      	ldr	r3, [pc, #36]	; (800cd4c <tcp_output_segment_busy+0x34>)
 800cd28:	f240 529a 	movw	r2, #1434	; 0x59a
 800cd2c:	4908      	ldr	r1, [pc, #32]	; (800cd50 <tcp_output_segment_busy+0x38>)
 800cd2e:	4809      	ldr	r0, [pc, #36]	; (800cd54 <tcp_output_segment_busy+0x3c>)
 800cd30:	f003 fbdc 	bl	80104ec <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	7b9b      	ldrb	r3, [r3, #14]
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d001      	beq.n	800cd42 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800cd3e:	2301      	movs	r3, #1
 800cd40:	e000      	b.n	800cd44 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800cd42:	2300      	movs	r3, #0
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3708      	adds	r7, #8
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	08013a3c 	.word	0x08013a3c
 800cd50:	08013fd8 	.word	0x08013fd8
 800cd54:	08013a90 	.word	0x08013a90

0800cd58 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800cd58:	b5b0      	push	{r4, r5, r7, lr}
 800cd5a:	b08c      	sub	sp, #48	; 0x30
 800cd5c:	af04      	add	r7, sp, #16
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d106      	bne.n	800cd78 <tcp_output_segment+0x20>
 800cd6a:	4b63      	ldr	r3, [pc, #396]	; (800cef8 <tcp_output_segment+0x1a0>)
 800cd6c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800cd70:	4962      	ldr	r1, [pc, #392]	; (800cefc <tcp_output_segment+0x1a4>)
 800cd72:	4863      	ldr	r0, [pc, #396]	; (800cf00 <tcp_output_segment+0x1a8>)
 800cd74:	f003 fbba 	bl	80104ec <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d106      	bne.n	800cd8c <tcp_output_segment+0x34>
 800cd7e:	4b5e      	ldr	r3, [pc, #376]	; (800cef8 <tcp_output_segment+0x1a0>)
 800cd80:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800cd84:	495f      	ldr	r1, [pc, #380]	; (800cf04 <tcp_output_segment+0x1ac>)
 800cd86:	485e      	ldr	r0, [pc, #376]	; (800cf00 <tcp_output_segment+0x1a8>)
 800cd88:	f003 fbb0 	bl	80104ec <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d106      	bne.n	800cda0 <tcp_output_segment+0x48>
 800cd92:	4b59      	ldr	r3, [pc, #356]	; (800cef8 <tcp_output_segment+0x1a0>)
 800cd94:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800cd98:	495b      	ldr	r1, [pc, #364]	; (800cf08 <tcp_output_segment+0x1b0>)
 800cd9a:	4859      	ldr	r0, [pc, #356]	; (800cf00 <tcp_output_segment+0x1a8>)
 800cd9c:	f003 fba6 	bl	80104ec <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f7ff ffb9 	bl	800cd18 <tcp_output_segment_busy>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d001      	beq.n	800cdb0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800cdac:	2300      	movs	r3, #0
 800cdae:	e09f      	b.n	800cef0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	68dc      	ldr	r4, [r3, #12]
 800cdb8:	4610      	mov	r0, r2
 800cdba:	f7f8 ff16 	bl	8005bea <lwip_htonl>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	68dc      	ldr	r4, [r3, #12]
 800cdca:	4610      	mov	r0, r2
 800cdcc:	f7f8 fef8 	bl	8005bc0 <lwip_htons>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd8:	68ba      	ldr	r2, [r7, #8]
 800cdda:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cddc:	441a      	add	r2, r3
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	68db      	ldr	r3, [r3, #12]
 800cde6:	3314      	adds	r3, #20
 800cde8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	7a9b      	ldrb	r3, [r3, #10]
 800cdee:	f003 0301 	and.w	r3, r3, #1
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d015      	beq.n	800ce22 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	3304      	adds	r3, #4
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	6879      	ldr	r1, [r7, #4]
 800cdfe:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ce02:	f7fc fa33 	bl	800926c <tcp_eff_send_mss_netif>
 800ce06:	4603      	mov	r3, r0
 800ce08:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ce0a:	8b7b      	ldrh	r3, [r7, #26]
 800ce0c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7f8 feea 	bl	8005bea <lwip_htonl>
 800ce16:	4602      	mov	r2, r0
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	3304      	adds	r3, #4
 800ce20:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	da02      	bge.n	800ce32 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d10c      	bne.n	800ce54 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ce3a:	4b34      	ldr	r3, [pc, #208]	; (800cf0c <tcp_output_segment+0x1b4>)
 800ce3c:	681a      	ldr	r2, [r3, #0]
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	68db      	ldr	r3, [r3, #12]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f7f8 fece 	bl	8005bea <lwip_htonl>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	68da      	ldr	r2, [r3, #12]
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	1ad3      	subs	r3, r2, r3
 800ce60:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	8959      	ldrh	r1, [r3, #10]
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	8b3a      	ldrh	r2, [r7, #24]
 800ce6e:	1a8a      	subs	r2, r1, r2
 800ce70:	b292      	uxth	r2, r2
 800ce72:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	8919      	ldrh	r1, [r3, #8]
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	685b      	ldr	r3, [r3, #4]
 800ce7e:	8b3a      	ldrh	r2, [r7, #24]
 800ce80:	1a8a      	subs	r2, r1, r2
 800ce82:	b292      	uxth	r2, r2
 800ce84:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	68fa      	ldr	r2, [r7, #12]
 800ce8c:	68d2      	ldr	r2, [r2, #12]
 800ce8e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	2200      	movs	r2, #0
 800ce96:	741a      	strb	r2, [r3, #16]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	f103 0214 	add.w	r2, r3, #20
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	7a9b      	ldrb	r3, [r3, #10]
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	f003 0304 	and.w	r3, r3, #4
 800ceae:	4413      	add	r3, r2
 800ceb0:	69fa      	ldr	r2, [r7, #28]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d006      	beq.n	800cec4 <tcp_output_segment+0x16c>
 800ceb6:	4b10      	ldr	r3, [pc, #64]	; (800cef8 <tcp_output_segment+0x1a0>)
 800ceb8:	f240 621c 	movw	r2, #1564	; 0x61c
 800cebc:	4914      	ldr	r1, [pc, #80]	; (800cf10 <tcp_output_segment+0x1b8>)
 800cebe:	4810      	ldr	r0, [pc, #64]	; (800cf00 <tcp_output_segment+0x1a8>)
 800cec0:	f003 fb14 	bl	80104ec <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	6858      	ldr	r0, [r3, #4]
 800cec8:	68b9      	ldr	r1, [r7, #8]
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	1d1c      	adds	r4, r3, #4
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	7add      	ldrb	r5, [r3, #11]
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	7a9b      	ldrb	r3, [r3, #10]
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	9202      	str	r2, [sp, #8]
 800ceda:	2206      	movs	r2, #6
 800cedc:	9201      	str	r2, [sp, #4]
 800cede:	9300      	str	r3, [sp, #0]
 800cee0:	462b      	mov	r3, r5
 800cee2:	4622      	mov	r2, r4
 800cee4:	f002 fa70 	bl	800f3c8 <ip4_output_if>
 800cee8:	4603      	mov	r3, r0
 800ceea:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ceec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3720      	adds	r7, #32
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bdb0      	pop	{r4, r5, r7, pc}
 800cef8:	08013a3c 	.word	0x08013a3c
 800cefc:	08014000 	.word	0x08014000
 800cf00:	08013a90 	.word	0x08013a90
 800cf04:	08014020 	.word	0x08014020
 800cf08:	08014040 	.word	0x08014040
 800cf0c:	20006800 	.word	0x20006800
 800cf10:	08014064 	.word	0x08014064

0800cf14 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800cf14:	b5b0      	push	{r4, r5, r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d106      	bne.n	800cf30 <tcp_rexmit_rto_prepare+0x1c>
 800cf22:	4b31      	ldr	r3, [pc, #196]	; (800cfe8 <tcp_rexmit_rto_prepare+0xd4>)
 800cf24:	f240 6263 	movw	r2, #1635	; 0x663
 800cf28:	4930      	ldr	r1, [pc, #192]	; (800cfec <tcp_rexmit_rto_prepare+0xd8>)
 800cf2a:	4831      	ldr	r0, [pc, #196]	; (800cff0 <tcp_rexmit_rto_prepare+0xdc>)
 800cf2c:	f003 fade 	bl	80104ec <iprintf>

  if (pcb->unacked == NULL) {
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d102      	bne.n	800cf3e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800cf38:	f06f 0305 	mvn.w	r3, #5
 800cf3c:	e050      	b.n	800cfe0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf42:	60fb      	str	r3, [r7, #12]
 800cf44:	e00b      	b.n	800cf5e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800cf46:	68f8      	ldr	r0, [r7, #12]
 800cf48:	f7ff fee6 	bl	800cd18 <tcp_output_segment_busy>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d002      	beq.n	800cf58 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800cf52:	f06f 0305 	mvn.w	r3, #5
 800cf56:	e043      	b.n	800cfe0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	60fb      	str	r3, [r7, #12]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d1ef      	bne.n	800cf46 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800cf66:	68f8      	ldr	r0, [r7, #12]
 800cf68:	f7ff fed6 	bl	800cd18 <tcp_output_segment_busy>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d002      	beq.n	800cf78 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800cf72:	f06f 0305 	mvn.w	r3, #5
 800cf76:	e033      	b.n	800cfe0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	8b5b      	ldrh	r3, [r3, #26]
 800cf92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cf96:	b29a      	uxth	r2, r3
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	68db      	ldr	r3, [r3, #12]
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7f8 fe21 	bl	8005bea <lwip_htonl>
 800cfa8:	4604      	mov	r4, r0
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	891b      	ldrh	r3, [r3, #8]
 800cfae:	461d      	mov	r5, r3
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	68db      	ldr	r3, [r3, #12]
 800cfb4:	899b      	ldrh	r3, [r3, #12]
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7f8 fe01 	bl	8005bc0 <lwip_htons>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	f003 0303 	and.w	r3, r3, #3
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d001      	beq.n	800cfce <tcp_rexmit_rto_prepare+0xba>
 800cfca:	2301      	movs	r3, #1
 800cfcc:	e000      	b.n	800cfd0 <tcp_rexmit_rto_prepare+0xbc>
 800cfce:	2300      	movs	r3, #0
 800cfd0:	442b      	add	r3, r5
 800cfd2:	18e2      	adds	r2, r4, r3
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800cfde:	2300      	movs	r3, #0
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3710      	adds	r7, #16
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bdb0      	pop	{r4, r5, r7, pc}
 800cfe8:	08013a3c 	.word	0x08013a3c
 800cfec:	08014078 	.word	0x08014078
 800cff0:	08013a90 	.word	0x08013a90

0800cff4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d106      	bne.n	800d010 <tcp_rexmit_rto_commit+0x1c>
 800d002:	4b0d      	ldr	r3, [pc, #52]	; (800d038 <tcp_rexmit_rto_commit+0x44>)
 800d004:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d008:	490c      	ldr	r1, [pc, #48]	; (800d03c <tcp_rexmit_rto_commit+0x48>)
 800d00a:	480d      	ldr	r0, [pc, #52]	; (800d040 <tcp_rexmit_rto_commit+0x4c>)
 800d00c:	f003 fa6e 	bl	80104ec <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d016:	2bff      	cmp	r3, #255	; 0xff
 800d018:	d007      	beq.n	800d02a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d020:	3301      	adds	r3, #1
 800d022:	b2da      	uxtb	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f7ff fc80 	bl	800c930 <tcp_output>
}
 800d030:	bf00      	nop
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}
 800d038:	08013a3c 	.word	0x08013a3c
 800d03c:	0801409c 	.word	0x0801409c
 800d040:	08013a90 	.word	0x08013a90

0800d044 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d106      	bne.n	800d060 <tcp_rexmit_rto+0x1c>
 800d052:	4b0a      	ldr	r3, [pc, #40]	; (800d07c <tcp_rexmit_rto+0x38>)
 800d054:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d058:	4909      	ldr	r1, [pc, #36]	; (800d080 <tcp_rexmit_rto+0x3c>)
 800d05a:	480a      	ldr	r0, [pc, #40]	; (800d084 <tcp_rexmit_rto+0x40>)
 800d05c:	f003 fa46 	bl	80104ec <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f7ff ff57 	bl	800cf14 <tcp_rexmit_rto_prepare>
 800d066:	4603      	mov	r3, r0
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d102      	bne.n	800d072 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f7ff ffc1 	bl	800cff4 <tcp_rexmit_rto_commit>
  }
}
 800d072:	bf00      	nop
 800d074:	3708      	adds	r7, #8
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}
 800d07a:	bf00      	nop
 800d07c:	08013a3c 	.word	0x08013a3c
 800d080:	080140c0 	.word	0x080140c0
 800d084:	08013a90 	.word	0x08013a90

0800d088 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d088:	b590      	push	{r4, r7, lr}
 800d08a:	b085      	sub	sp, #20
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d106      	bne.n	800d0a4 <tcp_rexmit+0x1c>
 800d096:	4b2f      	ldr	r3, [pc, #188]	; (800d154 <tcp_rexmit+0xcc>)
 800d098:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d09c:	492e      	ldr	r1, [pc, #184]	; (800d158 <tcp_rexmit+0xd0>)
 800d09e:	482f      	ldr	r0, [pc, #188]	; (800d15c <tcp_rexmit+0xd4>)
 800d0a0:	f003 fa24 	bl	80104ec <iprintf>

  if (pcb->unacked == NULL) {
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d102      	bne.n	800d0b2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d0ac:	f06f 0305 	mvn.w	r3, #5
 800d0b0:	e04c      	b.n	800d14c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0b6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d0b8:	68b8      	ldr	r0, [r7, #8]
 800d0ba:	f7ff fe2d 	bl	800cd18 <tcp_output_segment_busy>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d002      	beq.n	800d0ca <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d0c4:	f06f 0305 	mvn.w	r3, #5
 800d0c8:	e040      	b.n	800d14c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	681a      	ldr	r2, [r3, #0]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	336c      	adds	r3, #108	; 0x6c
 800d0d6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d0d8:	e002      	b.n	800d0e0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d011      	beq.n	800d10c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	68db      	ldr	r3, [r3, #12]
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7f8 fd7a 	bl	8005bea <lwip_htonl>
 800d0f6:	4604      	mov	r4, r0
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	68db      	ldr	r3, [r3, #12]
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7f8 fd73 	bl	8005bea <lwip_htonl>
 800d104:	4603      	mov	r3, r0
 800d106:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d108:	2b00      	cmp	r3, #0
 800d10a:	dbe6      	blt.n	800d0da <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681a      	ldr	r2, [r3, #0]
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	68ba      	ldr	r2, [r7, #8]
 800d118:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d103      	bne.n	800d12a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2200      	movs	r2, #0
 800d126:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d130:	2bff      	cmp	r3, #255	; 0xff
 800d132:	d007      	beq.n	800d144 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d13a:	3301      	adds	r3, #1
 800d13c:	b2da      	uxtb	r2, r3
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2200      	movs	r2, #0
 800d148:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d14a:	2300      	movs	r3, #0
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3714      	adds	r7, #20
 800d150:	46bd      	mov	sp, r7
 800d152:	bd90      	pop	{r4, r7, pc}
 800d154:	08013a3c 	.word	0x08013a3c
 800d158:	080140dc 	.word	0x080140dc
 800d15c:	08013a90 	.word	0x08013a90

0800d160 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b082      	sub	sp, #8
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d106      	bne.n	800d17c <tcp_rexmit_fast+0x1c>
 800d16e:	4b2a      	ldr	r3, [pc, #168]	; (800d218 <tcp_rexmit_fast+0xb8>)
 800d170:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d174:	4929      	ldr	r1, [pc, #164]	; (800d21c <tcp_rexmit_fast+0xbc>)
 800d176:	482a      	ldr	r0, [pc, #168]	; (800d220 <tcp_rexmit_fast+0xc0>)
 800d178:	f003 f9b8 	bl	80104ec <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d180:	2b00      	cmp	r3, #0
 800d182:	d044      	beq.n	800d20e <tcp_rexmit_fast+0xae>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	8b5b      	ldrh	r3, [r3, #26]
 800d188:	f003 0304 	and.w	r3, r3, #4
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d13e      	bne.n	800d20e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f7ff ff79 	bl	800d088 <tcp_rexmit>
 800d196:	4603      	mov	r3, r0
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d138      	bne.n	800d20e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	bf28      	it	cs
 800d1ac:	4613      	movcs	r3, r2
 800d1ae:	b29b      	uxth	r3, r3
 800d1b0:	0fda      	lsrs	r2, r3, #31
 800d1b2:	4413      	add	r3, r2
 800d1b4:	105b      	asrs	r3, r3, #1
 800d1b6:	b29a      	uxth	r2, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1ca:	005b      	lsls	r3, r3, #1
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d206      	bcs.n	800d1de <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1d4:	005b      	lsls	r3, r3, #1
 800d1d6:	b29a      	uxth	r2, r3
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	0049      	lsls	r1, r1, #1
 800d1ec:	440b      	add	r3, r1
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	4413      	add	r3, r2
 800d1f2:	b29a      	uxth	r2, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	8b5b      	ldrh	r3, [r3, #26]
 800d1fe:	f043 0304 	orr.w	r3, r3, #4
 800d202:	b29a      	uxth	r2, r3
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2200      	movs	r2, #0
 800d20c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800d20e:	bf00      	nop
 800d210:	3708      	adds	r7, #8
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	08013a3c 	.word	0x08013a3c
 800d21c:	080140f4 	.word	0x080140f4
 800d220:	08013a90 	.word	0x08013a90

0800d224 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b086      	sub	sp, #24
 800d228:	af00      	add	r7, sp, #0
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	607b      	str	r3, [r7, #4]
 800d22e:	460b      	mov	r3, r1
 800d230:	817b      	strh	r3, [r7, #10]
 800d232:	4613      	mov	r3, r2
 800d234:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d236:	897a      	ldrh	r2, [r7, #10]
 800d238:	893b      	ldrh	r3, [r7, #8]
 800d23a:	4413      	add	r3, r2
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	3314      	adds	r3, #20
 800d240:	b29b      	uxth	r3, r3
 800d242:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d246:	4619      	mov	r1, r3
 800d248:	2022      	movs	r0, #34	; 0x22
 800d24a:	f7f9 fcb1 	bl	8006bb0 <pbuf_alloc>
 800d24e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d04d      	beq.n	800d2f2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d256:	897b      	ldrh	r3, [r7, #10]
 800d258:	3313      	adds	r3, #19
 800d25a:	697a      	ldr	r2, [r7, #20]
 800d25c:	8952      	ldrh	r2, [r2, #10]
 800d25e:	4293      	cmp	r3, r2
 800d260:	db06      	blt.n	800d270 <tcp_output_alloc_header_common+0x4c>
 800d262:	4b26      	ldr	r3, [pc, #152]	; (800d2fc <tcp_output_alloc_header_common+0xd8>)
 800d264:	f240 7223 	movw	r2, #1827	; 0x723
 800d268:	4925      	ldr	r1, [pc, #148]	; (800d300 <tcp_output_alloc_header_common+0xdc>)
 800d26a:	4826      	ldr	r0, [pc, #152]	; (800d304 <tcp_output_alloc_header_common+0xe0>)
 800d26c:	f003 f93e 	bl	80104ec <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d276:	8c3b      	ldrh	r3, [r7, #32]
 800d278:	4618      	mov	r0, r3
 800d27a:	f7f8 fca1 	bl	8005bc0 <lwip_htons>
 800d27e:	4603      	mov	r3, r0
 800d280:	461a      	mov	r2, r3
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d286:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d288:	4618      	mov	r0, r3
 800d28a:	f7f8 fc99 	bl	8005bc0 <lwip_htons>
 800d28e:	4603      	mov	r3, r0
 800d290:	461a      	mov	r2, r3
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	687a      	ldr	r2, [r7, #4]
 800d29a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d29c:	68f8      	ldr	r0, [r7, #12]
 800d29e:	f7f8 fca4 	bl	8005bea <lwip_htonl>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d2a8:	897b      	ldrh	r3, [r7, #10]
 800d2aa:	089b      	lsrs	r3, r3, #2
 800d2ac:	b29b      	uxth	r3, r3
 800d2ae:	3305      	adds	r3, #5
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	031b      	lsls	r3, r3, #12
 800d2b4:	b29a      	uxth	r2, r3
 800d2b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	b29b      	uxth	r3, r3
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7f8 fc7d 	bl	8005bc0 <lwip_htons>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d2ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7f8 fc75 	bl	8005bc0 <lwip_htons>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	461a      	mov	r2, r3
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	741a      	strb	r2, [r3, #16]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	749a      	strb	r2, [r3, #18]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d2f2:	697b      	ldr	r3, [r7, #20]
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3718      	adds	r7, #24
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}
 800d2fc:	08013a3c 	.word	0x08013a3c
 800d300:	08014114 	.word	0x08014114
 800d304:	08013a90 	.word	0x08013a90

0800d308 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d308:	b5b0      	push	{r4, r5, r7, lr}
 800d30a:	b08a      	sub	sp, #40	; 0x28
 800d30c:	af04      	add	r7, sp, #16
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	607b      	str	r3, [r7, #4]
 800d312:	460b      	mov	r3, r1
 800d314:	817b      	strh	r3, [r7, #10]
 800d316:	4613      	mov	r3, r2
 800d318:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d106      	bne.n	800d32e <tcp_output_alloc_header+0x26>
 800d320:	4b15      	ldr	r3, [pc, #84]	; (800d378 <tcp_output_alloc_header+0x70>)
 800d322:	f240 7242 	movw	r2, #1858	; 0x742
 800d326:	4915      	ldr	r1, [pc, #84]	; (800d37c <tcp_output_alloc_header+0x74>)
 800d328:	4815      	ldr	r0, [pc, #84]	; (800d380 <tcp_output_alloc_header+0x78>)
 800d32a:	f003 f8df 	bl	80104ec <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	8adb      	ldrh	r3, [r3, #22]
 800d336:	68fa      	ldr	r2, [r7, #12]
 800d338:	8b12      	ldrh	r2, [r2, #24]
 800d33a:	68f9      	ldr	r1, [r7, #12]
 800d33c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800d33e:	893d      	ldrh	r5, [r7, #8]
 800d340:	897c      	ldrh	r4, [r7, #10]
 800d342:	9103      	str	r1, [sp, #12]
 800d344:	2110      	movs	r1, #16
 800d346:	9102      	str	r1, [sp, #8]
 800d348:	9201      	str	r2, [sp, #4]
 800d34a:	9300      	str	r3, [sp, #0]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	462a      	mov	r2, r5
 800d350:	4621      	mov	r1, r4
 800d352:	f7ff ff67 	bl	800d224 <tcp_output_alloc_header_common>
 800d356:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d006      	beq.n	800d36c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d362:	68fa      	ldr	r2, [r7, #12]
 800d364:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d366:	441a      	add	r2, r3
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d36c:	697b      	ldr	r3, [r7, #20]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3718      	adds	r7, #24
 800d372:	46bd      	mov	sp, r7
 800d374:	bdb0      	pop	{r4, r5, r7, pc}
 800d376:	bf00      	nop
 800d378:	08013a3c 	.word	0x08013a3c
 800d37c:	08014144 	.word	0x08014144
 800d380:	08013a90 	.word	0x08013a90

0800d384 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b088      	sub	sp, #32
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	4611      	mov	r1, r2
 800d390:	461a      	mov	r2, r3
 800d392:	460b      	mov	r3, r1
 800d394:	71fb      	strb	r3, [r7, #7]
 800d396:	4613      	mov	r3, r2
 800d398:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d39a:	2300      	movs	r3, #0
 800d39c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d106      	bne.n	800d3b2 <tcp_output_fill_options+0x2e>
 800d3a4:	4b13      	ldr	r3, [pc, #76]	; (800d3f4 <tcp_output_fill_options+0x70>)
 800d3a6:	f240 7256 	movw	r2, #1878	; 0x756
 800d3aa:	4913      	ldr	r1, [pc, #76]	; (800d3f8 <tcp_output_fill_options+0x74>)
 800d3ac:	4813      	ldr	r0, [pc, #76]	; (800d3fc <tcp_output_fill_options+0x78>)
 800d3ae:	f003 f89d 	bl	80104ec <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	685b      	ldr	r3, [r3, #4]
 800d3b6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	3314      	adds	r3, #20
 800d3bc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d3be:	69bb      	ldr	r3, [r7, #24]
 800d3c0:	f103 0214 	add.w	r2, r3, #20
 800d3c4:	8bfb      	ldrh	r3, [r7, #30]
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	79fb      	ldrb	r3, [r7, #7]
 800d3cc:	009b      	lsls	r3, r3, #2
 800d3ce:	f003 0304 	and.w	r3, r3, #4
 800d3d2:	440b      	add	r3, r1
 800d3d4:	4413      	add	r3, r2
 800d3d6:	697a      	ldr	r2, [r7, #20]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d006      	beq.n	800d3ea <tcp_output_fill_options+0x66>
 800d3dc:	4b05      	ldr	r3, [pc, #20]	; (800d3f4 <tcp_output_fill_options+0x70>)
 800d3de:	f240 7275 	movw	r2, #1909	; 0x775
 800d3e2:	4907      	ldr	r1, [pc, #28]	; (800d400 <tcp_output_fill_options+0x7c>)
 800d3e4:	4805      	ldr	r0, [pc, #20]	; (800d3fc <tcp_output_fill_options+0x78>)
 800d3e6:	f003 f881 	bl	80104ec <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d3ea:	bf00      	nop
 800d3ec:	3720      	adds	r7, #32
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	08013a3c 	.word	0x08013a3c
 800d3f8:	0801416c 	.word	0x0801416c
 800d3fc:	08013a90 	.word	0x08013a90
 800d400:	08014064 	.word	0x08014064

0800d404 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b08a      	sub	sp, #40	; 0x28
 800d408:	af04      	add	r7, sp, #16
 800d40a:	60f8      	str	r0, [r7, #12]
 800d40c:	60b9      	str	r1, [r7, #8]
 800d40e:	607a      	str	r2, [r7, #4]
 800d410:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d106      	bne.n	800d426 <tcp_output_control_segment+0x22>
 800d418:	4b1c      	ldr	r3, [pc, #112]	; (800d48c <tcp_output_control_segment+0x88>)
 800d41a:	f240 7287 	movw	r2, #1927	; 0x787
 800d41e:	491c      	ldr	r1, [pc, #112]	; (800d490 <tcp_output_control_segment+0x8c>)
 800d420:	481c      	ldr	r0, [pc, #112]	; (800d494 <tcp_output_control_segment+0x90>)
 800d422:	f003 f863 	bl	80104ec <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d426:	683a      	ldr	r2, [r7, #0]
 800d428:	6879      	ldr	r1, [r7, #4]
 800d42a:	68f8      	ldr	r0, [r7, #12]
 800d42c:	f7fe fae8 	bl	800ba00 <tcp_route>
 800d430:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d102      	bne.n	800d43e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d438:	23fc      	movs	r3, #252	; 0xfc
 800d43a:	75fb      	strb	r3, [r7, #23]
 800d43c:	e01c      	b.n	800d478 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d006      	beq.n	800d452 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	7adb      	ldrb	r3, [r3, #11]
 800d448:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	7a9b      	ldrb	r3, [r3, #10]
 800d44e:	757b      	strb	r3, [r7, #21]
 800d450:	e003      	b.n	800d45a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d452:	23ff      	movs	r3, #255	; 0xff
 800d454:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d456:	2300      	movs	r3, #0
 800d458:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d45a:	7dba      	ldrb	r2, [r7, #22]
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	9302      	str	r3, [sp, #8]
 800d460:	2306      	movs	r3, #6
 800d462:	9301      	str	r3, [sp, #4]
 800d464:	7d7b      	ldrb	r3, [r7, #21]
 800d466:	9300      	str	r3, [sp, #0]
 800d468:	4613      	mov	r3, r2
 800d46a:	683a      	ldr	r2, [r7, #0]
 800d46c:	6879      	ldr	r1, [r7, #4]
 800d46e:	68b8      	ldr	r0, [r7, #8]
 800d470:	f001 ffaa 	bl	800f3c8 <ip4_output_if>
 800d474:	4603      	mov	r3, r0
 800d476:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d478:	68b8      	ldr	r0, [r7, #8]
 800d47a:	f7f9 fe7d 	bl	8007178 <pbuf_free>
  return err;
 800d47e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d482:	4618      	mov	r0, r3
 800d484:	3718      	adds	r7, #24
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	08013a3c 	.word	0x08013a3c
 800d490:	08014194 	.word	0x08014194
 800d494:	08013a90 	.word	0x08013a90

0800d498 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d498:	b590      	push	{r4, r7, lr}
 800d49a:	b08b      	sub	sp, #44	; 0x2c
 800d49c:	af04      	add	r7, sp, #16
 800d49e:	60f8      	str	r0, [r7, #12]
 800d4a0:	60b9      	str	r1, [r7, #8]
 800d4a2:	607a      	str	r2, [r7, #4]
 800d4a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d106      	bne.n	800d4ba <tcp_rst+0x22>
 800d4ac:	4b1f      	ldr	r3, [pc, #124]	; (800d52c <tcp_rst+0x94>)
 800d4ae:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d4b2:	491f      	ldr	r1, [pc, #124]	; (800d530 <tcp_rst+0x98>)
 800d4b4:	481f      	ldr	r0, [pc, #124]	; (800d534 <tcp_rst+0x9c>)
 800d4b6:	f003 f819 	bl	80104ec <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d106      	bne.n	800d4ce <tcp_rst+0x36>
 800d4c0:	4b1a      	ldr	r3, [pc, #104]	; (800d52c <tcp_rst+0x94>)
 800d4c2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d4c6:	491c      	ldr	r1, [pc, #112]	; (800d538 <tcp_rst+0xa0>)
 800d4c8:	481a      	ldr	r0, [pc, #104]	; (800d534 <tcp_rst+0x9c>)
 800d4ca:	f003 f80f 	bl	80104ec <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d4d2:	f246 0308 	movw	r3, #24584	; 0x6008
 800d4d6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d4d8:	7dfb      	ldrb	r3, [r7, #23]
 800d4da:	b29c      	uxth	r4, r3
 800d4dc:	68b8      	ldr	r0, [r7, #8]
 800d4de:	f7f8 fb84 	bl	8005bea <lwip_htonl>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	8abb      	ldrh	r3, [r7, #20]
 800d4e6:	9303      	str	r3, [sp, #12]
 800d4e8:	2314      	movs	r3, #20
 800d4ea:	9302      	str	r3, [sp, #8]
 800d4ec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d4ee:	9301      	str	r3, [sp, #4]
 800d4f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d4f2:	9300      	str	r3, [sp, #0]
 800d4f4:	4613      	mov	r3, r2
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	4621      	mov	r1, r4
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f7ff fe92 	bl	800d224 <tcp_output_alloc_header_common>
 800d500:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d00c      	beq.n	800d522 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d508:	7dfb      	ldrb	r3, [r7, #23]
 800d50a:	2200      	movs	r2, #0
 800d50c:	6939      	ldr	r1, [r7, #16]
 800d50e:	68f8      	ldr	r0, [r7, #12]
 800d510:	f7ff ff38 	bl	800d384 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d516:	683a      	ldr	r2, [r7, #0]
 800d518:	6939      	ldr	r1, [r7, #16]
 800d51a:	68f8      	ldr	r0, [r7, #12]
 800d51c:	f7ff ff72 	bl	800d404 <tcp_output_control_segment>
 800d520:	e000      	b.n	800d524 <tcp_rst+0x8c>
    return;
 800d522:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d524:	371c      	adds	r7, #28
 800d526:	46bd      	mov	sp, r7
 800d528:	bd90      	pop	{r4, r7, pc}
 800d52a:	bf00      	nop
 800d52c:	08013a3c 	.word	0x08013a3c
 800d530:	080141c0 	.word	0x080141c0
 800d534:	08013a90 	.word	0x08013a90
 800d538:	080141dc 	.word	0x080141dc

0800d53c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d53c:	b590      	push	{r4, r7, lr}
 800d53e:	b087      	sub	sp, #28
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d544:	2300      	movs	r3, #0
 800d546:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d548:	2300      	movs	r3, #0
 800d54a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d106      	bne.n	800d560 <tcp_send_empty_ack+0x24>
 800d552:	4b28      	ldr	r3, [pc, #160]	; (800d5f4 <tcp_send_empty_ack+0xb8>)
 800d554:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d558:	4927      	ldr	r1, [pc, #156]	; (800d5f8 <tcp_send_empty_ack+0xbc>)
 800d55a:	4828      	ldr	r0, [pc, #160]	; (800d5fc <tcp_send_empty_ack+0xc0>)
 800d55c:	f002 ffc6 	bl	80104ec <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d560:	7dfb      	ldrb	r3, [r7, #23]
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	b2db      	uxtb	r3, r3
 800d566:	f003 0304 	and.w	r3, r3, #4
 800d56a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d56c:	7d7b      	ldrb	r3, [r7, #21]
 800d56e:	b29c      	uxth	r4, r3
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d574:	4618      	mov	r0, r3
 800d576:	f7f8 fb38 	bl	8005bea <lwip_htonl>
 800d57a:	4603      	mov	r3, r0
 800d57c:	2200      	movs	r2, #0
 800d57e:	4621      	mov	r1, r4
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f7ff fec1 	bl	800d308 <tcp_output_alloc_header>
 800d586:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d109      	bne.n	800d5a2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	8b5b      	ldrh	r3, [r3, #26]
 800d592:	f043 0303 	orr.w	r3, r3, #3
 800d596:	b29a      	uxth	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d59c:	f06f 0301 	mvn.w	r3, #1
 800d5a0:	e023      	b.n	800d5ea <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d5a2:	7dbb      	ldrb	r3, [r7, #22]
 800d5a4:	7dfa      	ldrb	r2, [r7, #23]
 800d5a6:	6939      	ldr	r1, [r7, #16]
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f7ff feeb 	bl	800d384 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d5ae:	687a      	ldr	r2, [r7, #4]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	3304      	adds	r3, #4
 800d5b4:	6939      	ldr	r1, [r7, #16]
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f7ff ff24 	bl	800d404 <tcp_output_control_segment>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d5c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d007      	beq.n	800d5d8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	8b5b      	ldrh	r3, [r3, #26]
 800d5cc:	f043 0303 	orr.w	r3, r3, #3
 800d5d0:	b29a      	uxth	r2, r3
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	835a      	strh	r2, [r3, #26]
 800d5d6:	e006      	b.n	800d5e6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	8b5b      	ldrh	r3, [r3, #26]
 800d5dc:	f023 0303 	bic.w	r3, r3, #3
 800d5e0:	b29a      	uxth	r2, r3
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d5e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	371c      	adds	r7, #28
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd90      	pop	{r4, r7, pc}
 800d5f2:	bf00      	nop
 800d5f4:	08013a3c 	.word	0x08013a3c
 800d5f8:	080141f8 	.word	0x080141f8
 800d5fc:	08013a90 	.word	0x08013a90

0800d600 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d600:	b590      	push	{r4, r7, lr}
 800d602:	b087      	sub	sp, #28
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d608:	2300      	movs	r3, #0
 800d60a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d106      	bne.n	800d620 <tcp_keepalive+0x20>
 800d612:	4b18      	ldr	r3, [pc, #96]	; (800d674 <tcp_keepalive+0x74>)
 800d614:	f640 0224 	movw	r2, #2084	; 0x824
 800d618:	4917      	ldr	r1, [pc, #92]	; (800d678 <tcp_keepalive+0x78>)
 800d61a:	4818      	ldr	r0, [pc, #96]	; (800d67c <tcp_keepalive+0x7c>)
 800d61c:	f002 ff66 	bl	80104ec <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d620:	7dfb      	ldrb	r3, [r7, #23]
 800d622:	b29c      	uxth	r4, r3
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d628:	3b01      	subs	r3, #1
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7f8 fadd 	bl	8005bea <lwip_htonl>
 800d630:	4603      	mov	r3, r0
 800d632:	2200      	movs	r2, #0
 800d634:	4621      	mov	r1, r4
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f7ff fe66 	bl	800d308 <tcp_output_alloc_header>
 800d63c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d102      	bne.n	800d64a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d644:	f04f 33ff 	mov.w	r3, #4294967295
 800d648:	e010      	b.n	800d66c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d64a:	7dfb      	ldrb	r3, [r7, #23]
 800d64c:	2200      	movs	r2, #0
 800d64e:	6939      	ldr	r1, [r7, #16]
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f7ff fe97 	bl	800d384 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	3304      	adds	r3, #4
 800d65c:	6939      	ldr	r1, [r7, #16]
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f7ff fed0 	bl	800d404 <tcp_output_control_segment>
 800d664:	4603      	mov	r3, r0
 800d666:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d668:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	371c      	adds	r7, #28
 800d670:	46bd      	mov	sp, r7
 800d672:	bd90      	pop	{r4, r7, pc}
 800d674:	08013a3c 	.word	0x08013a3c
 800d678:	08014218 	.word	0x08014218
 800d67c:	08013a90 	.word	0x08013a90

0800d680 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d680:	b590      	push	{r4, r7, lr}
 800d682:	b08b      	sub	sp, #44	; 0x2c
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d688:	2300      	movs	r3, #0
 800d68a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d106      	bne.n	800d6a2 <tcp_zero_window_probe+0x22>
 800d694:	4b4c      	ldr	r3, [pc, #304]	; (800d7c8 <tcp_zero_window_probe+0x148>)
 800d696:	f640 024f 	movw	r2, #2127	; 0x84f
 800d69a:	494c      	ldr	r1, [pc, #304]	; (800d7cc <tcp_zero_window_probe+0x14c>)
 800d69c:	484c      	ldr	r0, [pc, #304]	; (800d7d0 <tcp_zero_window_probe+0x150>)
 800d69e:	f002 ff25 	bl	80104ec <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6a6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d6a8:	6a3b      	ldr	r3, [r7, #32]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d101      	bne.n	800d6b2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	e086      	b.n	800d7c0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d6b8:	2bff      	cmp	r3, #255	; 0xff
 800d6ba:	d007      	beq.n	800d6cc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	b2da      	uxtb	r2, r3
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d6cc:	6a3b      	ldr	r3, [r7, #32]
 800d6ce:	68db      	ldr	r3, [r3, #12]
 800d6d0:	899b      	ldrh	r3, [r3, #12]
 800d6d2:	b29b      	uxth	r3, r3
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7f8 fa73 	bl	8005bc0 <lwip_htons>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	f003 0301 	and.w	r3, r3, #1
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d005      	beq.n	800d6f2 <tcp_zero_window_probe+0x72>
 800d6e6:	6a3b      	ldr	r3, [r7, #32]
 800d6e8:	891b      	ldrh	r3, [r3, #8]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d101      	bne.n	800d6f2 <tcp_zero_window_probe+0x72>
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	e000      	b.n	800d6f4 <tcp_zero_window_probe+0x74>
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d6f6:	7ffb      	ldrb	r3, [r7, #31]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	bf0c      	ite	eq
 800d6fc:	2301      	moveq	r3, #1
 800d6fe:	2300      	movne	r3, #0
 800d700:	b2db      	uxtb	r3, r3
 800d702:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d708:	b299      	uxth	r1, r3
 800d70a:	6a3b      	ldr	r3, [r7, #32]
 800d70c:	68db      	ldr	r3, [r3, #12]
 800d70e:	685b      	ldr	r3, [r3, #4]
 800d710:	8bba      	ldrh	r2, [r7, #28]
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f7ff fdf8 	bl	800d308 <tcp_output_alloc_header>
 800d718:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d71a:	69bb      	ldr	r3, [r7, #24]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d102      	bne.n	800d726 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d720:	f04f 33ff 	mov.w	r3, #4294967295
 800d724:	e04c      	b.n	800d7c0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d72c:	7ffb      	ldrb	r3, [r7, #31]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d011      	beq.n	800d756 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	899b      	ldrh	r3, [r3, #12]
 800d736:	b29b      	uxth	r3, r3
 800d738:	b21b      	sxth	r3, r3
 800d73a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d73e:	b21c      	sxth	r4, r3
 800d740:	2011      	movs	r0, #17
 800d742:	f7f8 fa3d 	bl	8005bc0 <lwip_htons>
 800d746:	4603      	mov	r3, r0
 800d748:	b21b      	sxth	r3, r3
 800d74a:	4323      	orrs	r3, r4
 800d74c:	b21b      	sxth	r3, r3
 800d74e:	b29a      	uxth	r2, r3
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	819a      	strh	r2, [r3, #12]
 800d754:	e010      	b.n	800d778 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	3314      	adds	r3, #20
 800d75c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d75e:	6a3b      	ldr	r3, [r7, #32]
 800d760:	6858      	ldr	r0, [r3, #4]
 800d762:	6a3b      	ldr	r3, [r7, #32]
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	891a      	ldrh	r2, [r3, #8]
 800d768:	6a3b      	ldr	r3, [r7, #32]
 800d76a:	891b      	ldrh	r3, [r3, #8]
 800d76c:	1ad3      	subs	r3, r2, r3
 800d76e:	b29b      	uxth	r3, r3
 800d770:	2201      	movs	r2, #1
 800d772:	6939      	ldr	r1, [r7, #16]
 800d774:	f7f9 feea 	bl	800754c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d778:	6a3b      	ldr	r3, [r7, #32]
 800d77a:	68db      	ldr	r3, [r3, #12]
 800d77c:	685b      	ldr	r3, [r3, #4]
 800d77e:	4618      	mov	r0, r3
 800d780:	f7f8 fa33 	bl	8005bea <lwip_htonl>
 800d784:	4603      	mov	r3, r0
 800d786:	3301      	adds	r3, #1
 800d788:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	1ad3      	subs	r3, r2, r3
 800d792:	2b00      	cmp	r3, #0
 800d794:	da02      	bge.n	800d79c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	68fa      	ldr	r2, [r7, #12]
 800d79a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d79c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	69b9      	ldr	r1, [r7, #24]
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f7ff fded 	bl	800d384 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	3304      	adds	r3, #4
 800d7b0:	69b9      	ldr	r1, [r7, #24]
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f7ff fe26 	bl	800d404 <tcp_output_control_segment>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d7bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	372c      	adds	r7, #44	; 0x2c
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd90      	pop	{r4, r7, pc}
 800d7c8:	08013a3c 	.word	0x08013a3c
 800d7cc:	08014234 	.word	0x08014234
 800d7d0:	08013a90 	.word	0x08013a90

0800d7d4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d7dc:	f7fa f808 	bl	80077f0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d7e0:	4b0a      	ldr	r3, [pc, #40]	; (800d80c <tcpip_tcp_timer+0x38>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d103      	bne.n	800d7f0 <tcpip_tcp_timer+0x1c>
 800d7e8:	4b09      	ldr	r3, [pc, #36]	; (800d810 <tcpip_tcp_timer+0x3c>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d005      	beq.n	800d7fc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	4908      	ldr	r1, [pc, #32]	; (800d814 <tcpip_tcp_timer+0x40>)
 800d7f4:	20fa      	movs	r0, #250	; 0xfa
 800d7f6:	f000 f8f3 	bl	800d9e0 <sys_timeout>
 800d7fa:	e003      	b.n	800d804 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d7fc:	4b06      	ldr	r3, [pc, #24]	; (800d818 <tcpip_tcp_timer+0x44>)
 800d7fe:	2200      	movs	r2, #0
 800d800:	601a      	str	r2, [r3, #0]
  }
}
 800d802:	bf00      	nop
 800d804:	bf00      	nop
 800d806:	3708      	adds	r7, #8
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}
 800d80c:	2000680c 	.word	0x2000680c
 800d810:	20006810 	.word	0x20006810
 800d814:	0800d7d5 	.word	0x0800d7d5
 800d818:	20006858 	.word	0x20006858

0800d81c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d820:	4b0a      	ldr	r3, [pc, #40]	; (800d84c <tcp_timer_needed+0x30>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d10f      	bne.n	800d848 <tcp_timer_needed+0x2c>
 800d828:	4b09      	ldr	r3, [pc, #36]	; (800d850 <tcp_timer_needed+0x34>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d103      	bne.n	800d838 <tcp_timer_needed+0x1c>
 800d830:	4b08      	ldr	r3, [pc, #32]	; (800d854 <tcp_timer_needed+0x38>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d007      	beq.n	800d848 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d838:	4b04      	ldr	r3, [pc, #16]	; (800d84c <tcp_timer_needed+0x30>)
 800d83a:	2201      	movs	r2, #1
 800d83c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d83e:	2200      	movs	r2, #0
 800d840:	4905      	ldr	r1, [pc, #20]	; (800d858 <tcp_timer_needed+0x3c>)
 800d842:	20fa      	movs	r0, #250	; 0xfa
 800d844:	f000 f8cc 	bl	800d9e0 <sys_timeout>
  }
}
 800d848:	bf00      	nop
 800d84a:	bd80      	pop	{r7, pc}
 800d84c:	20006858 	.word	0x20006858
 800d850:	2000680c 	.word	0x2000680c
 800d854:	20006810 	.word	0x20006810
 800d858:	0800d7d5 	.word	0x0800d7d5

0800d85c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b086      	sub	sp, #24
 800d860:	af00      	add	r7, sp, #0
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	60b9      	str	r1, [r7, #8]
 800d866:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d868:	2006      	movs	r0, #6
 800d86a:	f7f8 fe27 	bl	80064bc <memp_malloc>
 800d86e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d109      	bne.n	800d88a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d151      	bne.n	800d920 <sys_timeout_abs+0xc4>
 800d87c:	4b2a      	ldr	r3, [pc, #168]	; (800d928 <sys_timeout_abs+0xcc>)
 800d87e:	22be      	movs	r2, #190	; 0xbe
 800d880:	492a      	ldr	r1, [pc, #168]	; (800d92c <sys_timeout_abs+0xd0>)
 800d882:	482b      	ldr	r0, [pc, #172]	; (800d930 <sys_timeout_abs+0xd4>)
 800d884:	f002 fe32 	bl	80104ec <iprintf>
    return;
 800d888:	e04a      	b.n	800d920 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	2200      	movs	r2, #0
 800d88e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	68ba      	ldr	r2, [r7, #8]
 800d894:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	687a      	ldr	r2, [r7, #4]
 800d89a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	68fa      	ldr	r2, [r7, #12]
 800d8a0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d8a2:	4b24      	ldr	r3, [pc, #144]	; (800d934 <sys_timeout_abs+0xd8>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d103      	bne.n	800d8b2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d8aa:	4a22      	ldr	r2, [pc, #136]	; (800d934 <sys_timeout_abs+0xd8>)
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	6013      	str	r3, [r2, #0]
    return;
 800d8b0:	e037      	b.n	800d922 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	685a      	ldr	r2, [r3, #4]
 800d8b6:	4b1f      	ldr	r3, [pc, #124]	; (800d934 <sys_timeout_abs+0xd8>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	1ad3      	subs	r3, r2, r3
 800d8be:	0fdb      	lsrs	r3, r3, #31
 800d8c0:	f003 0301 	and.w	r3, r3, #1
 800d8c4:	b2db      	uxtb	r3, r3
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d007      	beq.n	800d8da <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d8ca:	4b1a      	ldr	r3, [pc, #104]	; (800d934 <sys_timeout_abs+0xd8>)
 800d8cc:	681a      	ldr	r2, [r3, #0]
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d8d2:	4a18      	ldr	r2, [pc, #96]	; (800d934 <sys_timeout_abs+0xd8>)
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	6013      	str	r3, [r2, #0]
 800d8d8:	e023      	b.n	800d922 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d8da:	4b16      	ldr	r3, [pc, #88]	; (800d934 <sys_timeout_abs+0xd8>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	617b      	str	r3, [r7, #20]
 800d8e0:	e01a      	b.n	800d918 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d00b      	beq.n	800d902 <sys_timeout_abs+0xa6>
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	685a      	ldr	r2, [r3, #4]
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	685b      	ldr	r3, [r3, #4]
 800d8f4:	1ad3      	subs	r3, r2, r3
 800d8f6:	0fdb      	lsrs	r3, r3, #31
 800d8f8:	f003 0301 	and.w	r3, r3, #1
 800d8fc:	b2db      	uxtb	r3, r3
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d007      	beq.n	800d912 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	693a      	ldr	r2, [r7, #16]
 800d90e:	601a      	str	r2, [r3, #0]
        break;
 800d910:	e007      	b.n	800d922 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	617b      	str	r3, [r7, #20]
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d1e1      	bne.n	800d8e2 <sys_timeout_abs+0x86>
 800d91e:	e000      	b.n	800d922 <sys_timeout_abs+0xc6>
    return;
 800d920:	bf00      	nop
      }
    }
  }
}
 800d922:	3718      	adds	r7, #24
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}
 800d928:	08014258 	.word	0x08014258
 800d92c:	0801428c 	.word	0x0801428c
 800d930:	080142cc 	.word	0x080142cc
 800d934:	20006850 	.word	0x20006850

0800d938 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b086      	sub	sp, #24
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	685b      	ldr	r3, [r3, #4]
 800d948:	4798      	blx	r3

  now = sys_now();
 800d94a:	f7f6 fb91 	bl	8004070 <sys_now>
 800d94e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	4b0f      	ldr	r3, [pc, #60]	; (800d994 <lwip_cyclic_timer+0x5c>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	4413      	add	r3, r2
 800d95a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d95c:	68fa      	ldr	r2, [r7, #12]
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	1ad3      	subs	r3, r2, r3
 800d962:	0fdb      	lsrs	r3, r3, #31
 800d964:	f003 0301 	and.w	r3, r3, #1
 800d968:	b2db      	uxtb	r3, r3
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d009      	beq.n	800d982 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	4413      	add	r3, r2
 800d976:	687a      	ldr	r2, [r7, #4]
 800d978:	4907      	ldr	r1, [pc, #28]	; (800d998 <lwip_cyclic_timer+0x60>)
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7ff ff6e 	bl	800d85c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d980:	e004      	b.n	800d98c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d982:	687a      	ldr	r2, [r7, #4]
 800d984:	4904      	ldr	r1, [pc, #16]	; (800d998 <lwip_cyclic_timer+0x60>)
 800d986:	68f8      	ldr	r0, [r7, #12]
 800d988:	f7ff ff68 	bl	800d85c <sys_timeout_abs>
}
 800d98c:	bf00      	nop
 800d98e:	3718      	adds	r7, #24
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}
 800d994:	20006854 	.word	0x20006854
 800d998:	0800d939 	.word	0x0800d939

0800d99c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	607b      	str	r3, [r7, #4]
 800d9a6:	e00e      	b.n	800d9c6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d9a8:	4a0b      	ldr	r2, [pc, #44]	; (800d9d8 <sys_timeouts_init+0x3c>)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	00db      	lsls	r3, r3, #3
 800d9b4:	4a08      	ldr	r2, [pc, #32]	; (800d9d8 <sys_timeouts_init+0x3c>)
 800d9b6:	4413      	add	r3, r2
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	4908      	ldr	r1, [pc, #32]	; (800d9dc <sys_timeouts_init+0x40>)
 800d9bc:	f000 f810 	bl	800d9e0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	607b      	str	r3, [r7, #4]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2b02      	cmp	r3, #2
 800d9ca:	d9ed      	bls.n	800d9a8 <sys_timeouts_init+0xc>
  }
}
 800d9cc:	bf00      	nop
 800d9ce:	bf00      	nop
 800d9d0:	3708      	adds	r7, #8
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	08014e30 	.word	0x08014e30
 800d9dc:	0800d939 	.word	0x0800d939

0800d9e0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b086      	sub	sp, #24
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	60f8      	str	r0, [r7, #12]
 800d9e8:	60b9      	str	r1, [r7, #8]
 800d9ea:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d9f2:	d306      	bcc.n	800da02 <sys_timeout+0x22>
 800d9f4:	4b0a      	ldr	r3, [pc, #40]	; (800da20 <sys_timeout+0x40>)
 800d9f6:	f240 1229 	movw	r2, #297	; 0x129
 800d9fa:	490a      	ldr	r1, [pc, #40]	; (800da24 <sys_timeout+0x44>)
 800d9fc:	480a      	ldr	r0, [pc, #40]	; (800da28 <sys_timeout+0x48>)
 800d9fe:	f002 fd75 	bl	80104ec <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800da02:	f7f6 fb35 	bl	8004070 <sys_now>
 800da06:	4602      	mov	r2, r0
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	4413      	add	r3, r2
 800da0c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	68b9      	ldr	r1, [r7, #8]
 800da12:	6978      	ldr	r0, [r7, #20]
 800da14:	f7ff ff22 	bl	800d85c <sys_timeout_abs>
#endif
}
 800da18:	bf00      	nop
 800da1a:	3718      	adds	r7, #24
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	08014258 	.word	0x08014258
 800da24:	080142f4 	.word	0x080142f4
 800da28:	080142cc 	.word	0x080142cc

0800da2c <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800da36:	4b19      	ldr	r3, [pc, #100]	; (800da9c <sys_untimeout+0x70>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d029      	beq.n	800da92 <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800da3e:	4b17      	ldr	r3, [pc, #92]	; (800da9c <sys_untimeout+0x70>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	60bb      	str	r3, [r7, #8]
 800da44:	2300      	movs	r3, #0
 800da46:	60fb      	str	r3, [r7, #12]
 800da48:	e01f      	b.n	800da8a <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	689b      	ldr	r3, [r3, #8]
 800da4e:	687a      	ldr	r2, [r7, #4]
 800da50:	429a      	cmp	r2, r3
 800da52:	d115      	bne.n	800da80 <sys_untimeout+0x54>
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	683a      	ldr	r2, [r7, #0]
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d110      	bne.n	800da80 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d104      	bne.n	800da6e <sys_untimeout+0x42>
        next_timeout = t->next;
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4a0c      	ldr	r2, [pc, #48]	; (800da9c <sys_untimeout+0x70>)
 800da6a:	6013      	str	r3, [r2, #0]
 800da6c:	e003      	b.n	800da76 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	681a      	ldr	r2, [r3, #0]
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 800da76:	68b9      	ldr	r1, [r7, #8]
 800da78:	2006      	movs	r0, #6
 800da7a:	f7f8 fd6b 	bl	8006554 <memp_free>
      return;
 800da7e:	e009      	b.n	800da94 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	60fb      	str	r3, [r7, #12]
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	60bb      	str	r3, [r7, #8]
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d1dc      	bne.n	800da4a <sys_untimeout+0x1e>
    }
  }
  return;
 800da90:	e000      	b.n	800da94 <sys_untimeout+0x68>
    return;
 800da92:	bf00      	nop
}
 800da94:	3710      	adds	r7, #16
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	20006850 	.word	0x20006850

0800daa0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800daa6:	f7f6 fae3 	bl	8004070 <sys_now>
 800daaa:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800daac:	4b1a      	ldr	r3, [pc, #104]	; (800db18 <sys_check_timeouts+0x78>)
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d001      	beq.n	800daba <sys_check_timeouts+0x1a>
 800dab6:	f7f9 f825 	bl	8006b04 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800daba:	4b18      	ldr	r3, [pc, #96]	; (800db1c <sys_check_timeouts+0x7c>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d022      	beq.n	800db0c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	68fa      	ldr	r2, [r7, #12]
 800dacc:	1ad3      	subs	r3, r2, r3
 800dace:	0fdb      	lsrs	r3, r3, #31
 800dad0:	f003 0301 	and.w	r3, r3, #1
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d11a      	bne.n	800db10 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4a0f      	ldr	r2, [pc, #60]	; (800db1c <sys_check_timeouts+0x7c>)
 800dae0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	689b      	ldr	r3, [r3, #8]
 800dae6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	68db      	ldr	r3, [r3, #12]
 800daec:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	4a0b      	ldr	r2, [pc, #44]	; (800db20 <sys_check_timeouts+0x80>)
 800daf4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800daf6:	68b9      	ldr	r1, [r7, #8]
 800daf8:	2006      	movs	r0, #6
 800dafa:	f7f8 fd2b 	bl	8006554 <memp_free>
    if (handler != NULL) {
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d0d3      	beq.n	800daac <sys_check_timeouts+0xc>
      handler(arg);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6838      	ldr	r0, [r7, #0]
 800db08:	4798      	blx	r3
  do {
 800db0a:	e7cf      	b.n	800daac <sys_check_timeouts+0xc>
      return;
 800db0c:	bf00      	nop
 800db0e:	e000      	b.n	800db12 <sys_check_timeouts+0x72>
      return;
 800db10:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800db12:	3710      	adds	r7, #16
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	200067fd 	.word	0x200067fd
 800db1c:	20006850 	.word	0x20006850
 800db20:	20006854 	.word	0x20006854

0800db24 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800db28:	f002 fd6e 	bl	8010608 <rand>
 800db2c:	4603      	mov	r3, r0
 800db2e:	b29b      	uxth	r3, r3
 800db30:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800db34:	b29b      	uxth	r3, r3
 800db36:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800db3a:	b29a      	uxth	r2, r3
 800db3c:	4b01      	ldr	r3, [pc, #4]	; (800db44 <udp_init+0x20>)
 800db3e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800db40:	bf00      	nop
 800db42:	bd80      	pop	{r7, pc}
 800db44:	20000010 	.word	0x20000010

0800db48 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b084      	sub	sp, #16
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	60f8      	str	r0, [r7, #12]
 800db50:	60b9      	str	r1, [r7, #8]
 800db52:	4613      	mov	r3, r2
 800db54:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d105      	bne.n	800db68 <udp_input_local_match+0x20>
 800db5c:	4b27      	ldr	r3, [pc, #156]	; (800dbfc <udp_input_local_match+0xb4>)
 800db5e:	2287      	movs	r2, #135	; 0x87
 800db60:	4927      	ldr	r1, [pc, #156]	; (800dc00 <udp_input_local_match+0xb8>)
 800db62:	4828      	ldr	r0, [pc, #160]	; (800dc04 <udp_input_local_match+0xbc>)
 800db64:	f002 fcc2 	bl	80104ec <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d105      	bne.n	800db7a <udp_input_local_match+0x32>
 800db6e:	4b23      	ldr	r3, [pc, #140]	; (800dbfc <udp_input_local_match+0xb4>)
 800db70:	2288      	movs	r2, #136	; 0x88
 800db72:	4925      	ldr	r1, [pc, #148]	; (800dc08 <udp_input_local_match+0xc0>)
 800db74:	4823      	ldr	r0, [pc, #140]	; (800dc04 <udp_input_local_match+0xbc>)
 800db76:	f002 fcb9 	bl	80104ec <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	7a1b      	ldrb	r3, [r3, #8]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d00b      	beq.n	800db9a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	7a1a      	ldrb	r2, [r3, #8]
 800db86:	4b21      	ldr	r3, [pc, #132]	; (800dc0c <udp_input_local_match+0xc4>)
 800db88:	685b      	ldr	r3, [r3, #4]
 800db8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db8e:	3301      	adds	r3, #1
 800db90:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db92:	429a      	cmp	r2, r3
 800db94:	d001      	beq.n	800db9a <udp_input_local_match+0x52>
    return 0;
 800db96:	2300      	movs	r3, #0
 800db98:	e02b      	b.n	800dbf2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800db9a:	79fb      	ldrb	r3, [r7, #7]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d018      	beq.n	800dbd2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d013      	beq.n	800dbce <udp_input_local_match+0x86>
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00f      	beq.n	800dbce <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800dbae:	4b17      	ldr	r3, [pc, #92]	; (800dc0c <udp_input_local_match+0xc4>)
 800dbb0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dbb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbb6:	d00a      	beq.n	800dbce <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	4b13      	ldr	r3, [pc, #76]	; (800dc0c <udp_input_local_match+0xc4>)
 800dbbe:	695b      	ldr	r3, [r3, #20]
 800dbc0:	405a      	eors	r2, r3
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	3308      	adds	r3, #8
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d110      	bne.n	800dbf0 <udp_input_local_match+0xa8>
          return 1;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	e00f      	b.n	800dbf2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d009      	beq.n	800dbec <udp_input_local_match+0xa4>
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d005      	beq.n	800dbec <udp_input_local_match+0xa4>
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	4b09      	ldr	r3, [pc, #36]	; (800dc0c <udp_input_local_match+0xc4>)
 800dbe6:	695b      	ldr	r3, [r3, #20]
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d101      	bne.n	800dbf0 <udp_input_local_match+0xa8>
        return 1;
 800dbec:	2301      	movs	r3, #1
 800dbee:	e000      	b.n	800dbf2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800dbf0:	2300      	movs	r3, #0
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	08014340 	.word	0x08014340
 800dc00:	08014370 	.word	0x08014370
 800dc04:	08014394 	.word	0x08014394
 800dc08:	080143bc 	.word	0x080143bc
 800dc0c:	20003290 	.word	0x20003290

0800dc10 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800dc10:	b590      	push	{r4, r7, lr}
 800dc12:	b08d      	sub	sp, #52	; 0x34
 800dc14:	af02      	add	r7, sp, #8
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d105      	bne.n	800dc30 <udp_input+0x20>
 800dc24:	4b7c      	ldr	r3, [pc, #496]	; (800de18 <udp_input+0x208>)
 800dc26:	22cf      	movs	r2, #207	; 0xcf
 800dc28:	497c      	ldr	r1, [pc, #496]	; (800de1c <udp_input+0x20c>)
 800dc2a:	487d      	ldr	r0, [pc, #500]	; (800de20 <udp_input+0x210>)
 800dc2c:	f002 fc5e 	bl	80104ec <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d105      	bne.n	800dc42 <udp_input+0x32>
 800dc36:	4b78      	ldr	r3, [pc, #480]	; (800de18 <udp_input+0x208>)
 800dc38:	22d0      	movs	r2, #208	; 0xd0
 800dc3a:	497a      	ldr	r1, [pc, #488]	; (800de24 <udp_input+0x214>)
 800dc3c:	4878      	ldr	r0, [pc, #480]	; (800de20 <udp_input+0x210>)
 800dc3e:	f002 fc55 	bl	80104ec <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	895b      	ldrh	r3, [r3, #10]
 800dc46:	2b07      	cmp	r3, #7
 800dc48:	d803      	bhi.n	800dc52 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f7f9 fa94 	bl	8007178 <pbuf_free>
    goto end;
 800dc50:	e0de      	b.n	800de10 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800dc58:	4b73      	ldr	r3, [pc, #460]	; (800de28 <udp_input+0x218>)
 800dc5a:	695b      	ldr	r3, [r3, #20]
 800dc5c:	4a72      	ldr	r2, [pc, #456]	; (800de28 <udp_input+0x218>)
 800dc5e:	6812      	ldr	r2, [r2, #0]
 800dc60:	4611      	mov	r1, r2
 800dc62:	4618      	mov	r0, r3
 800dc64:	f001 fc88 	bl	800f578 <ip4_addr_isbroadcast_u32>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	881b      	ldrh	r3, [r3, #0]
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7f7 ffa4 	bl	8005bc0 <lwip_htons>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	885b      	ldrh	r3, [r3, #2]
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7f7 ff9c 	bl	8005bc0 <lwip_htons>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800dc90:	2300      	movs	r3, #0
 800dc92:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800dc94:	2300      	movs	r3, #0
 800dc96:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc98:	4b64      	ldr	r3, [pc, #400]	; (800de2c <udp_input+0x21c>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	627b      	str	r3, [r7, #36]	; 0x24
 800dc9e:	e054      	b.n	800dd4a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800dca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca2:	8a5b      	ldrh	r3, [r3, #18]
 800dca4:	89fa      	ldrh	r2, [r7, #14]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d14a      	bne.n	800dd40 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800dcaa:	7cfb      	ldrb	r3, [r7, #19]
 800dcac:	461a      	mov	r2, r3
 800dcae:	6839      	ldr	r1, [r7, #0]
 800dcb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcb2:	f7ff ff49 	bl	800db48 <udp_input_local_match>
 800dcb6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d041      	beq.n	800dd40 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800dcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbe:	7c1b      	ldrb	r3, [r3, #16]
 800dcc0:	f003 0304 	and.w	r3, r3, #4
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d11d      	bne.n	800dd04 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d102      	bne.n	800dcd4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800dcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd0:	61fb      	str	r3, [r7, #28]
 800dcd2:	e017      	b.n	800dd04 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800dcd4:	7cfb      	ldrb	r3, [r7, #19]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d014      	beq.n	800dd04 <udp_input+0xf4>
 800dcda:	4b53      	ldr	r3, [pc, #332]	; (800de28 <udp_input+0x218>)
 800dcdc:	695b      	ldr	r3, [r3, #20]
 800dcde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dce2:	d10f      	bne.n	800dd04 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	681a      	ldr	r2, [r3, #0]
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	3304      	adds	r3, #4
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d008      	beq.n	800dd04 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800dcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	3304      	adds	r3, #4
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d101      	bne.n	800dd04 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800dd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd02:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800dd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd06:	8a9b      	ldrh	r3, [r3, #20]
 800dd08:	8a3a      	ldrh	r2, [r7, #16]
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	d118      	bne.n	800dd40 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800dd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd10:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d005      	beq.n	800dd22 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800dd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd18:	685a      	ldr	r2, [r3, #4]
 800dd1a:	4b43      	ldr	r3, [pc, #268]	; (800de28 <udp_input+0x218>)
 800dd1c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d10e      	bne.n	800dd40 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800dd22:	6a3b      	ldr	r3, [r7, #32]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d014      	beq.n	800dd52 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800dd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2a:	68da      	ldr	r2, [r3, #12]
 800dd2c:	6a3b      	ldr	r3, [r7, #32]
 800dd2e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800dd30:	4b3e      	ldr	r3, [pc, #248]	; (800de2c <udp_input+0x21c>)
 800dd32:	681a      	ldr	r2, [r3, #0]
 800dd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd36:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800dd38:	4a3c      	ldr	r2, [pc, #240]	; (800de2c <udp_input+0x21c>)
 800dd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd3c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800dd3e:	e008      	b.n	800dd52 <udp_input+0x142>
      }
    }

    prev = pcb;
 800dd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd42:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd46:	68db      	ldr	r3, [r3, #12]
 800dd48:	627b      	str	r3, [r7, #36]	; 0x24
 800dd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d1a7      	bne.n	800dca0 <udp_input+0x90>
 800dd50:	e000      	b.n	800dd54 <udp_input+0x144>
        break;
 800dd52:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800dd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d101      	bne.n	800dd5e <udp_input+0x14e>
    pcb = uncon_pcb;
 800dd5a:	69fb      	ldr	r3, [r7, #28]
 800dd5c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800dd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d002      	beq.n	800dd6a <udp_input+0x15a>
    for_us = 1;
 800dd64:	2301      	movs	r3, #1
 800dd66:	76fb      	strb	r3, [r7, #27]
 800dd68:	e00a      	b.n	800dd80 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	3304      	adds	r3, #4
 800dd6e:	681a      	ldr	r2, [r3, #0]
 800dd70:	4b2d      	ldr	r3, [pc, #180]	; (800de28 <udp_input+0x218>)
 800dd72:	695b      	ldr	r3, [r3, #20]
 800dd74:	429a      	cmp	r2, r3
 800dd76:	bf0c      	ite	eq
 800dd78:	2301      	moveq	r3, #1
 800dd7a:	2300      	movne	r3, #0
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800dd80:	7efb      	ldrb	r3, [r7, #27]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d041      	beq.n	800de0a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800dd86:	2108      	movs	r1, #8
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f7f9 f96f 	bl	800706c <pbuf_remove_header>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d00a      	beq.n	800ddaa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800dd94:	4b20      	ldr	r3, [pc, #128]	; (800de18 <udp_input+0x208>)
 800dd96:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800dd9a:	4925      	ldr	r1, [pc, #148]	; (800de30 <udp_input+0x220>)
 800dd9c:	4820      	ldr	r0, [pc, #128]	; (800de20 <udp_input+0x210>)
 800dd9e:	f002 fba5 	bl	80104ec <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f7f9 f9e8 	bl	8007178 <pbuf_free>
      goto end;
 800dda8:	e032      	b.n	800de10 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ddaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d012      	beq.n	800ddd6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ddb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb2:	699b      	ldr	r3, [r3, #24]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d00a      	beq.n	800ddce <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ddb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddba:	699c      	ldr	r4, [r3, #24]
 800ddbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddbe:	69d8      	ldr	r0, [r3, #28]
 800ddc0:	8a3b      	ldrh	r3, [r7, #16]
 800ddc2:	9300      	str	r3, [sp, #0]
 800ddc4:	4b1b      	ldr	r3, [pc, #108]	; (800de34 <udp_input+0x224>)
 800ddc6:	687a      	ldr	r2, [r7, #4]
 800ddc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ddca:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ddcc:	e021      	b.n	800de12 <udp_input+0x202>
        pbuf_free(p);
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f7f9 f9d2 	bl	8007178 <pbuf_free>
        goto end;
 800ddd4:	e01c      	b.n	800de10 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ddd6:	7cfb      	ldrb	r3, [r7, #19]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d112      	bne.n	800de02 <udp_input+0x1f2>
 800dddc:	4b12      	ldr	r3, [pc, #72]	; (800de28 <udp_input+0x218>)
 800ddde:	695b      	ldr	r3, [r3, #20]
 800dde0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dde4:	2be0      	cmp	r3, #224	; 0xe0
 800dde6:	d00c      	beq.n	800de02 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800dde8:	4b0f      	ldr	r3, [pc, #60]	; (800de28 <udp_input+0x218>)
 800ddea:	899b      	ldrh	r3, [r3, #12]
 800ddec:	3308      	adds	r3, #8
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	b21b      	sxth	r3, r3
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f7f9 f9ac 	bl	8007152 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ddfa:	2103      	movs	r1, #3
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f001 f89b 	bl	800ef38 <icmp_dest_unreach>
      pbuf_free(p);
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f7f9 f9b8 	bl	8007178 <pbuf_free>
  return;
 800de08:	e003      	b.n	800de12 <udp_input+0x202>
    pbuf_free(p);
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f7f9 f9b4 	bl	8007178 <pbuf_free>
  return;
 800de10:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800de12:	372c      	adds	r7, #44	; 0x2c
 800de14:	46bd      	mov	sp, r7
 800de16:	bd90      	pop	{r4, r7, pc}
 800de18:	08014340 	.word	0x08014340
 800de1c:	080143e4 	.word	0x080143e4
 800de20:	08014394 	.word	0x08014394
 800de24:	080143fc 	.word	0x080143fc
 800de28:	20003290 	.word	0x20003290
 800de2c:	2000685c 	.word	0x2000685c
 800de30:	08014418 	.word	0x08014418
 800de34:	200032a0 	.word	0x200032a0

0800de38 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800de38:	b480      	push	{r7}
 800de3a:	b085      	sub	sp, #20
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d01e      	beq.n	800de86 <udp_netif_ip_addr_changed+0x4e>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d01a      	beq.n	800de86 <udp_netif_ip_addr_changed+0x4e>
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d017      	beq.n	800de86 <udp_netif_ip_addr_changed+0x4e>
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d013      	beq.n	800de86 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800de5e:	4b0d      	ldr	r3, [pc, #52]	; (800de94 <udp_netif_ip_addr_changed+0x5c>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	60fb      	str	r3, [r7, #12]
 800de64:	e00c      	b.n	800de80 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681a      	ldr	r2, [r3, #0]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	429a      	cmp	r2, r3
 800de70:	d103      	bne.n	800de7a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	681a      	ldr	r2, [r3, #0]
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	68db      	ldr	r3, [r3, #12]
 800de7e:	60fb      	str	r3, [r7, #12]
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d1ef      	bne.n	800de66 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800de86:	bf00      	nop
 800de88:	3714      	adds	r7, #20
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr
 800de92:	bf00      	nop
 800de94:	2000685c 	.word	0x2000685c

0800de98 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800dea0:	4915      	ldr	r1, [pc, #84]	; (800def8 <etharp_free_entry+0x60>)
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	4613      	mov	r3, r2
 800dea6:	005b      	lsls	r3, r3, #1
 800dea8:	4413      	add	r3, r2
 800deaa:	00db      	lsls	r3, r3, #3
 800deac:	440b      	add	r3, r1
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d013      	beq.n	800dedc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800deb4:	4910      	ldr	r1, [pc, #64]	; (800def8 <etharp_free_entry+0x60>)
 800deb6:	687a      	ldr	r2, [r7, #4]
 800deb8:	4613      	mov	r3, r2
 800deba:	005b      	lsls	r3, r3, #1
 800debc:	4413      	add	r3, r2
 800debe:	00db      	lsls	r3, r3, #3
 800dec0:	440b      	add	r3, r1
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	4618      	mov	r0, r3
 800dec6:	f7f9 f957 	bl	8007178 <pbuf_free>
    arp_table[i].q = NULL;
 800deca:	490b      	ldr	r1, [pc, #44]	; (800def8 <etharp_free_entry+0x60>)
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	4613      	mov	r3, r2
 800ded0:	005b      	lsls	r3, r3, #1
 800ded2:	4413      	add	r3, r2
 800ded4:	00db      	lsls	r3, r3, #3
 800ded6:	440b      	add	r3, r1
 800ded8:	2200      	movs	r2, #0
 800deda:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800dedc:	4906      	ldr	r1, [pc, #24]	; (800def8 <etharp_free_entry+0x60>)
 800dede:	687a      	ldr	r2, [r7, #4]
 800dee0:	4613      	mov	r3, r2
 800dee2:	005b      	lsls	r3, r3, #1
 800dee4:	4413      	add	r3, r2
 800dee6:	00db      	lsls	r3, r3, #3
 800dee8:	440b      	add	r3, r1
 800deea:	3314      	adds	r3, #20
 800deec:	2200      	movs	r2, #0
 800deee:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800def0:	bf00      	nop
 800def2:	3708      	adds	r7, #8
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}
 800def8:	20006860 	.word	0x20006860

0800defc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b082      	sub	sp, #8
 800df00:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800df02:	2300      	movs	r3, #0
 800df04:	607b      	str	r3, [r7, #4]
 800df06:	e096      	b.n	800e036 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800df08:	494f      	ldr	r1, [pc, #316]	; (800e048 <etharp_tmr+0x14c>)
 800df0a:	687a      	ldr	r2, [r7, #4]
 800df0c:	4613      	mov	r3, r2
 800df0e:	005b      	lsls	r3, r3, #1
 800df10:	4413      	add	r3, r2
 800df12:	00db      	lsls	r3, r3, #3
 800df14:	440b      	add	r3, r1
 800df16:	3314      	adds	r3, #20
 800df18:	781b      	ldrb	r3, [r3, #0]
 800df1a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800df1c:	78fb      	ldrb	r3, [r7, #3]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	f000 8086 	beq.w	800e030 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800df24:	4948      	ldr	r1, [pc, #288]	; (800e048 <etharp_tmr+0x14c>)
 800df26:	687a      	ldr	r2, [r7, #4]
 800df28:	4613      	mov	r3, r2
 800df2a:	005b      	lsls	r3, r3, #1
 800df2c:	4413      	add	r3, r2
 800df2e:	00db      	lsls	r3, r3, #3
 800df30:	440b      	add	r3, r1
 800df32:	3312      	adds	r3, #18
 800df34:	881b      	ldrh	r3, [r3, #0]
 800df36:	3301      	adds	r3, #1
 800df38:	b298      	uxth	r0, r3
 800df3a:	4943      	ldr	r1, [pc, #268]	; (800e048 <etharp_tmr+0x14c>)
 800df3c:	687a      	ldr	r2, [r7, #4]
 800df3e:	4613      	mov	r3, r2
 800df40:	005b      	lsls	r3, r3, #1
 800df42:	4413      	add	r3, r2
 800df44:	00db      	lsls	r3, r3, #3
 800df46:	440b      	add	r3, r1
 800df48:	3312      	adds	r3, #18
 800df4a:	4602      	mov	r2, r0
 800df4c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800df4e:	493e      	ldr	r1, [pc, #248]	; (800e048 <etharp_tmr+0x14c>)
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	4613      	mov	r3, r2
 800df54:	005b      	lsls	r3, r3, #1
 800df56:	4413      	add	r3, r2
 800df58:	00db      	lsls	r3, r3, #3
 800df5a:	440b      	add	r3, r1
 800df5c:	3312      	adds	r3, #18
 800df5e:	881b      	ldrh	r3, [r3, #0]
 800df60:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800df64:	d215      	bcs.n	800df92 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800df66:	4938      	ldr	r1, [pc, #224]	; (800e048 <etharp_tmr+0x14c>)
 800df68:	687a      	ldr	r2, [r7, #4]
 800df6a:	4613      	mov	r3, r2
 800df6c:	005b      	lsls	r3, r3, #1
 800df6e:	4413      	add	r3, r2
 800df70:	00db      	lsls	r3, r3, #3
 800df72:	440b      	add	r3, r1
 800df74:	3314      	adds	r3, #20
 800df76:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d10e      	bne.n	800df9a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800df7c:	4932      	ldr	r1, [pc, #200]	; (800e048 <etharp_tmr+0x14c>)
 800df7e:	687a      	ldr	r2, [r7, #4]
 800df80:	4613      	mov	r3, r2
 800df82:	005b      	lsls	r3, r3, #1
 800df84:	4413      	add	r3, r2
 800df86:	00db      	lsls	r3, r3, #3
 800df88:	440b      	add	r3, r1
 800df8a:	3312      	adds	r3, #18
 800df8c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800df8e:	2b04      	cmp	r3, #4
 800df90:	d903      	bls.n	800df9a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f7ff ff80 	bl	800de98 <etharp_free_entry>
 800df98:	e04a      	b.n	800e030 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800df9a:	492b      	ldr	r1, [pc, #172]	; (800e048 <etharp_tmr+0x14c>)
 800df9c:	687a      	ldr	r2, [r7, #4]
 800df9e:	4613      	mov	r3, r2
 800dfa0:	005b      	lsls	r3, r3, #1
 800dfa2:	4413      	add	r3, r2
 800dfa4:	00db      	lsls	r3, r3, #3
 800dfa6:	440b      	add	r3, r1
 800dfa8:	3314      	adds	r3, #20
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	2b03      	cmp	r3, #3
 800dfae:	d10a      	bne.n	800dfc6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800dfb0:	4925      	ldr	r1, [pc, #148]	; (800e048 <etharp_tmr+0x14c>)
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	4613      	mov	r3, r2
 800dfb6:	005b      	lsls	r3, r3, #1
 800dfb8:	4413      	add	r3, r2
 800dfba:	00db      	lsls	r3, r3, #3
 800dfbc:	440b      	add	r3, r1
 800dfbe:	3314      	adds	r3, #20
 800dfc0:	2204      	movs	r2, #4
 800dfc2:	701a      	strb	r2, [r3, #0]
 800dfc4:	e034      	b.n	800e030 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800dfc6:	4920      	ldr	r1, [pc, #128]	; (800e048 <etharp_tmr+0x14c>)
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	4613      	mov	r3, r2
 800dfcc:	005b      	lsls	r3, r3, #1
 800dfce:	4413      	add	r3, r2
 800dfd0:	00db      	lsls	r3, r3, #3
 800dfd2:	440b      	add	r3, r1
 800dfd4:	3314      	adds	r3, #20
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	2b04      	cmp	r3, #4
 800dfda:	d10a      	bne.n	800dff2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800dfdc:	491a      	ldr	r1, [pc, #104]	; (800e048 <etharp_tmr+0x14c>)
 800dfde:	687a      	ldr	r2, [r7, #4]
 800dfe0:	4613      	mov	r3, r2
 800dfe2:	005b      	lsls	r3, r3, #1
 800dfe4:	4413      	add	r3, r2
 800dfe6:	00db      	lsls	r3, r3, #3
 800dfe8:	440b      	add	r3, r1
 800dfea:	3314      	adds	r3, #20
 800dfec:	2202      	movs	r2, #2
 800dfee:	701a      	strb	r2, [r3, #0]
 800dff0:	e01e      	b.n	800e030 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800dff2:	4915      	ldr	r1, [pc, #84]	; (800e048 <etharp_tmr+0x14c>)
 800dff4:	687a      	ldr	r2, [r7, #4]
 800dff6:	4613      	mov	r3, r2
 800dff8:	005b      	lsls	r3, r3, #1
 800dffa:	4413      	add	r3, r2
 800dffc:	00db      	lsls	r3, r3, #3
 800dffe:	440b      	add	r3, r1
 800e000:	3314      	adds	r3, #20
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	2b01      	cmp	r3, #1
 800e006:	d113      	bne.n	800e030 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e008:	490f      	ldr	r1, [pc, #60]	; (800e048 <etharp_tmr+0x14c>)
 800e00a:	687a      	ldr	r2, [r7, #4]
 800e00c:	4613      	mov	r3, r2
 800e00e:	005b      	lsls	r3, r3, #1
 800e010:	4413      	add	r3, r2
 800e012:	00db      	lsls	r3, r3, #3
 800e014:	440b      	add	r3, r1
 800e016:	3308      	adds	r3, #8
 800e018:	6818      	ldr	r0, [r3, #0]
 800e01a:	687a      	ldr	r2, [r7, #4]
 800e01c:	4613      	mov	r3, r2
 800e01e:	005b      	lsls	r3, r3, #1
 800e020:	4413      	add	r3, r2
 800e022:	00db      	lsls	r3, r3, #3
 800e024:	4a08      	ldr	r2, [pc, #32]	; (800e048 <etharp_tmr+0x14c>)
 800e026:	4413      	add	r3, r2
 800e028:	3304      	adds	r3, #4
 800e02a:	4619      	mov	r1, r3
 800e02c:	f000 fe6e 	bl	800ed0c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	3301      	adds	r3, #1
 800e034:	607b      	str	r3, [r7, #4]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2b09      	cmp	r3, #9
 800e03a:	f77f af65 	ble.w	800df08 <etharp_tmr+0xc>
      }
    }
  }
}
 800e03e:	bf00      	nop
 800e040:	bf00      	nop
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	20006860 	.word	0x20006860

0800e04c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b08a      	sub	sp, #40	; 0x28
 800e050:	af00      	add	r7, sp, #0
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	460b      	mov	r3, r1
 800e056:	607a      	str	r2, [r7, #4]
 800e058:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e05a:	230a      	movs	r3, #10
 800e05c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e05e:	230a      	movs	r3, #10
 800e060:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e062:	230a      	movs	r3, #10
 800e064:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800e066:	2300      	movs	r3, #0
 800e068:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e06a:	230a      	movs	r3, #10
 800e06c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e06e:	2300      	movs	r3, #0
 800e070:	83bb      	strh	r3, [r7, #28]
 800e072:	2300      	movs	r3, #0
 800e074:	837b      	strh	r3, [r7, #26]
 800e076:	2300      	movs	r3, #0
 800e078:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e07a:	2300      	movs	r3, #0
 800e07c:	843b      	strh	r3, [r7, #32]
 800e07e:	e0ae      	b.n	800e1de <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e080:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e084:	49a6      	ldr	r1, [pc, #664]	; (800e320 <etharp_find_entry+0x2d4>)
 800e086:	4613      	mov	r3, r2
 800e088:	005b      	lsls	r3, r3, #1
 800e08a:	4413      	add	r3, r2
 800e08c:	00db      	lsls	r3, r3, #3
 800e08e:	440b      	add	r3, r1
 800e090:	3314      	adds	r3, #20
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e096:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e09a:	2b0a      	cmp	r3, #10
 800e09c:	d105      	bne.n	800e0aa <etharp_find_entry+0x5e>
 800e09e:	7dfb      	ldrb	r3, [r7, #23]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d102      	bne.n	800e0aa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e0a4:	8c3b      	ldrh	r3, [r7, #32]
 800e0a6:	847b      	strh	r3, [r7, #34]	; 0x22
 800e0a8:	e095      	b.n	800e1d6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e0aa:	7dfb      	ldrb	r3, [r7, #23]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	f000 8092 	beq.w	800e1d6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e0b2:	7dfb      	ldrb	r3, [r7, #23]
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d009      	beq.n	800e0cc <etharp_find_entry+0x80>
 800e0b8:	7dfb      	ldrb	r3, [r7, #23]
 800e0ba:	2b01      	cmp	r3, #1
 800e0bc:	d806      	bhi.n	800e0cc <etharp_find_entry+0x80>
 800e0be:	4b99      	ldr	r3, [pc, #612]	; (800e324 <etharp_find_entry+0x2d8>)
 800e0c0:	f240 1223 	movw	r2, #291	; 0x123
 800e0c4:	4998      	ldr	r1, [pc, #608]	; (800e328 <etharp_find_entry+0x2dc>)
 800e0c6:	4899      	ldr	r0, [pc, #612]	; (800e32c <etharp_find_entry+0x2e0>)
 800e0c8:	f002 fa10 	bl	80104ec <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d020      	beq.n	800e114 <etharp_find_entry+0xc8>
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	6819      	ldr	r1, [r3, #0]
 800e0d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e0da:	4891      	ldr	r0, [pc, #580]	; (800e320 <etharp_find_entry+0x2d4>)
 800e0dc:	4613      	mov	r3, r2
 800e0de:	005b      	lsls	r3, r3, #1
 800e0e0:	4413      	add	r3, r2
 800e0e2:	00db      	lsls	r3, r3, #3
 800e0e4:	4403      	add	r3, r0
 800e0e6:	3304      	adds	r3, #4
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	4299      	cmp	r1, r3
 800e0ec:	d112      	bne.n	800e114 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d00c      	beq.n	800e10e <etharp_find_entry+0xc2>
 800e0f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e0f8:	4989      	ldr	r1, [pc, #548]	; (800e320 <etharp_find_entry+0x2d4>)
 800e0fa:	4613      	mov	r3, r2
 800e0fc:	005b      	lsls	r3, r3, #1
 800e0fe:	4413      	add	r3, r2
 800e100:	00db      	lsls	r3, r3, #3
 800e102:	440b      	add	r3, r1
 800e104:	3308      	adds	r3, #8
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	687a      	ldr	r2, [r7, #4]
 800e10a:	429a      	cmp	r2, r3
 800e10c:	d102      	bne.n	800e114 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e10e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e112:	e100      	b.n	800e316 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e114:	7dfb      	ldrb	r3, [r7, #23]
 800e116:	2b01      	cmp	r3, #1
 800e118:	d140      	bne.n	800e19c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e11a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e11e:	4980      	ldr	r1, [pc, #512]	; (800e320 <etharp_find_entry+0x2d4>)
 800e120:	4613      	mov	r3, r2
 800e122:	005b      	lsls	r3, r3, #1
 800e124:	4413      	add	r3, r2
 800e126:	00db      	lsls	r3, r3, #3
 800e128:	440b      	add	r3, r1
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d01a      	beq.n	800e166 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e130:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e134:	497a      	ldr	r1, [pc, #488]	; (800e320 <etharp_find_entry+0x2d4>)
 800e136:	4613      	mov	r3, r2
 800e138:	005b      	lsls	r3, r3, #1
 800e13a:	4413      	add	r3, r2
 800e13c:	00db      	lsls	r3, r3, #3
 800e13e:	440b      	add	r3, r1
 800e140:	3312      	adds	r3, #18
 800e142:	881b      	ldrh	r3, [r3, #0]
 800e144:	8bba      	ldrh	r2, [r7, #28]
 800e146:	429a      	cmp	r2, r3
 800e148:	d845      	bhi.n	800e1d6 <etharp_find_entry+0x18a>
            old_queue = i;
 800e14a:	8c3b      	ldrh	r3, [r7, #32]
 800e14c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e14e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e152:	4973      	ldr	r1, [pc, #460]	; (800e320 <etharp_find_entry+0x2d4>)
 800e154:	4613      	mov	r3, r2
 800e156:	005b      	lsls	r3, r3, #1
 800e158:	4413      	add	r3, r2
 800e15a:	00db      	lsls	r3, r3, #3
 800e15c:	440b      	add	r3, r1
 800e15e:	3312      	adds	r3, #18
 800e160:	881b      	ldrh	r3, [r3, #0]
 800e162:	83bb      	strh	r3, [r7, #28]
 800e164:	e037      	b.n	800e1d6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e166:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e16a:	496d      	ldr	r1, [pc, #436]	; (800e320 <etharp_find_entry+0x2d4>)
 800e16c:	4613      	mov	r3, r2
 800e16e:	005b      	lsls	r3, r3, #1
 800e170:	4413      	add	r3, r2
 800e172:	00db      	lsls	r3, r3, #3
 800e174:	440b      	add	r3, r1
 800e176:	3312      	adds	r3, #18
 800e178:	881b      	ldrh	r3, [r3, #0]
 800e17a:	8b7a      	ldrh	r2, [r7, #26]
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d82a      	bhi.n	800e1d6 <etharp_find_entry+0x18a>
            old_pending = i;
 800e180:	8c3b      	ldrh	r3, [r7, #32]
 800e182:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800e184:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e188:	4965      	ldr	r1, [pc, #404]	; (800e320 <etharp_find_entry+0x2d4>)
 800e18a:	4613      	mov	r3, r2
 800e18c:	005b      	lsls	r3, r3, #1
 800e18e:	4413      	add	r3, r2
 800e190:	00db      	lsls	r3, r3, #3
 800e192:	440b      	add	r3, r1
 800e194:	3312      	adds	r3, #18
 800e196:	881b      	ldrh	r3, [r3, #0]
 800e198:	837b      	strh	r3, [r7, #26]
 800e19a:	e01c      	b.n	800e1d6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e19c:	7dfb      	ldrb	r3, [r7, #23]
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	d919      	bls.n	800e1d6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e1a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e1a6:	495e      	ldr	r1, [pc, #376]	; (800e320 <etharp_find_entry+0x2d4>)
 800e1a8:	4613      	mov	r3, r2
 800e1aa:	005b      	lsls	r3, r3, #1
 800e1ac:	4413      	add	r3, r2
 800e1ae:	00db      	lsls	r3, r3, #3
 800e1b0:	440b      	add	r3, r1
 800e1b2:	3312      	adds	r3, #18
 800e1b4:	881b      	ldrh	r3, [r3, #0]
 800e1b6:	8b3a      	ldrh	r2, [r7, #24]
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d80c      	bhi.n	800e1d6 <etharp_find_entry+0x18a>
            old_stable = i;
 800e1bc:	8c3b      	ldrh	r3, [r7, #32]
 800e1be:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800e1c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e1c4:	4956      	ldr	r1, [pc, #344]	; (800e320 <etharp_find_entry+0x2d4>)
 800e1c6:	4613      	mov	r3, r2
 800e1c8:	005b      	lsls	r3, r3, #1
 800e1ca:	4413      	add	r3, r2
 800e1cc:	00db      	lsls	r3, r3, #3
 800e1ce:	440b      	add	r3, r1
 800e1d0:	3312      	adds	r3, #18
 800e1d2:	881b      	ldrh	r3, [r3, #0]
 800e1d4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e1d6:	8c3b      	ldrh	r3, [r7, #32]
 800e1d8:	3301      	adds	r3, #1
 800e1da:	b29b      	uxth	r3, r3
 800e1dc:	843b      	strh	r3, [r7, #32]
 800e1de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e1e2:	2b09      	cmp	r3, #9
 800e1e4:	f77f af4c 	ble.w	800e080 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e1e8:	7afb      	ldrb	r3, [r7, #11]
 800e1ea:	f003 0302 	and.w	r3, r3, #2
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d108      	bne.n	800e204 <etharp_find_entry+0x1b8>
 800e1f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e1f6:	2b0a      	cmp	r3, #10
 800e1f8:	d107      	bne.n	800e20a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e1fa:	7afb      	ldrb	r3, [r7, #11]
 800e1fc:	f003 0301 	and.w	r3, r3, #1
 800e200:	2b00      	cmp	r3, #0
 800e202:	d102      	bne.n	800e20a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e204:	f04f 33ff 	mov.w	r3, #4294967295
 800e208:	e085      	b.n	800e316 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e20a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e20e:	2b09      	cmp	r3, #9
 800e210:	dc02      	bgt.n	800e218 <etharp_find_entry+0x1cc>
    i = empty;
 800e212:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e214:	843b      	strh	r3, [r7, #32]
 800e216:	e039      	b.n	800e28c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e218:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e21c:	2b09      	cmp	r3, #9
 800e21e:	dc14      	bgt.n	800e24a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e220:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e222:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e224:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e228:	493d      	ldr	r1, [pc, #244]	; (800e320 <etharp_find_entry+0x2d4>)
 800e22a:	4613      	mov	r3, r2
 800e22c:	005b      	lsls	r3, r3, #1
 800e22e:	4413      	add	r3, r2
 800e230:	00db      	lsls	r3, r3, #3
 800e232:	440b      	add	r3, r1
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d018      	beq.n	800e26c <etharp_find_entry+0x220>
 800e23a:	4b3a      	ldr	r3, [pc, #232]	; (800e324 <etharp_find_entry+0x2d8>)
 800e23c:	f240 126d 	movw	r2, #365	; 0x16d
 800e240:	493b      	ldr	r1, [pc, #236]	; (800e330 <etharp_find_entry+0x2e4>)
 800e242:	483a      	ldr	r0, [pc, #232]	; (800e32c <etharp_find_entry+0x2e0>)
 800e244:	f002 f952 	bl	80104ec <iprintf>
 800e248:	e010      	b.n	800e26c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e24a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e24e:	2b09      	cmp	r3, #9
 800e250:	dc02      	bgt.n	800e258 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e252:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e254:	843b      	strh	r3, [r7, #32]
 800e256:	e009      	b.n	800e26c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e258:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e25c:	2b09      	cmp	r3, #9
 800e25e:	dc02      	bgt.n	800e266 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e260:	8bfb      	ldrh	r3, [r7, #30]
 800e262:	843b      	strh	r3, [r7, #32]
 800e264:	e002      	b.n	800e26c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e266:	f04f 33ff 	mov.w	r3, #4294967295
 800e26a:	e054      	b.n	800e316 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e26c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e270:	2b09      	cmp	r3, #9
 800e272:	dd06      	ble.n	800e282 <etharp_find_entry+0x236>
 800e274:	4b2b      	ldr	r3, [pc, #172]	; (800e324 <etharp_find_entry+0x2d8>)
 800e276:	f240 127f 	movw	r2, #383	; 0x17f
 800e27a:	492e      	ldr	r1, [pc, #184]	; (800e334 <etharp_find_entry+0x2e8>)
 800e27c:	482b      	ldr	r0, [pc, #172]	; (800e32c <etharp_find_entry+0x2e0>)
 800e27e:	f002 f935 	bl	80104ec <iprintf>
    etharp_free_entry(i);
 800e282:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e286:	4618      	mov	r0, r3
 800e288:	f7ff fe06 	bl	800de98 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e28c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e290:	2b09      	cmp	r3, #9
 800e292:	dd06      	ble.n	800e2a2 <etharp_find_entry+0x256>
 800e294:	4b23      	ldr	r3, [pc, #140]	; (800e324 <etharp_find_entry+0x2d8>)
 800e296:	f240 1283 	movw	r2, #387	; 0x183
 800e29a:	4926      	ldr	r1, [pc, #152]	; (800e334 <etharp_find_entry+0x2e8>)
 800e29c:	4823      	ldr	r0, [pc, #140]	; (800e32c <etharp_find_entry+0x2e0>)
 800e29e:	f002 f925 	bl	80104ec <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e2a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2a6:	491e      	ldr	r1, [pc, #120]	; (800e320 <etharp_find_entry+0x2d4>)
 800e2a8:	4613      	mov	r3, r2
 800e2aa:	005b      	lsls	r3, r3, #1
 800e2ac:	4413      	add	r3, r2
 800e2ae:	00db      	lsls	r3, r3, #3
 800e2b0:	440b      	add	r3, r1
 800e2b2:	3314      	adds	r3, #20
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d006      	beq.n	800e2c8 <etharp_find_entry+0x27c>
 800e2ba:	4b1a      	ldr	r3, [pc, #104]	; (800e324 <etharp_find_entry+0x2d8>)
 800e2bc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800e2c0:	491d      	ldr	r1, [pc, #116]	; (800e338 <etharp_find_entry+0x2ec>)
 800e2c2:	481a      	ldr	r0, [pc, #104]	; (800e32c <etharp_find_entry+0x2e0>)
 800e2c4:	f002 f912 	bl	80104ec <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00b      	beq.n	800e2e6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e2ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	6819      	ldr	r1, [r3, #0]
 800e2d6:	4812      	ldr	r0, [pc, #72]	; (800e320 <etharp_find_entry+0x2d4>)
 800e2d8:	4613      	mov	r3, r2
 800e2da:	005b      	lsls	r3, r3, #1
 800e2dc:	4413      	add	r3, r2
 800e2de:	00db      	lsls	r3, r3, #3
 800e2e0:	4403      	add	r3, r0
 800e2e2:	3304      	adds	r3, #4
 800e2e4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e2e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2ea:	490d      	ldr	r1, [pc, #52]	; (800e320 <etharp_find_entry+0x2d4>)
 800e2ec:	4613      	mov	r3, r2
 800e2ee:	005b      	lsls	r3, r3, #1
 800e2f0:	4413      	add	r3, r2
 800e2f2:	00db      	lsls	r3, r3, #3
 800e2f4:	440b      	add	r3, r1
 800e2f6:	3312      	adds	r3, #18
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e2fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e300:	4907      	ldr	r1, [pc, #28]	; (800e320 <etharp_find_entry+0x2d4>)
 800e302:	4613      	mov	r3, r2
 800e304:	005b      	lsls	r3, r3, #1
 800e306:	4413      	add	r3, r2
 800e308:	00db      	lsls	r3, r3, #3
 800e30a:	440b      	add	r3, r1
 800e30c:	3308      	adds	r3, #8
 800e30e:	687a      	ldr	r2, [r7, #4]
 800e310:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e312:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e316:	4618      	mov	r0, r3
 800e318:	3728      	adds	r7, #40	; 0x28
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
 800e31e:	bf00      	nop
 800e320:	20006860 	.word	0x20006860
 800e324:	080146a4 	.word	0x080146a4
 800e328:	080146dc 	.word	0x080146dc
 800e32c:	0801471c 	.word	0x0801471c
 800e330:	08014744 	.word	0x08014744
 800e334:	0801475c 	.word	0x0801475c
 800e338:	08014770 	.word	0x08014770

0800e33c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b088      	sub	sp, #32
 800e340:	af02      	add	r7, sp, #8
 800e342:	60f8      	str	r0, [r7, #12]
 800e344:	60b9      	str	r1, [r7, #8]
 800e346:	607a      	str	r2, [r7, #4]
 800e348:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e350:	2b06      	cmp	r3, #6
 800e352:	d006      	beq.n	800e362 <etharp_update_arp_entry+0x26>
 800e354:	4b48      	ldr	r3, [pc, #288]	; (800e478 <etharp_update_arp_entry+0x13c>)
 800e356:	f240 12a9 	movw	r2, #425	; 0x1a9
 800e35a:	4948      	ldr	r1, [pc, #288]	; (800e47c <etharp_update_arp_entry+0x140>)
 800e35c:	4848      	ldr	r0, [pc, #288]	; (800e480 <etharp_update_arp_entry+0x144>)
 800e35e:	f002 f8c5 	bl	80104ec <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d012      	beq.n	800e38e <etharp_update_arp_entry+0x52>
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d00e      	beq.n	800e38e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	68f9      	ldr	r1, [r7, #12]
 800e376:	4618      	mov	r0, r3
 800e378:	f001 f8fe 	bl	800f578 <ip4_addr_isbroadcast_u32>
 800e37c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d105      	bne.n	800e38e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e38a:	2be0      	cmp	r3, #224	; 0xe0
 800e38c:	d102      	bne.n	800e394 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e38e:	f06f 030f 	mvn.w	r3, #15
 800e392:	e06c      	b.n	800e46e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e394:	78fb      	ldrb	r3, [r7, #3]
 800e396:	68fa      	ldr	r2, [r7, #12]
 800e398:	4619      	mov	r1, r3
 800e39a:	68b8      	ldr	r0, [r7, #8]
 800e39c:	f7ff fe56 	bl	800e04c <etharp_find_entry>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e3a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	da02      	bge.n	800e3b2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e3ac:	8afb      	ldrh	r3, [r7, #22]
 800e3ae:	b25b      	sxtb	r3, r3
 800e3b0:	e05d      	b.n	800e46e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e3b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e3b6:	4933      	ldr	r1, [pc, #204]	; (800e484 <etharp_update_arp_entry+0x148>)
 800e3b8:	4613      	mov	r3, r2
 800e3ba:	005b      	lsls	r3, r3, #1
 800e3bc:	4413      	add	r3, r2
 800e3be:	00db      	lsls	r3, r3, #3
 800e3c0:	440b      	add	r3, r1
 800e3c2:	3314      	adds	r3, #20
 800e3c4:	2202      	movs	r2, #2
 800e3c6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e3c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e3cc:	492d      	ldr	r1, [pc, #180]	; (800e484 <etharp_update_arp_entry+0x148>)
 800e3ce:	4613      	mov	r3, r2
 800e3d0:	005b      	lsls	r3, r3, #1
 800e3d2:	4413      	add	r3, r2
 800e3d4:	00db      	lsls	r3, r3, #3
 800e3d6:	440b      	add	r3, r1
 800e3d8:	3308      	adds	r3, #8
 800e3da:	68fa      	ldr	r2, [r7, #12]
 800e3dc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e3de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e3e2:	4613      	mov	r3, r2
 800e3e4:	005b      	lsls	r3, r3, #1
 800e3e6:	4413      	add	r3, r2
 800e3e8:	00db      	lsls	r3, r3, #3
 800e3ea:	3308      	adds	r3, #8
 800e3ec:	4a25      	ldr	r2, [pc, #148]	; (800e484 <etharp_update_arp_entry+0x148>)
 800e3ee:	4413      	add	r3, r2
 800e3f0:	3304      	adds	r3, #4
 800e3f2:	2206      	movs	r2, #6
 800e3f4:	6879      	ldr	r1, [r7, #4]
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f002 f848 	bl	801048c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e3fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e400:	4920      	ldr	r1, [pc, #128]	; (800e484 <etharp_update_arp_entry+0x148>)
 800e402:	4613      	mov	r3, r2
 800e404:	005b      	lsls	r3, r3, #1
 800e406:	4413      	add	r3, r2
 800e408:	00db      	lsls	r3, r3, #3
 800e40a:	440b      	add	r3, r1
 800e40c:	3312      	adds	r3, #18
 800e40e:	2200      	movs	r2, #0
 800e410:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e412:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e416:	491b      	ldr	r1, [pc, #108]	; (800e484 <etharp_update_arp_entry+0x148>)
 800e418:	4613      	mov	r3, r2
 800e41a:	005b      	lsls	r3, r3, #1
 800e41c:	4413      	add	r3, r2
 800e41e:	00db      	lsls	r3, r3, #3
 800e420:	440b      	add	r3, r1
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d021      	beq.n	800e46c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e428:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e42c:	4915      	ldr	r1, [pc, #84]	; (800e484 <etharp_update_arp_entry+0x148>)
 800e42e:	4613      	mov	r3, r2
 800e430:	005b      	lsls	r3, r3, #1
 800e432:	4413      	add	r3, r2
 800e434:	00db      	lsls	r3, r3, #3
 800e436:	440b      	add	r3, r1
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e43c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e440:	4910      	ldr	r1, [pc, #64]	; (800e484 <etharp_update_arp_entry+0x148>)
 800e442:	4613      	mov	r3, r2
 800e444:	005b      	lsls	r3, r3, #1
 800e446:	4413      	add	r3, r2
 800e448:	00db      	lsls	r3, r3, #3
 800e44a:	440b      	add	r3, r1
 800e44c:	2200      	movs	r2, #0
 800e44e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e456:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e45a:	9300      	str	r3, [sp, #0]
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6939      	ldr	r1, [r7, #16]
 800e460:	68f8      	ldr	r0, [r7, #12]
 800e462:	f001 ff97 	bl	8010394 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e466:	6938      	ldr	r0, [r7, #16]
 800e468:	f7f8 fe86 	bl	8007178 <pbuf_free>
  }
  return ERR_OK;
 800e46c:	2300      	movs	r3, #0
}
 800e46e:	4618      	mov	r0, r3
 800e470:	3718      	adds	r7, #24
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
 800e476:	bf00      	nop
 800e478:	080146a4 	.word	0x080146a4
 800e47c:	0801479c 	.word	0x0801479c
 800e480:	0801471c 	.word	0x0801471c
 800e484:	20006860 	.word	0x20006860

0800e488 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b084      	sub	sp, #16
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e490:	2300      	movs	r3, #0
 800e492:	60fb      	str	r3, [r7, #12]
 800e494:	e01e      	b.n	800e4d4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e496:	4913      	ldr	r1, [pc, #76]	; (800e4e4 <etharp_cleanup_netif+0x5c>)
 800e498:	68fa      	ldr	r2, [r7, #12]
 800e49a:	4613      	mov	r3, r2
 800e49c:	005b      	lsls	r3, r3, #1
 800e49e:	4413      	add	r3, r2
 800e4a0:	00db      	lsls	r3, r3, #3
 800e4a2:	440b      	add	r3, r1
 800e4a4:	3314      	adds	r3, #20
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e4aa:	7afb      	ldrb	r3, [r7, #11]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d00e      	beq.n	800e4ce <etharp_cleanup_netif+0x46>
 800e4b0:	490c      	ldr	r1, [pc, #48]	; (800e4e4 <etharp_cleanup_netif+0x5c>)
 800e4b2:	68fa      	ldr	r2, [r7, #12]
 800e4b4:	4613      	mov	r3, r2
 800e4b6:	005b      	lsls	r3, r3, #1
 800e4b8:	4413      	add	r3, r2
 800e4ba:	00db      	lsls	r3, r3, #3
 800e4bc:	440b      	add	r3, r1
 800e4be:	3308      	adds	r3, #8
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	687a      	ldr	r2, [r7, #4]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d102      	bne.n	800e4ce <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e4c8:	68f8      	ldr	r0, [r7, #12]
 800e4ca:	f7ff fce5 	bl	800de98 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	60fb      	str	r3, [r7, #12]
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2b09      	cmp	r3, #9
 800e4d8:	dddd      	ble.n	800e496 <etharp_cleanup_netif+0xe>
    }
  }
}
 800e4da:	bf00      	nop
 800e4dc:	bf00      	nop
 800e4de:	3710      	adds	r7, #16
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	20006860 	.word	0x20006860

0800e4e8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e4e8:	b5b0      	push	{r4, r5, r7, lr}
 800e4ea:	b08a      	sub	sp, #40	; 0x28
 800e4ec:	af04      	add	r7, sp, #16
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d107      	bne.n	800e508 <etharp_input+0x20>
 800e4f8:	4b3d      	ldr	r3, [pc, #244]	; (800e5f0 <etharp_input+0x108>)
 800e4fa:	f240 228a 	movw	r2, #650	; 0x28a
 800e4fe:	493d      	ldr	r1, [pc, #244]	; (800e5f4 <etharp_input+0x10c>)
 800e500:	483d      	ldr	r0, [pc, #244]	; (800e5f8 <etharp_input+0x110>)
 800e502:	f001 fff3 	bl	80104ec <iprintf>
 800e506:	e06f      	b.n	800e5e8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	685b      	ldr	r3, [r3, #4]
 800e50c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	881b      	ldrh	r3, [r3, #0]
 800e512:	b29b      	uxth	r3, r3
 800e514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e518:	d10c      	bne.n	800e534 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e51e:	2b06      	cmp	r3, #6
 800e520:	d108      	bne.n	800e534 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e526:	2b04      	cmp	r3, #4
 800e528:	d104      	bne.n	800e534 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	885b      	ldrh	r3, [r3, #2]
 800e52e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e530:	2b08      	cmp	r3, #8
 800e532:	d003      	beq.n	800e53c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f7f8 fe1f 	bl	8007178 <pbuf_free>
    return;
 800e53a:	e055      	b.n	800e5e8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	330e      	adds	r3, #14
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	3318      	adds	r3, #24
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	3304      	adds	r3, #4
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d102      	bne.n	800e55c <etharp_input+0x74>
    for_us = 0;
 800e556:	2300      	movs	r3, #0
 800e558:	75fb      	strb	r3, [r7, #23]
 800e55a:	e009      	b.n	800e570 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e55c:	68ba      	ldr	r2, [r7, #8]
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	3304      	adds	r3, #4
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	429a      	cmp	r2, r3
 800e566:	bf0c      	ite	eq
 800e568:	2301      	moveq	r3, #1
 800e56a:	2300      	movne	r3, #0
 800e56c:	b2db      	uxtb	r3, r3
 800e56e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e570:	693b      	ldr	r3, [r7, #16]
 800e572:	f103 0208 	add.w	r2, r3, #8
 800e576:	7dfb      	ldrb	r3, [r7, #23]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d001      	beq.n	800e580 <etharp_input+0x98>
 800e57c:	2301      	movs	r3, #1
 800e57e:	e000      	b.n	800e582 <etharp_input+0x9a>
 800e580:	2302      	movs	r3, #2
 800e582:	f107 010c 	add.w	r1, r7, #12
 800e586:	6838      	ldr	r0, [r7, #0]
 800e588:	f7ff fed8 	bl	800e33c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	88db      	ldrh	r3, [r3, #6]
 800e590:	b29b      	uxth	r3, r3
 800e592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e596:	d003      	beq.n	800e5a0 <etharp_input+0xb8>
 800e598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e59c:	d01e      	beq.n	800e5dc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e59e:	e020      	b.n	800e5e2 <etharp_input+0xfa>
      if (for_us) {
 800e5a0:	7dfb      	ldrb	r3, [r7, #23]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d01c      	beq.n	800e5e0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e5bc:	693a      	ldr	r2, [r7, #16]
 800e5be:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e5c0:	2102      	movs	r1, #2
 800e5c2:	9103      	str	r1, [sp, #12]
 800e5c4:	f107 010c 	add.w	r1, r7, #12
 800e5c8:	9102      	str	r1, [sp, #8]
 800e5ca:	9201      	str	r2, [sp, #4]
 800e5cc:	9300      	str	r3, [sp, #0]
 800e5ce:	462b      	mov	r3, r5
 800e5d0:	4622      	mov	r2, r4
 800e5d2:	4601      	mov	r1, r0
 800e5d4:	6838      	ldr	r0, [r7, #0]
 800e5d6:	f000 faeb 	bl	800ebb0 <etharp_raw>
      break;
 800e5da:	e001      	b.n	800e5e0 <etharp_input+0xf8>
      break;
 800e5dc:	bf00      	nop
 800e5de:	e000      	b.n	800e5e2 <etharp_input+0xfa>
      break;
 800e5e0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f7f8 fdc8 	bl	8007178 <pbuf_free>
}
 800e5e8:	3718      	adds	r7, #24
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bdb0      	pop	{r4, r5, r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	080146a4 	.word	0x080146a4
 800e5f4:	080147f4 	.word	0x080147f4
 800e5f8:	0801471c 	.word	0x0801471c

0800e5fc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b086      	sub	sp, #24
 800e600:	af02      	add	r7, sp, #8
 800e602:	60f8      	str	r0, [r7, #12]
 800e604:	60b9      	str	r1, [r7, #8]
 800e606:	4613      	mov	r3, r2
 800e608:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e60a:	79fa      	ldrb	r2, [r7, #7]
 800e60c:	4944      	ldr	r1, [pc, #272]	; (800e720 <etharp_output_to_arp_index+0x124>)
 800e60e:	4613      	mov	r3, r2
 800e610:	005b      	lsls	r3, r3, #1
 800e612:	4413      	add	r3, r2
 800e614:	00db      	lsls	r3, r3, #3
 800e616:	440b      	add	r3, r1
 800e618:	3314      	adds	r3, #20
 800e61a:	781b      	ldrb	r3, [r3, #0]
 800e61c:	2b01      	cmp	r3, #1
 800e61e:	d806      	bhi.n	800e62e <etharp_output_to_arp_index+0x32>
 800e620:	4b40      	ldr	r3, [pc, #256]	; (800e724 <etharp_output_to_arp_index+0x128>)
 800e622:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e626:	4940      	ldr	r1, [pc, #256]	; (800e728 <etharp_output_to_arp_index+0x12c>)
 800e628:	4840      	ldr	r0, [pc, #256]	; (800e72c <etharp_output_to_arp_index+0x130>)
 800e62a:	f001 ff5f 	bl	80104ec <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e62e:	79fa      	ldrb	r2, [r7, #7]
 800e630:	493b      	ldr	r1, [pc, #236]	; (800e720 <etharp_output_to_arp_index+0x124>)
 800e632:	4613      	mov	r3, r2
 800e634:	005b      	lsls	r3, r3, #1
 800e636:	4413      	add	r3, r2
 800e638:	00db      	lsls	r3, r3, #3
 800e63a:	440b      	add	r3, r1
 800e63c:	3314      	adds	r3, #20
 800e63e:	781b      	ldrb	r3, [r3, #0]
 800e640:	2b02      	cmp	r3, #2
 800e642:	d153      	bne.n	800e6ec <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e644:	79fa      	ldrb	r2, [r7, #7]
 800e646:	4936      	ldr	r1, [pc, #216]	; (800e720 <etharp_output_to_arp_index+0x124>)
 800e648:	4613      	mov	r3, r2
 800e64a:	005b      	lsls	r3, r3, #1
 800e64c:	4413      	add	r3, r2
 800e64e:	00db      	lsls	r3, r3, #3
 800e650:	440b      	add	r3, r1
 800e652:	3312      	adds	r3, #18
 800e654:	881b      	ldrh	r3, [r3, #0]
 800e656:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800e65a:	d919      	bls.n	800e690 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e65c:	79fa      	ldrb	r2, [r7, #7]
 800e65e:	4613      	mov	r3, r2
 800e660:	005b      	lsls	r3, r3, #1
 800e662:	4413      	add	r3, r2
 800e664:	00db      	lsls	r3, r3, #3
 800e666:	4a2e      	ldr	r2, [pc, #184]	; (800e720 <etharp_output_to_arp_index+0x124>)
 800e668:	4413      	add	r3, r2
 800e66a:	3304      	adds	r3, #4
 800e66c:	4619      	mov	r1, r3
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	f000 fb4c 	bl	800ed0c <etharp_request>
 800e674:	4603      	mov	r3, r0
 800e676:	2b00      	cmp	r3, #0
 800e678:	d138      	bne.n	800e6ec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e67a:	79fa      	ldrb	r2, [r7, #7]
 800e67c:	4928      	ldr	r1, [pc, #160]	; (800e720 <etharp_output_to_arp_index+0x124>)
 800e67e:	4613      	mov	r3, r2
 800e680:	005b      	lsls	r3, r3, #1
 800e682:	4413      	add	r3, r2
 800e684:	00db      	lsls	r3, r3, #3
 800e686:	440b      	add	r3, r1
 800e688:	3314      	adds	r3, #20
 800e68a:	2203      	movs	r2, #3
 800e68c:	701a      	strb	r2, [r3, #0]
 800e68e:	e02d      	b.n	800e6ec <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e690:	79fa      	ldrb	r2, [r7, #7]
 800e692:	4923      	ldr	r1, [pc, #140]	; (800e720 <etharp_output_to_arp_index+0x124>)
 800e694:	4613      	mov	r3, r2
 800e696:	005b      	lsls	r3, r3, #1
 800e698:	4413      	add	r3, r2
 800e69a:	00db      	lsls	r3, r3, #3
 800e69c:	440b      	add	r3, r1
 800e69e:	3312      	adds	r3, #18
 800e6a0:	881b      	ldrh	r3, [r3, #0]
 800e6a2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e6a6:	d321      	bcc.n	800e6ec <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e6a8:	79fa      	ldrb	r2, [r7, #7]
 800e6aa:	4613      	mov	r3, r2
 800e6ac:	005b      	lsls	r3, r3, #1
 800e6ae:	4413      	add	r3, r2
 800e6b0:	00db      	lsls	r3, r3, #3
 800e6b2:	4a1b      	ldr	r2, [pc, #108]	; (800e720 <etharp_output_to_arp_index+0x124>)
 800e6b4:	4413      	add	r3, r2
 800e6b6:	1d19      	adds	r1, r3, #4
 800e6b8:	79fa      	ldrb	r2, [r7, #7]
 800e6ba:	4613      	mov	r3, r2
 800e6bc:	005b      	lsls	r3, r3, #1
 800e6be:	4413      	add	r3, r2
 800e6c0:	00db      	lsls	r3, r3, #3
 800e6c2:	3308      	adds	r3, #8
 800e6c4:	4a16      	ldr	r2, [pc, #88]	; (800e720 <etharp_output_to_arp_index+0x124>)
 800e6c6:	4413      	add	r3, r2
 800e6c8:	3304      	adds	r3, #4
 800e6ca:	461a      	mov	r2, r3
 800e6cc:	68f8      	ldr	r0, [r7, #12]
 800e6ce:	f000 fafb 	bl	800ecc8 <etharp_request_dst>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d109      	bne.n	800e6ec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e6d8:	79fa      	ldrb	r2, [r7, #7]
 800e6da:	4911      	ldr	r1, [pc, #68]	; (800e720 <etharp_output_to_arp_index+0x124>)
 800e6dc:	4613      	mov	r3, r2
 800e6de:	005b      	lsls	r3, r3, #1
 800e6e0:	4413      	add	r3, r2
 800e6e2:	00db      	lsls	r3, r3, #3
 800e6e4:	440b      	add	r3, r1
 800e6e6:	3314      	adds	r3, #20
 800e6e8:	2203      	movs	r2, #3
 800e6ea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800e6f2:	79fa      	ldrb	r2, [r7, #7]
 800e6f4:	4613      	mov	r3, r2
 800e6f6:	005b      	lsls	r3, r3, #1
 800e6f8:	4413      	add	r3, r2
 800e6fa:	00db      	lsls	r3, r3, #3
 800e6fc:	3308      	adds	r3, #8
 800e6fe:	4a08      	ldr	r2, [pc, #32]	; (800e720 <etharp_output_to_arp_index+0x124>)
 800e700:	4413      	add	r3, r2
 800e702:	3304      	adds	r3, #4
 800e704:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e708:	9200      	str	r2, [sp, #0]
 800e70a:	460a      	mov	r2, r1
 800e70c:	68b9      	ldr	r1, [r7, #8]
 800e70e:	68f8      	ldr	r0, [r7, #12]
 800e710:	f001 fe40 	bl	8010394 <ethernet_output>
 800e714:	4603      	mov	r3, r0
}
 800e716:	4618      	mov	r0, r3
 800e718:	3710      	adds	r7, #16
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
 800e71e:	bf00      	nop
 800e720:	20006860 	.word	0x20006860
 800e724:	080146a4 	.word	0x080146a4
 800e728:	08014814 	.word	0x08014814
 800e72c:	0801471c 	.word	0x0801471c

0800e730 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b08a      	sub	sp, #40	; 0x28
 800e734:	af02      	add	r7, sp, #8
 800e736:	60f8      	str	r0, [r7, #12]
 800e738:	60b9      	str	r1, [r7, #8]
 800e73a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d106      	bne.n	800e754 <etharp_output+0x24>
 800e746:	4b73      	ldr	r3, [pc, #460]	; (800e914 <etharp_output+0x1e4>)
 800e748:	f240 321e 	movw	r2, #798	; 0x31e
 800e74c:	4972      	ldr	r1, [pc, #456]	; (800e918 <etharp_output+0x1e8>)
 800e74e:	4873      	ldr	r0, [pc, #460]	; (800e91c <etharp_output+0x1ec>)
 800e750:	f001 fecc 	bl	80104ec <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d106      	bne.n	800e768 <etharp_output+0x38>
 800e75a:	4b6e      	ldr	r3, [pc, #440]	; (800e914 <etharp_output+0x1e4>)
 800e75c:	f240 321f 	movw	r2, #799	; 0x31f
 800e760:	496f      	ldr	r1, [pc, #444]	; (800e920 <etharp_output+0x1f0>)
 800e762:	486e      	ldr	r0, [pc, #440]	; (800e91c <etharp_output+0x1ec>)
 800e764:	f001 fec2 	bl	80104ec <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d106      	bne.n	800e77c <etharp_output+0x4c>
 800e76e:	4b69      	ldr	r3, [pc, #420]	; (800e914 <etharp_output+0x1e4>)
 800e770:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e774:	496b      	ldr	r1, [pc, #428]	; (800e924 <etharp_output+0x1f4>)
 800e776:	4869      	ldr	r0, [pc, #420]	; (800e91c <etharp_output+0x1ec>)
 800e778:	f001 feb8 	bl	80104ec <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	68f9      	ldr	r1, [r7, #12]
 800e782:	4618      	mov	r0, r3
 800e784:	f000 fef8 	bl	800f578 <ip4_addr_isbroadcast_u32>
 800e788:	4603      	mov	r3, r0
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d002      	beq.n	800e794 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e78e:	4b66      	ldr	r3, [pc, #408]	; (800e928 <etharp_output+0x1f8>)
 800e790:	61fb      	str	r3, [r7, #28]
 800e792:	e0af      	b.n	800e8f4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e79c:	2be0      	cmp	r3, #224	; 0xe0
 800e79e:	d118      	bne.n	800e7d2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e7a8:	235e      	movs	r3, #94	; 0x5e
 800e7aa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	3302      	adds	r3, #2
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	3303      	adds	r3, #3
 800e7c6:	781b      	ldrb	r3, [r3, #0]
 800e7c8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e7ca:	f107 0310 	add.w	r3, r7, #16
 800e7ce:	61fb      	str	r3, [r7, #28]
 800e7d0:	e090      	b.n	800e8f4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	3304      	adds	r3, #4
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	405a      	eors	r2, r3
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	3308      	adds	r3, #8
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	4013      	ands	r3, r2
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d012      	beq.n	800e810 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e7f0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d00b      	beq.n	800e810 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	330c      	adds	r3, #12
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d003      	beq.n	800e80a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	330c      	adds	r3, #12
 800e806:	61bb      	str	r3, [r7, #24]
 800e808:	e002      	b.n	800e810 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e80a:	f06f 0303 	mvn.w	r3, #3
 800e80e:	e07d      	b.n	800e90c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e810:	4b46      	ldr	r3, [pc, #280]	; (800e92c <etharp_output+0x1fc>)
 800e812:	781b      	ldrb	r3, [r3, #0]
 800e814:	4619      	mov	r1, r3
 800e816:	4a46      	ldr	r2, [pc, #280]	; (800e930 <etharp_output+0x200>)
 800e818:	460b      	mov	r3, r1
 800e81a:	005b      	lsls	r3, r3, #1
 800e81c:	440b      	add	r3, r1
 800e81e:	00db      	lsls	r3, r3, #3
 800e820:	4413      	add	r3, r2
 800e822:	3314      	adds	r3, #20
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	2b01      	cmp	r3, #1
 800e828:	d925      	bls.n	800e876 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e82a:	4b40      	ldr	r3, [pc, #256]	; (800e92c <etharp_output+0x1fc>)
 800e82c:	781b      	ldrb	r3, [r3, #0]
 800e82e:	4619      	mov	r1, r3
 800e830:	4a3f      	ldr	r2, [pc, #252]	; (800e930 <etharp_output+0x200>)
 800e832:	460b      	mov	r3, r1
 800e834:	005b      	lsls	r3, r3, #1
 800e836:	440b      	add	r3, r1
 800e838:	00db      	lsls	r3, r3, #3
 800e83a:	4413      	add	r3, r2
 800e83c:	3308      	adds	r3, #8
 800e83e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e840:	68fa      	ldr	r2, [r7, #12]
 800e842:	429a      	cmp	r2, r3
 800e844:	d117      	bne.n	800e876 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e846:	69bb      	ldr	r3, [r7, #24]
 800e848:	681a      	ldr	r2, [r3, #0]
 800e84a:	4b38      	ldr	r3, [pc, #224]	; (800e92c <etharp_output+0x1fc>)
 800e84c:	781b      	ldrb	r3, [r3, #0]
 800e84e:	4618      	mov	r0, r3
 800e850:	4937      	ldr	r1, [pc, #220]	; (800e930 <etharp_output+0x200>)
 800e852:	4603      	mov	r3, r0
 800e854:	005b      	lsls	r3, r3, #1
 800e856:	4403      	add	r3, r0
 800e858:	00db      	lsls	r3, r3, #3
 800e85a:	440b      	add	r3, r1
 800e85c:	3304      	adds	r3, #4
 800e85e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e860:	429a      	cmp	r2, r3
 800e862:	d108      	bne.n	800e876 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e864:	4b31      	ldr	r3, [pc, #196]	; (800e92c <etharp_output+0x1fc>)
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	461a      	mov	r2, r3
 800e86a:	68b9      	ldr	r1, [r7, #8]
 800e86c:	68f8      	ldr	r0, [r7, #12]
 800e86e:	f7ff fec5 	bl	800e5fc <etharp_output_to_arp_index>
 800e872:	4603      	mov	r3, r0
 800e874:	e04a      	b.n	800e90c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e876:	2300      	movs	r3, #0
 800e878:	75fb      	strb	r3, [r7, #23]
 800e87a:	e031      	b.n	800e8e0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e87c:	7dfa      	ldrb	r2, [r7, #23]
 800e87e:	492c      	ldr	r1, [pc, #176]	; (800e930 <etharp_output+0x200>)
 800e880:	4613      	mov	r3, r2
 800e882:	005b      	lsls	r3, r3, #1
 800e884:	4413      	add	r3, r2
 800e886:	00db      	lsls	r3, r3, #3
 800e888:	440b      	add	r3, r1
 800e88a:	3314      	adds	r3, #20
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d923      	bls.n	800e8da <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e892:	7dfa      	ldrb	r2, [r7, #23]
 800e894:	4926      	ldr	r1, [pc, #152]	; (800e930 <etharp_output+0x200>)
 800e896:	4613      	mov	r3, r2
 800e898:	005b      	lsls	r3, r3, #1
 800e89a:	4413      	add	r3, r2
 800e89c:	00db      	lsls	r3, r3, #3
 800e89e:	440b      	add	r3, r1
 800e8a0:	3308      	adds	r3, #8
 800e8a2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e8a4:	68fa      	ldr	r2, [r7, #12]
 800e8a6:	429a      	cmp	r2, r3
 800e8a8:	d117      	bne.n	800e8da <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e8aa:	69bb      	ldr	r3, [r7, #24]
 800e8ac:	6819      	ldr	r1, [r3, #0]
 800e8ae:	7dfa      	ldrb	r2, [r7, #23]
 800e8b0:	481f      	ldr	r0, [pc, #124]	; (800e930 <etharp_output+0x200>)
 800e8b2:	4613      	mov	r3, r2
 800e8b4:	005b      	lsls	r3, r3, #1
 800e8b6:	4413      	add	r3, r2
 800e8b8:	00db      	lsls	r3, r3, #3
 800e8ba:	4403      	add	r3, r0
 800e8bc:	3304      	adds	r3, #4
 800e8be:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e8c0:	4299      	cmp	r1, r3
 800e8c2:	d10a      	bne.n	800e8da <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e8c4:	4a19      	ldr	r2, [pc, #100]	; (800e92c <etharp_output+0x1fc>)
 800e8c6:	7dfb      	ldrb	r3, [r7, #23]
 800e8c8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e8ca:	7dfb      	ldrb	r3, [r7, #23]
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	68b9      	ldr	r1, [r7, #8]
 800e8d0:	68f8      	ldr	r0, [r7, #12]
 800e8d2:	f7ff fe93 	bl	800e5fc <etharp_output_to_arp_index>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	e018      	b.n	800e90c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e8da:	7dfb      	ldrb	r3, [r7, #23]
 800e8dc:	3301      	adds	r3, #1
 800e8de:	75fb      	strb	r3, [r7, #23]
 800e8e0:	7dfb      	ldrb	r3, [r7, #23]
 800e8e2:	2b09      	cmp	r3, #9
 800e8e4:	d9ca      	bls.n	800e87c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e8e6:	68ba      	ldr	r2, [r7, #8]
 800e8e8:	69b9      	ldr	r1, [r7, #24]
 800e8ea:	68f8      	ldr	r0, [r7, #12]
 800e8ec:	f000 f822 	bl	800e934 <etharp_query>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	e00b      	b.n	800e90c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e8fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e8fe:	9300      	str	r3, [sp, #0]
 800e900:	69fb      	ldr	r3, [r7, #28]
 800e902:	68b9      	ldr	r1, [r7, #8]
 800e904:	68f8      	ldr	r0, [r7, #12]
 800e906:	f001 fd45 	bl	8010394 <ethernet_output>
 800e90a:	4603      	mov	r3, r0
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3720      	adds	r7, #32
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}
 800e914:	080146a4 	.word	0x080146a4
 800e918:	080147f4 	.word	0x080147f4
 800e91c:	0801471c 	.word	0x0801471c
 800e920:	08014844 	.word	0x08014844
 800e924:	080147e4 	.word	0x080147e4
 800e928:	08014e4c 	.word	0x08014e4c
 800e92c:	20006950 	.word	0x20006950
 800e930:	20006860 	.word	0x20006860

0800e934 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b08c      	sub	sp, #48	; 0x30
 800e938:	af02      	add	r7, sp, #8
 800e93a:	60f8      	str	r0, [r7, #12]
 800e93c:	60b9      	str	r1, [r7, #8]
 800e93e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	3326      	adds	r3, #38	; 0x26
 800e944:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e946:	23ff      	movs	r3, #255	; 0xff
 800e948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e94c:	2300      	movs	r3, #0
 800e94e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	68f9      	ldr	r1, [r7, #12]
 800e956:	4618      	mov	r0, r3
 800e958:	f000 fe0e 	bl	800f578 <ip4_addr_isbroadcast_u32>
 800e95c:	4603      	mov	r3, r0
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d10c      	bne.n	800e97c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e96a:	2be0      	cmp	r3, #224	; 0xe0
 800e96c:	d006      	beq.n	800e97c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d003      	beq.n	800e97c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d102      	bne.n	800e982 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e97c:	f06f 030f 	mvn.w	r3, #15
 800e980:	e101      	b.n	800eb86 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e982:	68fa      	ldr	r2, [r7, #12]
 800e984:	2101      	movs	r1, #1
 800e986:	68b8      	ldr	r0, [r7, #8]
 800e988:	f7ff fb60 	bl	800e04c <etharp_find_entry>
 800e98c:	4603      	mov	r3, r0
 800e98e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e990:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e994:	2b00      	cmp	r3, #0
 800e996:	da02      	bge.n	800e99e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e998:	8a7b      	ldrh	r3, [r7, #18]
 800e99a:	b25b      	sxtb	r3, r3
 800e99c:	e0f3      	b.n	800eb86 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e99e:	8a7b      	ldrh	r3, [r7, #18]
 800e9a0:	2b7e      	cmp	r3, #126	; 0x7e
 800e9a2:	d906      	bls.n	800e9b2 <etharp_query+0x7e>
 800e9a4:	4b7a      	ldr	r3, [pc, #488]	; (800eb90 <etharp_query+0x25c>)
 800e9a6:	f240 32c1 	movw	r2, #961	; 0x3c1
 800e9aa:	497a      	ldr	r1, [pc, #488]	; (800eb94 <etharp_query+0x260>)
 800e9ac:	487a      	ldr	r0, [pc, #488]	; (800eb98 <etharp_query+0x264>)
 800e9ae:	f001 fd9d 	bl	80104ec <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e9b2:	8a7b      	ldrh	r3, [r7, #18]
 800e9b4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e9b6:	7c7a      	ldrb	r2, [r7, #17]
 800e9b8:	4978      	ldr	r1, [pc, #480]	; (800eb9c <etharp_query+0x268>)
 800e9ba:	4613      	mov	r3, r2
 800e9bc:	005b      	lsls	r3, r3, #1
 800e9be:	4413      	add	r3, r2
 800e9c0:	00db      	lsls	r3, r3, #3
 800e9c2:	440b      	add	r3, r1
 800e9c4:	3314      	adds	r3, #20
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d115      	bne.n	800e9f8 <etharp_query+0xc4>
    is_new_entry = 1;
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e9d0:	7c7a      	ldrb	r2, [r7, #17]
 800e9d2:	4972      	ldr	r1, [pc, #456]	; (800eb9c <etharp_query+0x268>)
 800e9d4:	4613      	mov	r3, r2
 800e9d6:	005b      	lsls	r3, r3, #1
 800e9d8:	4413      	add	r3, r2
 800e9da:	00db      	lsls	r3, r3, #3
 800e9dc:	440b      	add	r3, r1
 800e9de:	3314      	adds	r3, #20
 800e9e0:	2201      	movs	r2, #1
 800e9e2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e9e4:	7c7a      	ldrb	r2, [r7, #17]
 800e9e6:	496d      	ldr	r1, [pc, #436]	; (800eb9c <etharp_query+0x268>)
 800e9e8:	4613      	mov	r3, r2
 800e9ea:	005b      	lsls	r3, r3, #1
 800e9ec:	4413      	add	r3, r2
 800e9ee:	00db      	lsls	r3, r3, #3
 800e9f0:	440b      	add	r3, r1
 800e9f2:	3308      	adds	r3, #8
 800e9f4:	68fa      	ldr	r2, [r7, #12]
 800e9f6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e9f8:	7c7a      	ldrb	r2, [r7, #17]
 800e9fa:	4968      	ldr	r1, [pc, #416]	; (800eb9c <etharp_query+0x268>)
 800e9fc:	4613      	mov	r3, r2
 800e9fe:	005b      	lsls	r3, r3, #1
 800ea00:	4413      	add	r3, r2
 800ea02:	00db      	lsls	r3, r3, #3
 800ea04:	440b      	add	r3, r1
 800ea06:	3314      	adds	r3, #20
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	2b01      	cmp	r3, #1
 800ea0c:	d011      	beq.n	800ea32 <etharp_query+0xfe>
 800ea0e:	7c7a      	ldrb	r2, [r7, #17]
 800ea10:	4962      	ldr	r1, [pc, #392]	; (800eb9c <etharp_query+0x268>)
 800ea12:	4613      	mov	r3, r2
 800ea14:	005b      	lsls	r3, r3, #1
 800ea16:	4413      	add	r3, r2
 800ea18:	00db      	lsls	r3, r3, #3
 800ea1a:	440b      	add	r3, r1
 800ea1c:	3314      	adds	r3, #20
 800ea1e:	781b      	ldrb	r3, [r3, #0]
 800ea20:	2b01      	cmp	r3, #1
 800ea22:	d806      	bhi.n	800ea32 <etharp_query+0xfe>
 800ea24:	4b5a      	ldr	r3, [pc, #360]	; (800eb90 <etharp_query+0x25c>)
 800ea26:	f240 32cd 	movw	r2, #973	; 0x3cd
 800ea2a:	495d      	ldr	r1, [pc, #372]	; (800eba0 <etharp_query+0x26c>)
 800ea2c:	485a      	ldr	r0, [pc, #360]	; (800eb98 <etharp_query+0x264>)
 800ea2e:	f001 fd5d 	bl	80104ec <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ea32:	6a3b      	ldr	r3, [r7, #32]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d102      	bne.n	800ea3e <etharp_query+0x10a>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d10c      	bne.n	800ea58 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ea3e:	68b9      	ldr	r1, [r7, #8]
 800ea40:	68f8      	ldr	r0, [r7, #12]
 800ea42:	f000 f963 	bl	800ed0c <etharp_request>
 800ea46:	4603      	mov	r3, r0
 800ea48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d102      	bne.n	800ea58 <etharp_query+0x124>
      return result;
 800ea52:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ea56:	e096      	b.n	800eb86 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d106      	bne.n	800ea6c <etharp_query+0x138>
 800ea5e:	4b4c      	ldr	r3, [pc, #304]	; (800eb90 <etharp_query+0x25c>)
 800ea60:	f240 32e1 	movw	r2, #993	; 0x3e1
 800ea64:	494f      	ldr	r1, [pc, #316]	; (800eba4 <etharp_query+0x270>)
 800ea66:	484c      	ldr	r0, [pc, #304]	; (800eb98 <etharp_query+0x264>)
 800ea68:	f001 fd40 	bl	80104ec <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ea6c:	7c7a      	ldrb	r2, [r7, #17]
 800ea6e:	494b      	ldr	r1, [pc, #300]	; (800eb9c <etharp_query+0x268>)
 800ea70:	4613      	mov	r3, r2
 800ea72:	005b      	lsls	r3, r3, #1
 800ea74:	4413      	add	r3, r2
 800ea76:	00db      	lsls	r3, r3, #3
 800ea78:	440b      	add	r3, r1
 800ea7a:	3314      	adds	r3, #20
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d917      	bls.n	800eab2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ea82:	4a49      	ldr	r2, [pc, #292]	; (800eba8 <etharp_query+0x274>)
 800ea84:	7c7b      	ldrb	r3, [r7, #17]
 800ea86:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ea88:	7c7a      	ldrb	r2, [r7, #17]
 800ea8a:	4613      	mov	r3, r2
 800ea8c:	005b      	lsls	r3, r3, #1
 800ea8e:	4413      	add	r3, r2
 800ea90:	00db      	lsls	r3, r3, #3
 800ea92:	3308      	adds	r3, #8
 800ea94:	4a41      	ldr	r2, [pc, #260]	; (800eb9c <etharp_query+0x268>)
 800ea96:	4413      	add	r3, r2
 800ea98:	3304      	adds	r3, #4
 800ea9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ea9e:	9200      	str	r2, [sp, #0]
 800eaa0:	697a      	ldr	r2, [r7, #20]
 800eaa2:	6879      	ldr	r1, [r7, #4]
 800eaa4:	68f8      	ldr	r0, [r7, #12]
 800eaa6:	f001 fc75 	bl	8010394 <ethernet_output>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eab0:	e067      	b.n	800eb82 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800eab2:	7c7a      	ldrb	r2, [r7, #17]
 800eab4:	4939      	ldr	r1, [pc, #228]	; (800eb9c <etharp_query+0x268>)
 800eab6:	4613      	mov	r3, r2
 800eab8:	005b      	lsls	r3, r3, #1
 800eaba:	4413      	add	r3, r2
 800eabc:	00db      	lsls	r3, r3, #3
 800eabe:	440b      	add	r3, r1
 800eac0:	3314      	adds	r3, #20
 800eac2:	781b      	ldrb	r3, [r3, #0]
 800eac4:	2b01      	cmp	r3, #1
 800eac6:	d15c      	bne.n	800eb82 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800eac8:	2300      	movs	r3, #0
 800eaca:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ead0:	e01c      	b.n	800eb0c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ead2:	69fb      	ldr	r3, [r7, #28]
 800ead4:	895a      	ldrh	r2, [r3, #10]
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	891b      	ldrh	r3, [r3, #8]
 800eada:	429a      	cmp	r2, r3
 800eadc:	d10a      	bne.n	800eaf4 <etharp_query+0x1c0>
 800eade:	69fb      	ldr	r3, [r7, #28]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d006      	beq.n	800eaf4 <etharp_query+0x1c0>
 800eae6:	4b2a      	ldr	r3, [pc, #168]	; (800eb90 <etharp_query+0x25c>)
 800eae8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800eaec:	492f      	ldr	r1, [pc, #188]	; (800ebac <etharp_query+0x278>)
 800eaee:	482a      	ldr	r0, [pc, #168]	; (800eb98 <etharp_query+0x264>)
 800eaf0:	f001 fcfc 	bl	80104ec <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800eaf4:	69fb      	ldr	r3, [r7, #28]
 800eaf6:	7b1b      	ldrb	r3, [r3, #12]
 800eaf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d002      	beq.n	800eb06 <etharp_query+0x1d2>
        copy_needed = 1;
 800eb00:	2301      	movs	r3, #1
 800eb02:	61bb      	str	r3, [r7, #24]
        break;
 800eb04:	e005      	b.n	800eb12 <etharp_query+0x1de>
      }
      p = p->next;
 800eb06:	69fb      	ldr	r3, [r7, #28]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800eb0c:	69fb      	ldr	r3, [r7, #28]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d1df      	bne.n	800ead2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800eb12:	69bb      	ldr	r3, [r7, #24]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d007      	beq.n	800eb28 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800eb18:	687a      	ldr	r2, [r7, #4]
 800eb1a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800eb1e:	200e      	movs	r0, #14
 800eb20:	f7f8 fdb0 	bl	8007684 <pbuf_clone>
 800eb24:	61f8      	str	r0, [r7, #28]
 800eb26:	e004      	b.n	800eb32 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800eb2c:	69f8      	ldr	r0, [r7, #28]
 800eb2e:	f7f8 fbc3 	bl	80072b8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800eb32:	69fb      	ldr	r3, [r7, #28]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d021      	beq.n	800eb7c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800eb38:	7c7a      	ldrb	r2, [r7, #17]
 800eb3a:	4918      	ldr	r1, [pc, #96]	; (800eb9c <etharp_query+0x268>)
 800eb3c:	4613      	mov	r3, r2
 800eb3e:	005b      	lsls	r3, r3, #1
 800eb40:	4413      	add	r3, r2
 800eb42:	00db      	lsls	r3, r3, #3
 800eb44:	440b      	add	r3, r1
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d00a      	beq.n	800eb62 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800eb4c:	7c7a      	ldrb	r2, [r7, #17]
 800eb4e:	4913      	ldr	r1, [pc, #76]	; (800eb9c <etharp_query+0x268>)
 800eb50:	4613      	mov	r3, r2
 800eb52:	005b      	lsls	r3, r3, #1
 800eb54:	4413      	add	r3, r2
 800eb56:	00db      	lsls	r3, r3, #3
 800eb58:	440b      	add	r3, r1
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7f8 fb0b 	bl	8007178 <pbuf_free>
      }
      arp_table[i].q = p;
 800eb62:	7c7a      	ldrb	r2, [r7, #17]
 800eb64:	490d      	ldr	r1, [pc, #52]	; (800eb9c <etharp_query+0x268>)
 800eb66:	4613      	mov	r3, r2
 800eb68:	005b      	lsls	r3, r3, #1
 800eb6a:	4413      	add	r3, r2
 800eb6c:	00db      	lsls	r3, r3, #3
 800eb6e:	440b      	add	r3, r1
 800eb70:	69fa      	ldr	r2, [r7, #28]
 800eb72:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800eb74:	2300      	movs	r3, #0
 800eb76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb7a:	e002      	b.n	800eb82 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800eb7c:	23ff      	movs	r3, #255	; 0xff
 800eb7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800eb82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3728      	adds	r7, #40	; 0x28
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	080146a4 	.word	0x080146a4
 800eb94:	08014850 	.word	0x08014850
 800eb98:	0801471c 	.word	0x0801471c
 800eb9c:	20006860 	.word	0x20006860
 800eba0:	08014860 	.word	0x08014860
 800eba4:	08014844 	.word	0x08014844
 800eba8:	20006950 	.word	0x20006950
 800ebac:	08014888 	.word	0x08014888

0800ebb0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b08a      	sub	sp, #40	; 0x28
 800ebb4:	af02      	add	r7, sp, #8
 800ebb6:	60f8      	str	r0, [r7, #12]
 800ebb8:	60b9      	str	r1, [r7, #8]
 800ebba:	607a      	str	r2, [r7, #4]
 800ebbc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d106      	bne.n	800ebd6 <etharp_raw+0x26>
 800ebc8:	4b3a      	ldr	r3, [pc, #232]	; (800ecb4 <etharp_raw+0x104>)
 800ebca:	f240 4257 	movw	r2, #1111	; 0x457
 800ebce:	493a      	ldr	r1, [pc, #232]	; (800ecb8 <etharp_raw+0x108>)
 800ebd0:	483a      	ldr	r0, [pc, #232]	; (800ecbc <etharp_raw+0x10c>)
 800ebd2:	f001 fc8b 	bl	80104ec <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800ebd6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ebda:	211c      	movs	r1, #28
 800ebdc:	200e      	movs	r0, #14
 800ebde:	f7f7 ffe7 	bl	8006bb0 <pbuf_alloc>
 800ebe2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ebe4:	69bb      	ldr	r3, [r7, #24]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d102      	bne.n	800ebf0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800ebea:	f04f 33ff 	mov.w	r3, #4294967295
 800ebee:	e05d      	b.n	800ecac <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ebf0:	69bb      	ldr	r3, [r7, #24]
 800ebf2:	895b      	ldrh	r3, [r3, #10]
 800ebf4:	2b1b      	cmp	r3, #27
 800ebf6:	d806      	bhi.n	800ec06 <etharp_raw+0x56>
 800ebf8:	4b2e      	ldr	r3, [pc, #184]	; (800ecb4 <etharp_raw+0x104>)
 800ebfa:	f240 4262 	movw	r2, #1122	; 0x462
 800ebfe:	4930      	ldr	r1, [pc, #192]	; (800ecc0 <etharp_raw+0x110>)
 800ec00:	482e      	ldr	r0, [pc, #184]	; (800ecbc <etharp_raw+0x10c>)
 800ec02:	f001 fc73 	bl	80104ec <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ec06:	69bb      	ldr	r3, [r7, #24]
 800ec08:	685b      	ldr	r3, [r3, #4]
 800ec0a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ec0c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7f6 ffd6 	bl	8005bc0 <lwip_htons>
 800ec14:	4603      	mov	r3, r0
 800ec16:	461a      	mov	r2, r3
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ec22:	2b06      	cmp	r3, #6
 800ec24:	d006      	beq.n	800ec34 <etharp_raw+0x84>
 800ec26:	4b23      	ldr	r3, [pc, #140]	; (800ecb4 <etharp_raw+0x104>)
 800ec28:	f240 4269 	movw	r2, #1129	; 0x469
 800ec2c:	4925      	ldr	r1, [pc, #148]	; (800ecc4 <etharp_raw+0x114>)
 800ec2e:	4823      	ldr	r0, [pc, #140]	; (800ecbc <etharp_raw+0x10c>)
 800ec30:	f001 fc5c 	bl	80104ec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	3308      	adds	r3, #8
 800ec38:	2206      	movs	r2, #6
 800ec3a:	6839      	ldr	r1, [r7, #0]
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f001 fc25 	bl	801048c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	3312      	adds	r3, #18
 800ec46:	2206      	movs	r2, #6
 800ec48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f001 fc1e 	bl	801048c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	330e      	adds	r3, #14
 800ec54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec56:	6812      	ldr	r2, [r2, #0]
 800ec58:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	3318      	adds	r3, #24
 800ec5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec60:	6812      	ldr	r2, [r2, #0]
 800ec62:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	2200      	movs	r2, #0
 800ec68:	701a      	strb	r2, [r3, #0]
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	f042 0201 	orr.w	r2, r2, #1
 800ec70:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	2200      	movs	r2, #0
 800ec76:	f042 0208 	orr.w	r2, r2, #8
 800ec7a:	709a      	strb	r2, [r3, #2]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	2206      	movs	r2, #6
 800ec84:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	2204      	movs	r2, #4
 800ec8a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ec8c:	f640 0306 	movw	r3, #2054	; 0x806
 800ec90:	9300      	str	r3, [sp, #0]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	68ba      	ldr	r2, [r7, #8]
 800ec96:	69b9      	ldr	r1, [r7, #24]
 800ec98:	68f8      	ldr	r0, [r7, #12]
 800ec9a:	f001 fb7b 	bl	8010394 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ec9e:	69b8      	ldr	r0, [r7, #24]
 800eca0:	f7f8 fa6a 	bl	8007178 <pbuf_free>
  p = NULL;
 800eca4:	2300      	movs	r3, #0
 800eca6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800eca8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3720      	adds	r7, #32
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}
 800ecb4:	080146a4 	.word	0x080146a4
 800ecb8:	080147f4 	.word	0x080147f4
 800ecbc:	0801471c 	.word	0x0801471c
 800ecc0:	080148a4 	.word	0x080148a4
 800ecc4:	080148d8 	.word	0x080148d8

0800ecc8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b088      	sub	sp, #32
 800eccc:	af04      	add	r7, sp, #16
 800ecce:	60f8      	str	r0, [r7, #12]
 800ecd0:	60b9      	str	r1, [r7, #8]
 800ecd2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ece4:	2201      	movs	r2, #1
 800ece6:	9203      	str	r2, [sp, #12]
 800ece8:	68ba      	ldr	r2, [r7, #8]
 800ecea:	9202      	str	r2, [sp, #8]
 800ecec:	4a06      	ldr	r2, [pc, #24]	; (800ed08 <etharp_request_dst+0x40>)
 800ecee:	9201      	str	r2, [sp, #4]
 800ecf0:	9300      	str	r3, [sp, #0]
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	687a      	ldr	r2, [r7, #4]
 800ecf6:	68f8      	ldr	r0, [r7, #12]
 800ecf8:	f7ff ff5a 	bl	800ebb0 <etharp_raw>
 800ecfc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3710      	adds	r7, #16
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
 800ed06:	bf00      	nop
 800ed08:	08014e54 	.word	0x08014e54

0800ed0c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b082      	sub	sp, #8
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ed16:	4a05      	ldr	r2, [pc, #20]	; (800ed2c <etharp_request+0x20>)
 800ed18:	6839      	ldr	r1, [r7, #0]
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f7ff ffd4 	bl	800ecc8 <etharp_request_dst>
 800ed20:	4603      	mov	r3, r0
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3708      	adds	r7, #8
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}
 800ed2a:	bf00      	nop
 800ed2c:	08014e4c 	.word	0x08014e4c

0800ed30 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b08e      	sub	sp, #56	; 0x38
 800ed34:	af04      	add	r7, sp, #16
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ed3a:	4b79      	ldr	r3, [pc, #484]	; (800ef20 <icmp_input+0x1f0>)
 800ed3c:	689b      	ldr	r3, [r3, #8]
 800ed3e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800ed40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed42:	781b      	ldrb	r3, [r3, #0]
 800ed44:	f003 030f 	and.w	r3, r3, #15
 800ed48:	b2db      	uxtb	r3, r3
 800ed4a:	009b      	lsls	r3, r3, #2
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800ed50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed52:	2b13      	cmp	r3, #19
 800ed54:	f240 80cd 	bls.w	800eef2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	895b      	ldrh	r3, [r3, #10]
 800ed5c:	2b03      	cmp	r3, #3
 800ed5e:	f240 80ca 	bls.w	800eef6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	685b      	ldr	r3, [r3, #4]
 800ed66:	781b      	ldrb	r3, [r3, #0]
 800ed68:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ed6c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	f000 80b7 	beq.w	800eee4 <icmp_input+0x1b4>
 800ed76:	2b08      	cmp	r3, #8
 800ed78:	f040 80b7 	bne.w	800eeea <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ed7c:	4b69      	ldr	r3, [pc, #420]	; (800ef24 <icmp_input+0x1f4>)
 800ed7e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ed80:	4b67      	ldr	r3, [pc, #412]	; (800ef20 <icmp_input+0x1f0>)
 800ed82:	695b      	ldr	r3, [r3, #20]
 800ed84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ed88:	2be0      	cmp	r3, #224	; 0xe0
 800ed8a:	f000 80bb 	beq.w	800ef04 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ed8e:	4b64      	ldr	r3, [pc, #400]	; (800ef20 <icmp_input+0x1f0>)
 800ed90:	695b      	ldr	r3, [r3, #20]
 800ed92:	4a63      	ldr	r2, [pc, #396]	; (800ef20 <icmp_input+0x1f0>)
 800ed94:	6812      	ldr	r2, [r2, #0]
 800ed96:	4611      	mov	r1, r2
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f000 fbed 	bl	800f578 <ip4_addr_isbroadcast_u32>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	f040 80b1 	bne.w	800ef08 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	891b      	ldrh	r3, [r3, #8]
 800edaa:	2b07      	cmp	r3, #7
 800edac:	f240 80a5 	bls.w	800eefa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800edb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800edb2:	330e      	adds	r3, #14
 800edb4:	4619      	mov	r1, r3
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f7f8 f948 	bl	800704c <pbuf_add_header>
 800edbc:	4603      	mov	r3, r0
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d04b      	beq.n	800ee5a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	891a      	ldrh	r2, [r3, #8]
 800edc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800edc8:	4413      	add	r3, r2
 800edca:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	891b      	ldrh	r3, [r3, #8]
 800edd0:	8b7a      	ldrh	r2, [r7, #26]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	f0c0 809a 	bcc.w	800ef0c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800edd8:	8b7b      	ldrh	r3, [r7, #26]
 800edda:	f44f 7220 	mov.w	r2, #640	; 0x280
 800edde:	4619      	mov	r1, r3
 800ede0:	200e      	movs	r0, #14
 800ede2:	f7f7 fee5 	bl	8006bb0 <pbuf_alloc>
 800ede6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	2b00      	cmp	r3, #0
 800edec:	f000 8090 	beq.w	800ef10 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	895b      	ldrh	r3, [r3, #10]
 800edf4:	461a      	mov	r2, r3
 800edf6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800edf8:	3308      	adds	r3, #8
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d203      	bcs.n	800ee06 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800edfe:	6978      	ldr	r0, [r7, #20]
 800ee00:	f7f8 f9ba 	bl	8007178 <pbuf_free>
          goto icmperr;
 800ee04:	e085      	b.n	800ef12 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ee0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f001 fb3c 	bl	801048c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800ee14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ee16:	4619      	mov	r1, r3
 800ee18:	6978      	ldr	r0, [r7, #20]
 800ee1a:	f7f8 f927 	bl	800706c <pbuf_remove_header>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d009      	beq.n	800ee38 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ee24:	4b40      	ldr	r3, [pc, #256]	; (800ef28 <icmp_input+0x1f8>)
 800ee26:	22b6      	movs	r2, #182	; 0xb6
 800ee28:	4940      	ldr	r1, [pc, #256]	; (800ef2c <icmp_input+0x1fc>)
 800ee2a:	4841      	ldr	r0, [pc, #260]	; (800ef30 <icmp_input+0x200>)
 800ee2c:	f001 fb5e 	bl	80104ec <iprintf>
          pbuf_free(r);
 800ee30:	6978      	ldr	r0, [r7, #20]
 800ee32:	f7f8 f9a1 	bl	8007178 <pbuf_free>
          goto icmperr;
 800ee36:	e06c      	b.n	800ef12 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800ee38:	6879      	ldr	r1, [r7, #4]
 800ee3a:	6978      	ldr	r0, [r7, #20]
 800ee3c:	f7f8 fab4 	bl	80073a8 <pbuf_copy>
 800ee40:	4603      	mov	r3, r0
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d003      	beq.n	800ee4e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800ee46:	6978      	ldr	r0, [r7, #20]
 800ee48:	f7f8 f996 	bl	8007178 <pbuf_free>
          goto icmperr;
 800ee4c:	e061      	b.n	800ef12 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f7f8 f992 	bl	8007178 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	607b      	str	r3, [r7, #4]
 800ee58:	e00f      	b.n	800ee7a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ee5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ee5c:	330e      	adds	r3, #14
 800ee5e:	4619      	mov	r1, r3
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f7f8 f903 	bl	800706c <pbuf_remove_header>
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d006      	beq.n	800ee7a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ee6c:	4b2e      	ldr	r3, [pc, #184]	; (800ef28 <icmp_input+0x1f8>)
 800ee6e:	22c7      	movs	r2, #199	; 0xc7
 800ee70:	4930      	ldr	r1, [pc, #192]	; (800ef34 <icmp_input+0x204>)
 800ee72:	482f      	ldr	r0, [pc, #188]	; (800ef30 <icmp_input+0x200>)
 800ee74:	f001 fb3a 	bl	80104ec <iprintf>
          goto icmperr;
 800ee78:	e04b      	b.n	800ef12 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	685b      	ldr	r3, [r3, #4]
 800ee7e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800ee80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ee82:	4619      	mov	r1, r3
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f7f8 f8e1 	bl	800704c <pbuf_add_header>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d12b      	bne.n	800eee8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	685b      	ldr	r3, [r3, #4]
 800ee94:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800ee96:	69fb      	ldr	r3, [r7, #28]
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ee9e:	4b20      	ldr	r3, [pc, #128]	; (800ef20 <icmp_input+0x1f0>)
 800eea0:	691a      	ldr	r2, [r3, #16]
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800eea6:	693b      	ldr	r3, [r7, #16]
 800eea8:	2200      	movs	r2, #0
 800eeaa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	2200      	movs	r2, #0
 800eeb0:	709a      	strb	r2, [r3, #2]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	22ff      	movs	r2, #255	; 0xff
 800eeba:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	2200      	movs	r2, #0
 800eec0:	729a      	strb	r2, [r3, #10]
 800eec2:	2200      	movs	r2, #0
 800eec4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	9302      	str	r3, [sp, #8]
 800eeca:	2301      	movs	r3, #1
 800eecc:	9301      	str	r3, [sp, #4]
 800eece:	2300      	movs	r3, #0
 800eed0:	9300      	str	r3, [sp, #0]
 800eed2:	23ff      	movs	r3, #255	; 0xff
 800eed4:	2200      	movs	r2, #0
 800eed6:	69f9      	ldr	r1, [r7, #28]
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f000 fa75 	bl	800f3c8 <ip4_output_if>
 800eede:	4603      	mov	r3, r0
 800eee0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800eee2:	e001      	b.n	800eee8 <icmp_input+0x1b8>
      break;
 800eee4:	bf00      	nop
 800eee6:	e000      	b.n	800eeea <icmp_input+0x1ba>
      break;
 800eee8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f7f8 f944 	bl	8007178 <pbuf_free>
  return;
 800eef0:	e013      	b.n	800ef1a <icmp_input+0x1ea>
    goto lenerr;
 800eef2:	bf00      	nop
 800eef4:	e002      	b.n	800eefc <icmp_input+0x1cc>
    goto lenerr;
 800eef6:	bf00      	nop
 800eef8:	e000      	b.n	800eefc <icmp_input+0x1cc>
        goto lenerr;
 800eefa:	bf00      	nop
lenerr:
  pbuf_free(p);
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f7f8 f93b 	bl	8007178 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ef02:	e00a      	b.n	800ef1a <icmp_input+0x1ea>
        goto icmperr;
 800ef04:	bf00      	nop
 800ef06:	e004      	b.n	800ef12 <icmp_input+0x1e2>
        goto icmperr;
 800ef08:	bf00      	nop
 800ef0a:	e002      	b.n	800ef12 <icmp_input+0x1e2>
          goto icmperr;
 800ef0c:	bf00      	nop
 800ef0e:	e000      	b.n	800ef12 <icmp_input+0x1e2>
          goto icmperr;
 800ef10:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f7f8 f930 	bl	8007178 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ef18:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ef1a:	3728      	adds	r7, #40	; 0x28
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}
 800ef20:	20003290 	.word	0x20003290
 800ef24:	200032a4 	.word	0x200032a4
 800ef28:	0801491c 	.word	0x0801491c
 800ef2c:	08014954 	.word	0x08014954
 800ef30:	0801498c 	.word	0x0801498c
 800ef34:	080149b4 	.word	0x080149b4

0800ef38 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	460b      	mov	r3, r1
 800ef42:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ef44:	78fb      	ldrb	r3, [r7, #3]
 800ef46:	461a      	mov	r2, r3
 800ef48:	2103      	movs	r1, #3
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f000 f814 	bl	800ef78 <icmp_send_response>
}
 800ef50:	bf00      	nop
 800ef52:	3708      	adds	r7, #8
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b082      	sub	sp, #8
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
 800ef60:	460b      	mov	r3, r1
 800ef62:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ef64:	78fb      	ldrb	r3, [r7, #3]
 800ef66:	461a      	mov	r2, r3
 800ef68:	210b      	movs	r1, #11
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f000 f804 	bl	800ef78 <icmp_send_response>
}
 800ef70:	bf00      	nop
 800ef72:	3708      	adds	r7, #8
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b08c      	sub	sp, #48	; 0x30
 800ef7c:	af04      	add	r7, sp, #16
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	460b      	mov	r3, r1
 800ef82:	70fb      	strb	r3, [r7, #3]
 800ef84:	4613      	mov	r3, r2
 800ef86:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ef88:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ef8c:	2124      	movs	r1, #36	; 0x24
 800ef8e:	2022      	movs	r0, #34	; 0x22
 800ef90:	f7f7 fe0e 	bl	8006bb0 <pbuf_alloc>
 800ef94:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ef96:	69fb      	ldr	r3, [r7, #28]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d04c      	beq.n	800f036 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ef9c:	69fb      	ldr	r3, [r7, #28]
 800ef9e:	895b      	ldrh	r3, [r3, #10]
 800efa0:	2b23      	cmp	r3, #35	; 0x23
 800efa2:	d806      	bhi.n	800efb2 <icmp_send_response+0x3a>
 800efa4:	4b26      	ldr	r3, [pc, #152]	; (800f040 <icmp_send_response+0xc8>)
 800efa6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800efaa:	4926      	ldr	r1, [pc, #152]	; (800f044 <icmp_send_response+0xcc>)
 800efac:	4826      	ldr	r0, [pc, #152]	; (800f048 <icmp_send_response+0xd0>)
 800efae:	f001 fa9d 	bl	80104ec <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800efb8:	69fb      	ldr	r3, [r7, #28]
 800efba:	685b      	ldr	r3, [r3, #4]
 800efbc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	78fa      	ldrb	r2, [r7, #3]
 800efc2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	78ba      	ldrb	r2, [r7, #2]
 800efc8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	2200      	movs	r2, #0
 800efce:	711a      	strb	r2, [r3, #4]
 800efd0:	2200      	movs	r2, #0
 800efd2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800efd4:	697b      	ldr	r3, [r7, #20]
 800efd6:	2200      	movs	r2, #0
 800efd8:	719a      	strb	r2, [r3, #6]
 800efda:	2200      	movs	r2, #0
 800efdc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800efde:	69fb      	ldr	r3, [r7, #28]
 800efe0:	685b      	ldr	r3, [r3, #4]
 800efe2:	f103 0008 	add.w	r0, r3, #8
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	685b      	ldr	r3, [r3, #4]
 800efea:	221c      	movs	r2, #28
 800efec:	4619      	mov	r1, r3
 800efee:	f001 fa4d 	bl	801048c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800eff2:	69bb      	ldr	r3, [r7, #24]
 800eff4:	68db      	ldr	r3, [r3, #12]
 800eff6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800eff8:	f107 030c 	add.w	r3, r7, #12
 800effc:	4618      	mov	r0, r3
 800effe:	f000 f825 	bl	800f04c <ip4_route>
 800f002:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d011      	beq.n	800f02e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	2200      	movs	r2, #0
 800f00e:	709a      	strb	r2, [r3, #2]
 800f010:	2200      	movs	r2, #0
 800f012:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f014:	f107 020c 	add.w	r2, r7, #12
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	9302      	str	r3, [sp, #8]
 800f01c:	2301      	movs	r3, #1
 800f01e:	9301      	str	r3, [sp, #4]
 800f020:	2300      	movs	r3, #0
 800f022:	9300      	str	r3, [sp, #0]
 800f024:	23ff      	movs	r3, #255	; 0xff
 800f026:	2100      	movs	r1, #0
 800f028:	69f8      	ldr	r0, [r7, #28]
 800f02a:	f000 f9cd 	bl	800f3c8 <ip4_output_if>
  }
  pbuf_free(q);
 800f02e:	69f8      	ldr	r0, [r7, #28]
 800f030:	f7f8 f8a2 	bl	8007178 <pbuf_free>
 800f034:	e000      	b.n	800f038 <icmp_send_response+0xc0>
    return;
 800f036:	bf00      	nop
}
 800f038:	3720      	adds	r7, #32
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}
 800f03e:	bf00      	nop
 800f040:	0801491c 	.word	0x0801491c
 800f044:	080149e8 	.word	0x080149e8
 800f048:	0801498c 	.word	0x0801498c

0800f04c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f04c:	b480      	push	{r7}
 800f04e:	b085      	sub	sp, #20
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f054:	4b33      	ldr	r3, [pc, #204]	; (800f124 <ip4_route+0xd8>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	60fb      	str	r3, [r7, #12]
 800f05a:	e036      	b.n	800f0ca <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f062:	f003 0301 	and.w	r3, r3, #1
 800f066:	b2db      	uxtb	r3, r3
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d02b      	beq.n	800f0c4 <ip4_route+0x78>
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f072:	089b      	lsrs	r3, r3, #2
 800f074:	f003 0301 	and.w	r3, r3, #1
 800f078:	b2db      	uxtb	r3, r3
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d022      	beq.n	800f0c4 <ip4_route+0x78>
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	3304      	adds	r3, #4
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d01d      	beq.n	800f0c4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	3304      	adds	r3, #4
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	405a      	eors	r2, r3
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	3308      	adds	r3, #8
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	4013      	ands	r3, r2
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d101      	bne.n	800f0a4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	e038      	b.n	800f116 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f0aa:	f003 0302 	and.w	r3, r3, #2
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d108      	bne.n	800f0c4 <ip4_route+0x78>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681a      	ldr	r2, [r3, #0]
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	330c      	adds	r3, #12
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d101      	bne.n	800f0c4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	e028      	b.n	800f116 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	60fb      	str	r3, [r7, #12]
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d1c5      	bne.n	800f05c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f0d0:	4b15      	ldr	r3, [pc, #84]	; (800f128 <ip4_route+0xdc>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d01a      	beq.n	800f10e <ip4_route+0xc2>
 800f0d8:	4b13      	ldr	r3, [pc, #76]	; (800f128 <ip4_route+0xdc>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f0e0:	f003 0301 	and.w	r3, r3, #1
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d012      	beq.n	800f10e <ip4_route+0xc2>
 800f0e8:	4b0f      	ldr	r3, [pc, #60]	; (800f128 <ip4_route+0xdc>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f0f0:	f003 0304 	and.w	r3, r3, #4
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d00a      	beq.n	800f10e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f0f8:	4b0b      	ldr	r3, [pc, #44]	; (800f128 <ip4_route+0xdc>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	3304      	adds	r3, #4
 800f0fe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f100:	2b00      	cmp	r3, #0
 800f102:	d004      	beq.n	800f10e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	b2db      	uxtb	r3, r3
 800f10a:	2b7f      	cmp	r3, #127	; 0x7f
 800f10c:	d101      	bne.n	800f112 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f10e:	2300      	movs	r3, #0
 800f110:	e001      	b.n	800f116 <ip4_route+0xca>
  }

  return netif_default;
 800f112:	4b05      	ldr	r3, [pc, #20]	; (800f128 <ip4_route+0xdc>)
 800f114:	681b      	ldr	r3, [r3, #0]
}
 800f116:	4618      	mov	r0, r3
 800f118:	3714      	adds	r7, #20
 800f11a:	46bd      	mov	sp, r7
 800f11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f120:	4770      	bx	lr
 800f122:	bf00      	nop
 800f124:	200067f4 	.word	0x200067f4
 800f128:	200067f8 	.word	0x200067f8

0800f12c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b082      	sub	sp, #8
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f13a:	f003 0301 	and.w	r3, r3, #1
 800f13e:	b2db      	uxtb	r3, r3
 800f140:	2b00      	cmp	r3, #0
 800f142:	d016      	beq.n	800f172 <ip4_input_accept+0x46>
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	3304      	adds	r3, #4
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d011      	beq.n	800f172 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f14e:	4b0b      	ldr	r3, [pc, #44]	; (800f17c <ip4_input_accept+0x50>)
 800f150:	695a      	ldr	r2, [r3, #20]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	3304      	adds	r3, #4
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	429a      	cmp	r2, r3
 800f15a:	d008      	beq.n	800f16e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f15c:	4b07      	ldr	r3, [pc, #28]	; (800f17c <ip4_input_accept+0x50>)
 800f15e:	695b      	ldr	r3, [r3, #20]
 800f160:	6879      	ldr	r1, [r7, #4]
 800f162:	4618      	mov	r0, r3
 800f164:	f000 fa08 	bl	800f578 <ip4_addr_isbroadcast_u32>
 800f168:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d001      	beq.n	800f172 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f16e:	2301      	movs	r3, #1
 800f170:	e000      	b.n	800f174 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f172:	2300      	movs	r3, #0
}
 800f174:	4618      	mov	r0, r3
 800f176:	3708      	adds	r7, #8
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}
 800f17c:	20003290 	.word	0x20003290

0800f180 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b086      	sub	sp, #24
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f190:	697b      	ldr	r3, [r7, #20]
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	091b      	lsrs	r3, r3, #4
 800f196:	b2db      	uxtb	r3, r3
 800f198:	2b04      	cmp	r3, #4
 800f19a:	d004      	beq.n	800f1a6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f7f7 ffeb 	bl	8007178 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	e107      	b.n	800f3b6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	781b      	ldrb	r3, [r3, #0]
 800f1aa:	f003 030f 	and.w	r3, r3, #15
 800f1ae:	b2db      	uxtb	r3, r3
 800f1b0:	009b      	lsls	r3, r3, #2
 800f1b2:	b2db      	uxtb	r3, r3
 800f1b4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	885b      	ldrh	r3, [r3, #2]
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f7f6 fcff 	bl	8005bc0 <lwip_htons>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	891b      	ldrh	r3, [r3, #8]
 800f1ca:	89ba      	ldrh	r2, [r7, #12]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d204      	bcs.n	800f1da <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800f1d0:	89bb      	ldrh	r3, [r7, #12]
 800f1d2:	4619      	mov	r1, r3
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f7f7 fe49 	bl	8006e6c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	895b      	ldrh	r3, [r3, #10]
 800f1de:	89fa      	ldrh	r2, [r7, #14]
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d807      	bhi.n	800f1f4 <ip4_input+0x74>
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	891b      	ldrh	r3, [r3, #8]
 800f1e8:	89ba      	ldrh	r2, [r7, #12]
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d802      	bhi.n	800f1f4 <ip4_input+0x74>
 800f1ee:	89fb      	ldrh	r3, [r7, #14]
 800f1f0:	2b13      	cmp	r3, #19
 800f1f2:	d804      	bhi.n	800f1fe <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f7f7 ffbf 	bl	8007178 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	e0db      	b.n	800f3b6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	691b      	ldr	r3, [r3, #16]
 800f202:	4a6f      	ldr	r2, [pc, #444]	; (800f3c0 <ip4_input+0x240>)
 800f204:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	68db      	ldr	r3, [r3, #12]
 800f20a:	4a6d      	ldr	r2, [pc, #436]	; (800f3c0 <ip4_input+0x240>)
 800f20c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f20e:	4b6c      	ldr	r3, [pc, #432]	; (800f3c0 <ip4_input+0x240>)
 800f210:	695b      	ldr	r3, [r3, #20]
 800f212:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f216:	2be0      	cmp	r3, #224	; 0xe0
 800f218:	d112      	bne.n	800f240 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f220:	f003 0301 	and.w	r3, r3, #1
 800f224:	b2db      	uxtb	r3, r3
 800f226:	2b00      	cmp	r3, #0
 800f228:	d007      	beq.n	800f23a <ip4_input+0xba>
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	3304      	adds	r3, #4
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d002      	beq.n	800f23a <ip4_input+0xba>
      netif = inp;
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	613b      	str	r3, [r7, #16]
 800f238:	e02a      	b.n	800f290 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f23a:	2300      	movs	r3, #0
 800f23c:	613b      	str	r3, [r7, #16]
 800f23e:	e027      	b.n	800f290 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f240:	6838      	ldr	r0, [r7, #0]
 800f242:	f7ff ff73 	bl	800f12c <ip4_input_accept>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d002      	beq.n	800f252 <ip4_input+0xd2>
      netif = inp;
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	613b      	str	r3, [r7, #16]
 800f250:	e01e      	b.n	800f290 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f252:	2300      	movs	r3, #0
 800f254:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f256:	4b5a      	ldr	r3, [pc, #360]	; (800f3c0 <ip4_input+0x240>)
 800f258:	695b      	ldr	r3, [r3, #20]
 800f25a:	b2db      	uxtb	r3, r3
 800f25c:	2b7f      	cmp	r3, #127	; 0x7f
 800f25e:	d017      	beq.n	800f290 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f260:	4b58      	ldr	r3, [pc, #352]	; (800f3c4 <ip4_input+0x244>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	613b      	str	r3, [r7, #16]
 800f266:	e00e      	b.n	800f286 <ip4_input+0x106>
          if (netif == inp) {
 800f268:	693a      	ldr	r2, [r7, #16]
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d006      	beq.n	800f27e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f270:	6938      	ldr	r0, [r7, #16]
 800f272:	f7ff ff5b 	bl	800f12c <ip4_input_accept>
 800f276:	4603      	mov	r3, r0
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d108      	bne.n	800f28e <ip4_input+0x10e>
 800f27c:	e000      	b.n	800f280 <ip4_input+0x100>
            continue;
 800f27e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f280:	693b      	ldr	r3, [r7, #16]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	613b      	str	r3, [r7, #16]
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d1ed      	bne.n	800f268 <ip4_input+0xe8>
 800f28c:	e000      	b.n	800f290 <ip4_input+0x110>
            break;
 800f28e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f290:	4b4b      	ldr	r3, [pc, #300]	; (800f3c0 <ip4_input+0x240>)
 800f292:	691b      	ldr	r3, [r3, #16]
 800f294:	6839      	ldr	r1, [r7, #0]
 800f296:	4618      	mov	r0, r3
 800f298:	f000 f96e 	bl	800f578 <ip4_addr_isbroadcast_u32>
 800f29c:	4603      	mov	r3, r0
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d105      	bne.n	800f2ae <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f2a2:	4b47      	ldr	r3, [pc, #284]	; (800f3c0 <ip4_input+0x240>)
 800f2a4:	691b      	ldr	r3, [r3, #16]
 800f2a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f2aa:	2be0      	cmp	r3, #224	; 0xe0
 800f2ac:	d104      	bne.n	800f2b8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f7f7 ff62 	bl	8007178 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	e07e      	b.n	800f3b6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f2b8:	693b      	ldr	r3, [r7, #16]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d104      	bne.n	800f2c8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f7f7 ff5a 	bl	8007178 <pbuf_free>
    return ERR_OK;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	e076      	b.n	800f3b6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	88db      	ldrh	r3, [r3, #6]
 800f2cc:	b29b      	uxth	r3, r3
 800f2ce:	461a      	mov	r2, r3
 800f2d0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800f2d4:	4013      	ands	r3, r2
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d00b      	beq.n	800f2f2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f000 fc92 	bl	800fc04 <ip4_reass>
 800f2e0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d101      	bne.n	800f2ec <ip4_input+0x16c>
      return ERR_OK;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	e064      	b.n	800f3b6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	685b      	ldr	r3, [r3, #4]
 800f2f0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f2f2:	4a33      	ldr	r2, [pc, #204]	; (800f3c0 <ip4_input+0x240>)
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f2f8:	4a31      	ldr	r2, [pc, #196]	; (800f3c0 <ip4_input+0x240>)
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f2fe:	4a30      	ldr	r2, [pc, #192]	; (800f3c0 <ip4_input+0x240>)
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	f003 030f 	and.w	r3, r3, #15
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	009b      	lsls	r3, r3, #2
 800f310:	b2db      	uxtb	r3, r3
 800f312:	b29a      	uxth	r2, r3
 800f314:	4b2a      	ldr	r3, [pc, #168]	; (800f3c0 <ip4_input+0x240>)
 800f316:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f318:	89fb      	ldrh	r3, [r7, #14]
 800f31a:	4619      	mov	r1, r3
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f7f7 fea5 	bl	800706c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	7a5b      	ldrb	r3, [r3, #9]
 800f326:	2b11      	cmp	r3, #17
 800f328:	d006      	beq.n	800f338 <ip4_input+0x1b8>
 800f32a:	2b11      	cmp	r3, #17
 800f32c:	dc13      	bgt.n	800f356 <ip4_input+0x1d6>
 800f32e:	2b01      	cmp	r3, #1
 800f330:	d00c      	beq.n	800f34c <ip4_input+0x1cc>
 800f332:	2b06      	cmp	r3, #6
 800f334:	d005      	beq.n	800f342 <ip4_input+0x1c2>
 800f336:	e00e      	b.n	800f356 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f338:	6839      	ldr	r1, [r7, #0]
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f7fe fc68 	bl	800dc10 <udp_input>
        break;
 800f340:	e026      	b.n	800f390 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f342:	6839      	ldr	r1, [r7, #0]
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f7fa f84f 	bl	80093e8 <tcp_input>
        break;
 800f34a:	e021      	b.n	800f390 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f34c:	6839      	ldr	r1, [r7, #0]
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f7ff fcee 	bl	800ed30 <icmp_input>
        break;
 800f354:	e01c      	b.n	800f390 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f356:	4b1a      	ldr	r3, [pc, #104]	; (800f3c0 <ip4_input+0x240>)
 800f358:	695b      	ldr	r3, [r3, #20]
 800f35a:	6939      	ldr	r1, [r7, #16]
 800f35c:	4618      	mov	r0, r3
 800f35e:	f000 f90b 	bl	800f578 <ip4_addr_isbroadcast_u32>
 800f362:	4603      	mov	r3, r0
 800f364:	2b00      	cmp	r3, #0
 800f366:	d10f      	bne.n	800f388 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f368:	4b15      	ldr	r3, [pc, #84]	; (800f3c0 <ip4_input+0x240>)
 800f36a:	695b      	ldr	r3, [r3, #20]
 800f36c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f370:	2be0      	cmp	r3, #224	; 0xe0
 800f372:	d009      	beq.n	800f388 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f374:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f378:	4619      	mov	r1, r3
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f7f7 fee9 	bl	8007152 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f380:	2102      	movs	r1, #2
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f7ff fdd8 	bl	800ef38 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f7f7 fef5 	bl	8007178 <pbuf_free>
        break;
 800f38e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f390:	4b0b      	ldr	r3, [pc, #44]	; (800f3c0 <ip4_input+0x240>)
 800f392:	2200      	movs	r2, #0
 800f394:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f396:	4b0a      	ldr	r3, [pc, #40]	; (800f3c0 <ip4_input+0x240>)
 800f398:	2200      	movs	r2, #0
 800f39a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f39c:	4b08      	ldr	r3, [pc, #32]	; (800f3c0 <ip4_input+0x240>)
 800f39e:	2200      	movs	r2, #0
 800f3a0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f3a2:	4b07      	ldr	r3, [pc, #28]	; (800f3c0 <ip4_input+0x240>)
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f3a8:	4b05      	ldr	r3, [pc, #20]	; (800f3c0 <ip4_input+0x240>)
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f3ae:	4b04      	ldr	r3, [pc, #16]	; (800f3c0 <ip4_input+0x240>)
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f3b4:	2300      	movs	r3, #0
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3718      	adds	r7, #24
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}
 800f3be:	bf00      	nop
 800f3c0:	20003290 	.word	0x20003290
 800f3c4:	200067f4 	.word	0x200067f4

0800f3c8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b08a      	sub	sp, #40	; 0x28
 800f3cc:	af04      	add	r7, sp, #16
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	607a      	str	r2, [r7, #4]
 800f3d4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d009      	beq.n	800f3f4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d003      	beq.n	800f3ee <ip4_output_if+0x26>
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d102      	bne.n	800f3f4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f0:	3304      	adds	r3, #4
 800f3f2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f3f4:	78fa      	ldrb	r2, [r7, #3]
 800f3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f8:	9302      	str	r3, [sp, #8]
 800f3fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f3fe:	9301      	str	r3, [sp, #4]
 800f400:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f404:	9300      	str	r3, [sp, #0]
 800f406:	4613      	mov	r3, r2
 800f408:	687a      	ldr	r2, [r7, #4]
 800f40a:	6979      	ldr	r1, [r7, #20]
 800f40c:	68f8      	ldr	r0, [r7, #12]
 800f40e:	f000 f805 	bl	800f41c <ip4_output_if_src>
 800f412:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f414:	4618      	mov	r0, r3
 800f416:	3718      	adds	r7, #24
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b088      	sub	sp, #32
 800f420:	af00      	add	r7, sp, #0
 800f422:	60f8      	str	r0, [r7, #12]
 800f424:	60b9      	str	r1, [r7, #8]
 800f426:	607a      	str	r2, [r7, #4]
 800f428:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	7b9b      	ldrb	r3, [r3, #14]
 800f42e:	2b01      	cmp	r3, #1
 800f430:	d006      	beq.n	800f440 <ip4_output_if_src+0x24>
 800f432:	4b4b      	ldr	r3, [pc, #300]	; (800f560 <ip4_output_if_src+0x144>)
 800f434:	f44f 7255 	mov.w	r2, #852	; 0x354
 800f438:	494a      	ldr	r1, [pc, #296]	; (800f564 <ip4_output_if_src+0x148>)
 800f43a:	484b      	ldr	r0, [pc, #300]	; (800f568 <ip4_output_if_src+0x14c>)
 800f43c:	f001 f856 	bl	80104ec <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d060      	beq.n	800f508 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f446:	2314      	movs	r3, #20
 800f448:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f44a:	2114      	movs	r1, #20
 800f44c:	68f8      	ldr	r0, [r7, #12]
 800f44e:	f7f7 fdfd 	bl	800704c <pbuf_add_header>
 800f452:	4603      	mov	r3, r0
 800f454:	2b00      	cmp	r3, #0
 800f456:	d002      	beq.n	800f45e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f458:	f06f 0301 	mvn.w	r3, #1
 800f45c:	e07c      	b.n	800f558 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	895b      	ldrh	r3, [r3, #10]
 800f468:	2b13      	cmp	r3, #19
 800f46a:	d806      	bhi.n	800f47a <ip4_output_if_src+0x5e>
 800f46c:	4b3c      	ldr	r3, [pc, #240]	; (800f560 <ip4_output_if_src+0x144>)
 800f46e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800f472:	493e      	ldr	r1, [pc, #248]	; (800f56c <ip4_output_if_src+0x150>)
 800f474:	483c      	ldr	r0, [pc, #240]	; (800f568 <ip4_output_if_src+0x14c>)
 800f476:	f001 f839 	bl	80104ec <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f47a:	69fb      	ldr	r3, [r7, #28]
 800f47c:	78fa      	ldrb	r2, [r7, #3]
 800f47e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f480:	69fb      	ldr	r3, [r7, #28]
 800f482:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f486:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681a      	ldr	r2, [r3, #0]
 800f48c:	69fb      	ldr	r3, [r7, #28]
 800f48e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f490:	8b7b      	ldrh	r3, [r7, #26]
 800f492:	089b      	lsrs	r3, r3, #2
 800f494:	b29b      	uxth	r3, r3
 800f496:	b2db      	uxtb	r3, r3
 800f498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f49c:	b2da      	uxtb	r2, r3
 800f49e:	69fb      	ldr	r3, [r7, #28]
 800f4a0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f4a2:	69fb      	ldr	r3, [r7, #28]
 800f4a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f4a8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	891b      	ldrh	r3, [r3, #8]
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7f6 fb86 	bl	8005bc0 <lwip_htons>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	461a      	mov	r2, r3
 800f4b8:	69fb      	ldr	r3, [r7, #28]
 800f4ba:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f4bc:	69fb      	ldr	r3, [r7, #28]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	719a      	strb	r2, [r3, #6]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f4c6:	4b2a      	ldr	r3, [pc, #168]	; (800f570 <ip4_output_if_src+0x154>)
 800f4c8:	881b      	ldrh	r3, [r3, #0]
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7f6 fb78 	bl	8005bc0 <lwip_htons>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	461a      	mov	r2, r3
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f4d8:	4b25      	ldr	r3, [pc, #148]	; (800f570 <ip4_output_if_src+0x154>)
 800f4da:	881b      	ldrh	r3, [r3, #0]
 800f4dc:	3301      	adds	r3, #1
 800f4de:	b29a      	uxth	r2, r3
 800f4e0:	4b23      	ldr	r3, [pc, #140]	; (800f570 <ip4_output_if_src+0x154>)
 800f4e2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d104      	bne.n	800f4f4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f4ea:	4b22      	ldr	r3, [pc, #136]	; (800f574 <ip4_output_if_src+0x158>)
 800f4ec:	681a      	ldr	r2, [r3, #0]
 800f4ee:	69fb      	ldr	r3, [r7, #28]
 800f4f0:	60da      	str	r2, [r3, #12]
 800f4f2:	e003      	b.n	800f4fc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	69fb      	ldr	r3, [r7, #28]
 800f4fa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	2200      	movs	r2, #0
 800f500:	729a      	strb	r2, [r3, #10]
 800f502:	2200      	movs	r2, #0
 800f504:	72da      	strb	r2, [r3, #11]
 800f506:	e00f      	b.n	800f528 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	895b      	ldrh	r3, [r3, #10]
 800f50c:	2b13      	cmp	r3, #19
 800f50e:	d802      	bhi.n	800f516 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f510:	f06f 0301 	mvn.w	r3, #1
 800f514:	e020      	b.n	800f558 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f51c:	69fb      	ldr	r3, [r7, #28]
 800f51e:	691b      	ldr	r3, [r3, #16]
 800f520:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f522:	f107 0314 	add.w	r3, r7, #20
 800f526:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f52a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d00c      	beq.n	800f54a <ip4_output_if_src+0x12e>
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	891a      	ldrh	r2, [r3, #8]
 800f534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f536:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f538:	429a      	cmp	r2, r3
 800f53a:	d906      	bls.n	800f54a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f53c:	687a      	ldr	r2, [r7, #4]
 800f53e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f540:	68f8      	ldr	r0, [r7, #12]
 800f542:	f000 fd53 	bl	800ffec <ip4_frag>
 800f546:	4603      	mov	r3, r0
 800f548:	e006      	b.n	800f558 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f54c:	695b      	ldr	r3, [r3, #20]
 800f54e:	687a      	ldr	r2, [r7, #4]
 800f550:	68f9      	ldr	r1, [r7, #12]
 800f552:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f554:	4798      	blx	r3
 800f556:	4603      	mov	r3, r0
}
 800f558:	4618      	mov	r0, r3
 800f55a:	3720      	adds	r7, #32
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	08014a14 	.word	0x08014a14
 800f564:	08014a48 	.word	0x08014a48
 800f568:	08014a54 	.word	0x08014a54
 800f56c:	08014a7c 	.word	0x08014a7c
 800f570:	20006952 	.word	0x20006952
 800f574:	08014e48 	.word	0x08014e48

0800f578 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f578:	b480      	push	{r7}
 800f57a:	b085      	sub	sp, #20
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
 800f580:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f58c:	d002      	beq.n	800f594 <ip4_addr_isbroadcast_u32+0x1c>
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d101      	bne.n	800f598 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f594:	2301      	movs	r3, #1
 800f596:	e02a      	b.n	800f5ee <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f59e:	f003 0302 	and.w	r3, r3, #2
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d101      	bne.n	800f5aa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	e021      	b.n	800f5ee <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	3304      	adds	r3, #4
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	687a      	ldr	r2, [r7, #4]
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d101      	bne.n	800f5ba <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	e019      	b.n	800f5ee <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f5ba:	68fa      	ldr	r2, [r7, #12]
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	3304      	adds	r3, #4
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	405a      	eors	r2, r3
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	3308      	adds	r3, #8
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	4013      	ands	r3, r2
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d10d      	bne.n	800f5ec <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	3308      	adds	r3, #8
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	43da      	mvns	r2, r3
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	3308      	adds	r3, #8
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d101      	bne.n	800f5ec <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	e000      	b.n	800f5ee <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f5ec:	2300      	movs	r3, #0
  }
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3714      	adds	r7, #20
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr
	...

0800f5fc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b084      	sub	sp, #16
 800f600:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f602:	2300      	movs	r3, #0
 800f604:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f606:	4b12      	ldr	r3, [pc, #72]	; (800f650 <ip_reass_tmr+0x54>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f60c:	e018      	b.n	800f640 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	7fdb      	ldrb	r3, [r3, #31]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d00b      	beq.n	800f62e <ip_reass_tmr+0x32>
      r->timer--;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	7fdb      	ldrb	r3, [r3, #31]
 800f61a:	3b01      	subs	r3, #1
 800f61c:	b2da      	uxtb	r2, r3
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	60fb      	str	r3, [r7, #12]
 800f62c:	e008      	b.n	800f640 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f638:	68b9      	ldr	r1, [r7, #8]
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f000 f80a 	bl	800f654 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d1e3      	bne.n	800f60e <ip_reass_tmr+0x12>
    }
  }
}
 800f646:	bf00      	nop
 800f648:	bf00      	nop
 800f64a:	3710      	adds	r7, #16
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}
 800f650:	20006954 	.word	0x20006954

0800f654 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b088      	sub	sp, #32
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f65e:	2300      	movs	r3, #0
 800f660:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f662:	683a      	ldr	r2, [r7, #0]
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	429a      	cmp	r2, r3
 800f668:	d105      	bne.n	800f676 <ip_reass_free_complete_datagram+0x22>
 800f66a:	4b45      	ldr	r3, [pc, #276]	; (800f780 <ip_reass_free_complete_datagram+0x12c>)
 800f66c:	22ab      	movs	r2, #171	; 0xab
 800f66e:	4945      	ldr	r1, [pc, #276]	; (800f784 <ip_reass_free_complete_datagram+0x130>)
 800f670:	4845      	ldr	r0, [pc, #276]	; (800f788 <ip_reass_free_complete_datagram+0x134>)
 800f672:	f000 ff3b 	bl	80104ec <iprintf>
  if (prev != NULL) {
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d00a      	beq.n	800f692 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	687a      	ldr	r2, [r7, #4]
 800f682:	429a      	cmp	r2, r3
 800f684:	d005      	beq.n	800f692 <ip_reass_free_complete_datagram+0x3e>
 800f686:	4b3e      	ldr	r3, [pc, #248]	; (800f780 <ip_reass_free_complete_datagram+0x12c>)
 800f688:	22ad      	movs	r2, #173	; 0xad
 800f68a:	4940      	ldr	r1, [pc, #256]	; (800f78c <ip_reass_free_complete_datagram+0x138>)
 800f68c:	483e      	ldr	r0, [pc, #248]	; (800f788 <ip_reass_free_complete_datagram+0x134>)
 800f68e:	f000 ff2d 	bl	80104ec <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	685b      	ldr	r3, [r3, #4]
 800f696:	685b      	ldr	r3, [r3, #4]
 800f698:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	889b      	ldrh	r3, [r3, #4]
 800f69e:	b29b      	uxth	r3, r3
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d12a      	bne.n	800f6fa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	685b      	ldr	r3, [r3, #4]
 800f6a8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	681a      	ldr	r2, [r3, #0]
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f6b2:	69bb      	ldr	r3, [r7, #24]
 800f6b4:	6858      	ldr	r0, [r3, #4]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	3308      	adds	r3, #8
 800f6ba:	2214      	movs	r2, #20
 800f6bc:	4619      	mov	r1, r3
 800f6be:	f000 fee5 	bl	801048c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f6c2:	2101      	movs	r1, #1
 800f6c4:	69b8      	ldr	r0, [r7, #24]
 800f6c6:	f7ff fc47 	bl	800ef58 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f6ca:	69b8      	ldr	r0, [r7, #24]
 800f6cc:	f7f7 fddc 	bl	8007288 <pbuf_clen>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f6d4:	8bfa      	ldrh	r2, [r7, #30]
 800f6d6:	8a7b      	ldrh	r3, [r7, #18]
 800f6d8:	4413      	add	r3, r2
 800f6da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6de:	db05      	blt.n	800f6ec <ip_reass_free_complete_datagram+0x98>
 800f6e0:	4b27      	ldr	r3, [pc, #156]	; (800f780 <ip_reass_free_complete_datagram+0x12c>)
 800f6e2:	22bc      	movs	r2, #188	; 0xbc
 800f6e4:	492a      	ldr	r1, [pc, #168]	; (800f790 <ip_reass_free_complete_datagram+0x13c>)
 800f6e6:	4828      	ldr	r0, [pc, #160]	; (800f788 <ip_reass_free_complete_datagram+0x134>)
 800f6e8:	f000 ff00 	bl	80104ec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f6ec:	8bfa      	ldrh	r2, [r7, #30]
 800f6ee:	8a7b      	ldrh	r3, [r7, #18]
 800f6f0:	4413      	add	r3, r2
 800f6f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f6f4:	69b8      	ldr	r0, [r7, #24]
 800f6f6:	f7f7 fd3f 	bl	8007178 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	685b      	ldr	r3, [r3, #4]
 800f6fe:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f700:	e01f      	b.n	800f742 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f702:	69bb      	ldr	r3, [r7, #24]
 800f704:	685b      	ldr	r3, [r3, #4]
 800f706:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f708:	69bb      	ldr	r3, [r7, #24]
 800f70a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f70c:	697b      	ldr	r3, [r7, #20]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f712:	68f8      	ldr	r0, [r7, #12]
 800f714:	f7f7 fdb8 	bl	8007288 <pbuf_clen>
 800f718:	4603      	mov	r3, r0
 800f71a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f71c:	8bfa      	ldrh	r2, [r7, #30]
 800f71e:	8a7b      	ldrh	r3, [r7, #18]
 800f720:	4413      	add	r3, r2
 800f722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f726:	db05      	blt.n	800f734 <ip_reass_free_complete_datagram+0xe0>
 800f728:	4b15      	ldr	r3, [pc, #84]	; (800f780 <ip_reass_free_complete_datagram+0x12c>)
 800f72a:	22cc      	movs	r2, #204	; 0xcc
 800f72c:	4918      	ldr	r1, [pc, #96]	; (800f790 <ip_reass_free_complete_datagram+0x13c>)
 800f72e:	4816      	ldr	r0, [pc, #88]	; (800f788 <ip_reass_free_complete_datagram+0x134>)
 800f730:	f000 fedc 	bl	80104ec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f734:	8bfa      	ldrh	r2, [r7, #30]
 800f736:	8a7b      	ldrh	r3, [r7, #18]
 800f738:	4413      	add	r3, r2
 800f73a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f73c:	68f8      	ldr	r0, [r7, #12]
 800f73e:	f7f7 fd1b 	bl	8007178 <pbuf_free>
  while (p != NULL) {
 800f742:	69bb      	ldr	r3, [r7, #24]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d1dc      	bne.n	800f702 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f748:	6839      	ldr	r1, [r7, #0]
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f000 f8c2 	bl	800f8d4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f750:	4b10      	ldr	r3, [pc, #64]	; (800f794 <ip_reass_free_complete_datagram+0x140>)
 800f752:	881b      	ldrh	r3, [r3, #0]
 800f754:	8bfa      	ldrh	r2, [r7, #30]
 800f756:	429a      	cmp	r2, r3
 800f758:	d905      	bls.n	800f766 <ip_reass_free_complete_datagram+0x112>
 800f75a:	4b09      	ldr	r3, [pc, #36]	; (800f780 <ip_reass_free_complete_datagram+0x12c>)
 800f75c:	22d2      	movs	r2, #210	; 0xd2
 800f75e:	490e      	ldr	r1, [pc, #56]	; (800f798 <ip_reass_free_complete_datagram+0x144>)
 800f760:	4809      	ldr	r0, [pc, #36]	; (800f788 <ip_reass_free_complete_datagram+0x134>)
 800f762:	f000 fec3 	bl	80104ec <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f766:	4b0b      	ldr	r3, [pc, #44]	; (800f794 <ip_reass_free_complete_datagram+0x140>)
 800f768:	881a      	ldrh	r2, [r3, #0]
 800f76a:	8bfb      	ldrh	r3, [r7, #30]
 800f76c:	1ad3      	subs	r3, r2, r3
 800f76e:	b29a      	uxth	r2, r3
 800f770:	4b08      	ldr	r3, [pc, #32]	; (800f794 <ip_reass_free_complete_datagram+0x140>)
 800f772:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f774:	8bfb      	ldrh	r3, [r7, #30]
}
 800f776:	4618      	mov	r0, r3
 800f778:	3720      	adds	r7, #32
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
 800f77e:	bf00      	nop
 800f780:	08014aac 	.word	0x08014aac
 800f784:	08014ae8 	.word	0x08014ae8
 800f788:	08014af4 	.word	0x08014af4
 800f78c:	08014b1c 	.word	0x08014b1c
 800f790:	08014b30 	.word	0x08014b30
 800f794:	20006958 	.word	0x20006958
 800f798:	08014b50 	.word	0x08014b50

0800f79c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b08a      	sub	sp, #40	; 0x28
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
 800f7a4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f7ba:	4b28      	ldr	r3, [pc, #160]	; (800f85c <ip_reass_remove_oldest_datagram+0xc0>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f7c0:	e030      	b.n	800f824 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7c4:	695a      	ldr	r2, [r3, #20]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	68db      	ldr	r3, [r3, #12]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d10c      	bne.n	800f7e8 <ip_reass_remove_oldest_datagram+0x4c>
 800f7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d0:	699a      	ldr	r2, [r3, #24]
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	691b      	ldr	r3, [r3, #16]
 800f7d6:	429a      	cmp	r2, r3
 800f7d8:	d106      	bne.n	800f7e8 <ip_reass_remove_oldest_datagram+0x4c>
 800f7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7dc:	899a      	ldrh	r2, [r3, #12]
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	889b      	ldrh	r3, [r3, #4]
 800f7e2:	b29b      	uxth	r3, r3
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d014      	beq.n	800f812 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f7ee:	6a3b      	ldr	r3, [r7, #32]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d104      	bne.n	800f7fe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f7f8:	69fb      	ldr	r3, [r7, #28]
 800f7fa:	61bb      	str	r3, [r7, #24]
 800f7fc:	e009      	b.n	800f812 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f800:	7fda      	ldrb	r2, [r3, #31]
 800f802:	6a3b      	ldr	r3, [r7, #32]
 800f804:	7fdb      	ldrb	r3, [r3, #31]
 800f806:	429a      	cmp	r2, r3
 800f808:	d803      	bhi.n	800f812 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f80c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f80e:	69fb      	ldr	r3, [r7, #28]
 800f810:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d001      	beq.n	800f81e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f81c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f826:	2b00      	cmp	r3, #0
 800f828:	d1cb      	bne.n	800f7c2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f82a:	6a3b      	ldr	r3, [r7, #32]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d008      	beq.n	800f842 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f830:	69b9      	ldr	r1, [r7, #24]
 800f832:	6a38      	ldr	r0, [r7, #32]
 800f834:	f7ff ff0e 	bl	800f654 <ip_reass_free_complete_datagram>
 800f838:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f83a:	697a      	ldr	r2, [r7, #20]
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	4413      	add	r3, r2
 800f840:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f842:	697a      	ldr	r2, [r7, #20]
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	429a      	cmp	r2, r3
 800f848:	da02      	bge.n	800f850 <ip_reass_remove_oldest_datagram+0xb4>
 800f84a:	693b      	ldr	r3, [r7, #16]
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	dcac      	bgt.n	800f7aa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f850:	697b      	ldr	r3, [r7, #20]
}
 800f852:	4618      	mov	r0, r3
 800f854:	3728      	adds	r7, #40	; 0x28
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}
 800f85a:	bf00      	nop
 800f85c:	20006954 	.word	0x20006954

0800f860 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b084      	sub	sp, #16
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
 800f868:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f86a:	2004      	movs	r0, #4
 800f86c:	f7f6 fe26 	bl	80064bc <memp_malloc>
 800f870:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d110      	bne.n	800f89a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f878:	6839      	ldr	r1, [r7, #0]
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f7ff ff8e 	bl	800f79c <ip_reass_remove_oldest_datagram>
 800f880:	4602      	mov	r2, r0
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	4293      	cmp	r3, r2
 800f886:	dc03      	bgt.n	800f890 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f888:	2004      	movs	r0, #4
 800f88a:	f7f6 fe17 	bl	80064bc <memp_malloc>
 800f88e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d101      	bne.n	800f89a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f896:	2300      	movs	r3, #0
 800f898:	e016      	b.n	800f8c8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f89a:	2220      	movs	r2, #32
 800f89c:	2100      	movs	r1, #0
 800f89e:	68f8      	ldr	r0, [r7, #12]
 800f8a0:	f000 fe1c 	bl	80104dc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	220f      	movs	r2, #15
 800f8a8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f8aa:	4b09      	ldr	r3, [pc, #36]	; (800f8d0 <ip_reass_enqueue_new_datagram+0x70>)
 800f8ac:	681a      	ldr	r2, [r3, #0]
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f8b2:	4a07      	ldr	r2, [pc, #28]	; (800f8d0 <ip_reass_enqueue_new_datagram+0x70>)
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	3308      	adds	r3, #8
 800f8bc:	2214      	movs	r2, #20
 800f8be:	6879      	ldr	r1, [r7, #4]
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f000 fde3 	bl	801048c <memcpy>
  return ipr;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3710      	adds	r7, #16
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}
 800f8d0:	20006954 	.word	0x20006954

0800f8d4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b082      	sub	sp, #8
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
 800f8dc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f8de:	4b10      	ldr	r3, [pc, #64]	; (800f920 <ip_reass_dequeue_datagram+0x4c>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	687a      	ldr	r2, [r7, #4]
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d104      	bne.n	800f8f2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	4a0c      	ldr	r2, [pc, #48]	; (800f920 <ip_reass_dequeue_datagram+0x4c>)
 800f8ee:	6013      	str	r3, [r2, #0]
 800f8f0:	e00d      	b.n	800f90e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d106      	bne.n	800f906 <ip_reass_dequeue_datagram+0x32>
 800f8f8:	4b0a      	ldr	r3, [pc, #40]	; (800f924 <ip_reass_dequeue_datagram+0x50>)
 800f8fa:	f240 1245 	movw	r2, #325	; 0x145
 800f8fe:	490a      	ldr	r1, [pc, #40]	; (800f928 <ip_reass_dequeue_datagram+0x54>)
 800f900:	480a      	ldr	r0, [pc, #40]	; (800f92c <ip_reass_dequeue_datagram+0x58>)
 800f902:	f000 fdf3 	bl	80104ec <iprintf>
    prev->next = ipr->next;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681a      	ldr	r2, [r3, #0]
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f90e:	6879      	ldr	r1, [r7, #4]
 800f910:	2004      	movs	r0, #4
 800f912:	f7f6 fe1f 	bl	8006554 <memp_free>
}
 800f916:	bf00      	nop
 800f918:	3708      	adds	r7, #8
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}
 800f91e:	bf00      	nop
 800f920:	20006954 	.word	0x20006954
 800f924:	08014aac 	.word	0x08014aac
 800f928:	08014b74 	.word	0x08014b74
 800f92c:	08014af4 	.word	0x08014af4

0800f930 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b08c      	sub	sp, #48	; 0x30
 800f934:	af00      	add	r7, sp, #0
 800f936:	60f8      	str	r0, [r7, #12]
 800f938:	60b9      	str	r1, [r7, #8]
 800f93a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f93c:	2300      	movs	r3, #0
 800f93e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f940:	2301      	movs	r3, #1
 800f942:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	685b      	ldr	r3, [r3, #4]
 800f948:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f94a:	69fb      	ldr	r3, [r7, #28]
 800f94c:	885b      	ldrh	r3, [r3, #2]
 800f94e:	b29b      	uxth	r3, r3
 800f950:	4618      	mov	r0, r3
 800f952:	f7f6 f935 	bl	8005bc0 <lwip_htons>
 800f956:	4603      	mov	r3, r0
 800f958:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f95a:	69fb      	ldr	r3, [r7, #28]
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	f003 030f 	and.w	r3, r3, #15
 800f962:	b2db      	uxtb	r3, r3
 800f964:	009b      	lsls	r3, r3, #2
 800f966:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f968:	7e7b      	ldrb	r3, [r7, #25]
 800f96a:	b29b      	uxth	r3, r3
 800f96c:	8b7a      	ldrh	r2, [r7, #26]
 800f96e:	429a      	cmp	r2, r3
 800f970:	d202      	bcs.n	800f978 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f972:	f04f 33ff 	mov.w	r3, #4294967295
 800f976:	e135      	b.n	800fbe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f978:	7e7b      	ldrb	r3, [r7, #25]
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	8b7a      	ldrh	r2, [r7, #26]
 800f97e:	1ad3      	subs	r3, r2, r3
 800f980:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f982:	69fb      	ldr	r3, [r7, #28]
 800f984:	88db      	ldrh	r3, [r3, #6]
 800f986:	b29b      	uxth	r3, r3
 800f988:	4618      	mov	r0, r3
 800f98a:	f7f6 f919 	bl	8005bc0 <lwip_htons>
 800f98e:	4603      	mov	r3, r0
 800f990:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f994:	b29b      	uxth	r3, r3
 800f996:	00db      	lsls	r3, r3, #3
 800f998:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	685b      	ldr	r3, [r3, #4]
 800f99e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	701a      	strb	r2, [r3, #0]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	705a      	strb	r2, [r3, #1]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	709a      	strb	r2, [r3, #2]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b4:	8afa      	ldrh	r2, [r7, #22]
 800f9b6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f9b8:	8afa      	ldrh	r2, [r7, #22]
 800f9ba:	8b7b      	ldrh	r3, [r7, #26]
 800f9bc:	4413      	add	r3, r2
 800f9be:	b29a      	uxth	r2, r3
 800f9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c6:	88db      	ldrh	r3, [r3, #6]
 800f9c8:	b29b      	uxth	r3, r3
 800f9ca:	8afa      	ldrh	r2, [r7, #22]
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d902      	bls.n	800f9d6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f9d4:	e106      	b.n	800fbe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	685b      	ldr	r3, [r3, #4]
 800f9da:	627b      	str	r3, [r7, #36]	; 0x24
 800f9dc:	e068      	b.n	800fab0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e0:	685b      	ldr	r3, [r3, #4]
 800f9e2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e6:	889b      	ldrh	r3, [r3, #4]
 800f9e8:	b29a      	uxth	r2, r3
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	889b      	ldrh	r3, [r3, #4]
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	d235      	bcs.n	800fa60 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9f8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d020      	beq.n	800fa42 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800fa00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa02:	889b      	ldrh	r3, [r3, #4]
 800fa04:	b29a      	uxth	r2, r3
 800fa06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa08:	88db      	ldrh	r3, [r3, #6]
 800fa0a:	b29b      	uxth	r3, r3
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d307      	bcc.n	800fa20 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800fa10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa12:	88db      	ldrh	r3, [r3, #6]
 800fa14:	b29a      	uxth	r2, r3
 800fa16:	693b      	ldr	r3, [r7, #16]
 800fa18:	889b      	ldrh	r3, [r3, #4]
 800fa1a:	b29b      	uxth	r3, r3
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d902      	bls.n	800fa26 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fa20:	f04f 33ff 	mov.w	r3, #4294967295
 800fa24:	e0de      	b.n	800fbe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800fa26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa28:	68ba      	ldr	r2, [r7, #8]
 800fa2a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800fa2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa2e:	88db      	ldrh	r3, [r3, #6]
 800fa30:	b29a      	uxth	r2, r3
 800fa32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa34:	889b      	ldrh	r3, [r3, #4]
 800fa36:	b29b      	uxth	r3, r3
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	d03d      	beq.n	800fab8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800fa40:	e03a      	b.n	800fab8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800fa42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa44:	88db      	ldrh	r3, [r3, #6]
 800fa46:	b29a      	uxth	r2, r3
 800fa48:	693b      	ldr	r3, [r7, #16]
 800fa4a:	889b      	ldrh	r3, [r3, #4]
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	d902      	bls.n	800fa58 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fa52:	f04f 33ff 	mov.w	r3, #4294967295
 800fa56:	e0c5      	b.n	800fbe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	68ba      	ldr	r2, [r7, #8]
 800fa5c:	605a      	str	r2, [r3, #4]
      break;
 800fa5e:	e02b      	b.n	800fab8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800fa60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa62:	889b      	ldrh	r3, [r3, #4]
 800fa64:	b29a      	uxth	r2, r3
 800fa66:	693b      	ldr	r3, [r7, #16]
 800fa68:	889b      	ldrh	r3, [r3, #4]
 800fa6a:	b29b      	uxth	r3, r3
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	d102      	bne.n	800fa76 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fa70:	f04f 33ff 	mov.w	r3, #4294967295
 800fa74:	e0b6      	b.n	800fbe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800fa76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa78:	889b      	ldrh	r3, [r3, #4]
 800fa7a:	b29a      	uxth	r2, r3
 800fa7c:	693b      	ldr	r3, [r7, #16]
 800fa7e:	88db      	ldrh	r3, [r3, #6]
 800fa80:	b29b      	uxth	r3, r3
 800fa82:	429a      	cmp	r2, r3
 800fa84:	d202      	bcs.n	800fa8c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fa86:	f04f 33ff 	mov.w	r3, #4294967295
 800fa8a:	e0ab      	b.n	800fbe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800fa8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d009      	beq.n	800faa6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800fa92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa94:	88db      	ldrh	r3, [r3, #6]
 800fa96:	b29a      	uxth	r2, r3
 800fa98:	693b      	ldr	r3, [r7, #16]
 800fa9a:	889b      	ldrh	r3, [r3, #4]
 800fa9c:	b29b      	uxth	r3, r3
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d001      	beq.n	800faa6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800faa2:	2300      	movs	r3, #0
 800faa4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800faa6:	693b      	ldr	r3, [r7, #16]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800fab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d193      	bne.n	800f9de <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800fab6:	e000      	b.n	800faba <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800fab8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800faba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d12d      	bne.n	800fb1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800fac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d01c      	beq.n	800fb00 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800fac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fac8:	88db      	ldrh	r3, [r3, #6]
 800faca:	b29a      	uxth	r2, r3
 800facc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800face:	889b      	ldrh	r3, [r3, #4]
 800fad0:	b29b      	uxth	r3, r3
 800fad2:	429a      	cmp	r2, r3
 800fad4:	d906      	bls.n	800fae4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800fad6:	4b45      	ldr	r3, [pc, #276]	; (800fbec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fad8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800fadc:	4944      	ldr	r1, [pc, #272]	; (800fbf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800fade:	4845      	ldr	r0, [pc, #276]	; (800fbf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fae0:	f000 fd04 	bl	80104ec <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800fae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae6:	68ba      	ldr	r2, [r7, #8]
 800fae8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800faea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faec:	88db      	ldrh	r3, [r3, #6]
 800faee:	b29a      	uxth	r2, r3
 800faf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf2:	889b      	ldrh	r3, [r3, #4]
 800faf4:	b29b      	uxth	r3, r3
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d010      	beq.n	800fb1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800fafa:	2300      	movs	r3, #0
 800fafc:	623b      	str	r3, [r7, #32]
 800fafe:	e00d      	b.n	800fb1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	685b      	ldr	r3, [r3, #4]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d006      	beq.n	800fb16 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800fb08:	4b38      	ldr	r3, [pc, #224]	; (800fbec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fb0a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800fb0e:	493a      	ldr	r1, [pc, #232]	; (800fbf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800fb10:	4838      	ldr	r0, [pc, #224]	; (800fbf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fb12:	f000 fceb 	bl	80104ec <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	68ba      	ldr	r2, [r7, #8]
 800fb1a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d105      	bne.n	800fb2e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	7f9b      	ldrb	r3, [r3, #30]
 800fb26:	f003 0301 	and.w	r3, r3, #1
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d059      	beq.n	800fbe2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800fb2e:	6a3b      	ldr	r3, [r7, #32]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d04f      	beq.n	800fbd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	685b      	ldr	r3, [r3, #4]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d006      	beq.n	800fb4a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	685b      	ldr	r3, [r3, #4]
 800fb40:	685b      	ldr	r3, [r3, #4]
 800fb42:	889b      	ldrh	r3, [r3, #4]
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d002      	beq.n	800fb50 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	623b      	str	r3, [r7, #32]
 800fb4e:	e041      	b.n	800fbd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800fb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb52:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800fb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800fb5a:	e012      	b.n	800fb82 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800fb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb5e:	685b      	ldr	r3, [r3, #4]
 800fb60:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800fb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb64:	88db      	ldrh	r3, [r3, #6]
 800fb66:	b29a      	uxth	r2, r3
 800fb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb6a:	889b      	ldrh	r3, [r3, #4]
 800fb6c:	b29b      	uxth	r3, r3
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	d002      	beq.n	800fb78 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800fb72:	2300      	movs	r3, #0
 800fb74:	623b      	str	r3, [r7, #32]
            break;
 800fb76:	e007      	b.n	800fb88 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800fb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb7a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800fb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800fb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d1e9      	bne.n	800fb5c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800fb88:	6a3b      	ldr	r3, [r7, #32]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d022      	beq.n	800fbd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	685b      	ldr	r3, [r3, #4]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d106      	bne.n	800fba4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800fb96:	4b15      	ldr	r3, [pc, #84]	; (800fbec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fb98:	f240 12df 	movw	r2, #479	; 0x1df
 800fb9c:	4917      	ldr	r1, [pc, #92]	; (800fbfc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fb9e:	4815      	ldr	r0, [pc, #84]	; (800fbf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fba0:	f000 fca4 	bl	80104ec <iprintf>
          LWIP_ASSERT("sanity check",
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	685b      	ldr	r3, [r3, #4]
 800fba8:	685b      	ldr	r3, [r3, #4]
 800fbaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d106      	bne.n	800fbbe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800fbb0:	4b0e      	ldr	r3, [pc, #56]	; (800fbec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fbb2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800fbb6:	4911      	ldr	r1, [pc, #68]	; (800fbfc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fbb8:	480e      	ldr	r0, [pc, #56]	; (800fbf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fbba:	f000 fc97 	bl	80104ec <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800fbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d006      	beq.n	800fbd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800fbc6:	4b09      	ldr	r3, [pc, #36]	; (800fbec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fbc8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800fbcc:	490c      	ldr	r1, [pc, #48]	; (800fc00 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800fbce:	4809      	ldr	r0, [pc, #36]	; (800fbf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fbd0:	f000 fc8c 	bl	80104ec <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800fbd4:	6a3b      	ldr	r3, [r7, #32]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	bf14      	ite	ne
 800fbda:	2301      	movne	r3, #1
 800fbdc:	2300      	moveq	r3, #0
 800fbde:	b2db      	uxtb	r3, r3
 800fbe0:	e000      	b.n	800fbe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800fbe2:	2300      	movs	r3, #0
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3730      	adds	r7, #48	; 0x30
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}
 800fbec:	08014aac 	.word	0x08014aac
 800fbf0:	08014b90 	.word	0x08014b90
 800fbf4:	08014af4 	.word	0x08014af4
 800fbf8:	08014bb0 	.word	0x08014bb0
 800fbfc:	08014be8 	.word	0x08014be8
 800fc00:	08014bf8 	.word	0x08014bf8

0800fc04 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b08e      	sub	sp, #56	; 0x38
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	685b      	ldr	r3, [r3, #4]
 800fc10:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800fc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc14:	781b      	ldrb	r3, [r3, #0]
 800fc16:	f003 030f 	and.w	r3, r3, #15
 800fc1a:	b2db      	uxtb	r3, r3
 800fc1c:	009b      	lsls	r3, r3, #2
 800fc1e:	b2db      	uxtb	r3, r3
 800fc20:	2b14      	cmp	r3, #20
 800fc22:	f040 8171 	bne.w	800ff08 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800fc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc28:	88db      	ldrh	r3, [r3, #6]
 800fc2a:	b29b      	uxth	r3, r3
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7f5 ffc7 	bl	8005bc0 <lwip_htons>
 800fc32:	4603      	mov	r3, r0
 800fc34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fc38:	b29b      	uxth	r3, r3
 800fc3a:	00db      	lsls	r3, r3, #3
 800fc3c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc40:	885b      	ldrh	r3, [r3, #2]
 800fc42:	b29b      	uxth	r3, r3
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7f5 ffbb 	bl	8005bc0 <lwip_htons>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800fc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc50:	781b      	ldrb	r3, [r3, #0]
 800fc52:	f003 030f 	and.w	r3, r3, #15
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	009b      	lsls	r3, r3, #2
 800fc5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800fc5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fc66:	429a      	cmp	r2, r3
 800fc68:	f0c0 8150 	bcc.w	800ff0c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800fc6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fc70:	b29b      	uxth	r3, r3
 800fc72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fc74:	1ad3      	subs	r3, r2, r3
 800fc76:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f7f7 fb05 	bl	8007288 <pbuf_clen>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800fc82:	4b8c      	ldr	r3, [pc, #560]	; (800feb4 <ip4_reass+0x2b0>)
 800fc84:	881b      	ldrh	r3, [r3, #0]
 800fc86:	461a      	mov	r2, r3
 800fc88:	8c3b      	ldrh	r3, [r7, #32]
 800fc8a:	4413      	add	r3, r2
 800fc8c:	2b0a      	cmp	r3, #10
 800fc8e:	dd10      	ble.n	800fcb2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fc90:	8c3b      	ldrh	r3, [r7, #32]
 800fc92:	4619      	mov	r1, r3
 800fc94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc96:	f7ff fd81 	bl	800f79c <ip_reass_remove_oldest_datagram>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	f000 8137 	beq.w	800ff10 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800fca2:	4b84      	ldr	r3, [pc, #528]	; (800feb4 <ip4_reass+0x2b0>)
 800fca4:	881b      	ldrh	r3, [r3, #0]
 800fca6:	461a      	mov	r2, r3
 800fca8:	8c3b      	ldrh	r3, [r7, #32]
 800fcaa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fcac:	2b0a      	cmp	r3, #10
 800fcae:	f300 812f 	bgt.w	800ff10 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fcb2:	4b81      	ldr	r3, [pc, #516]	; (800feb8 <ip4_reass+0x2b4>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	633b      	str	r3, [r7, #48]	; 0x30
 800fcb8:	e015      	b.n	800fce6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800fcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcbc:	695a      	ldr	r2, [r3, #20]
 800fcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc0:	68db      	ldr	r3, [r3, #12]
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	d10c      	bne.n	800fce0 <ip4_reass+0xdc>
 800fcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc8:	699a      	ldr	r2, [r3, #24]
 800fcca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fccc:	691b      	ldr	r3, [r3, #16]
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d106      	bne.n	800fce0 <ip4_reass+0xdc>
 800fcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd4:	899a      	ldrh	r2, [r3, #12]
 800fcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd8:	889b      	ldrh	r3, [r3, #4]
 800fcda:	b29b      	uxth	r3, r3
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	d006      	beq.n	800fcee <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	633b      	str	r3, [r7, #48]	; 0x30
 800fce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d1e6      	bne.n	800fcba <ip4_reass+0xb6>
 800fcec:	e000      	b.n	800fcf0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800fcee:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800fcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d109      	bne.n	800fd0a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800fcf6:	8c3b      	ldrh	r3, [r7, #32]
 800fcf8:	4619      	mov	r1, r3
 800fcfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcfc:	f7ff fdb0 	bl	800f860 <ip_reass_enqueue_new_datagram>
 800fd00:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800fd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d11c      	bne.n	800fd42 <ip4_reass+0x13e>
      goto nullreturn;
 800fd08:	e105      	b.n	800ff16 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd0c:	88db      	ldrh	r3, [r3, #6]
 800fd0e:	b29b      	uxth	r3, r3
 800fd10:	4618      	mov	r0, r3
 800fd12:	f7f5 ff55 	bl	8005bc0 <lwip_htons>
 800fd16:	4603      	mov	r3, r0
 800fd18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d110      	bne.n	800fd42 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800fd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd22:	89db      	ldrh	r3, [r3, #14]
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7f5 ff4b 	bl	8005bc0 <lwip_htons>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d006      	beq.n	800fd42 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800fd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd36:	3308      	adds	r3, #8
 800fd38:	2214      	movs	r2, #20
 800fd3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f000 fba5 	bl	801048c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800fd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd44:	88db      	ldrh	r3, [r3, #6]
 800fd46:	b29b      	uxth	r3, r3
 800fd48:	f003 0320 	and.w	r3, r3, #32
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	bf0c      	ite	eq
 800fd50:	2301      	moveq	r3, #1
 800fd52:	2300      	movne	r3, #0
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800fd58:	69fb      	ldr	r3, [r7, #28]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d00e      	beq.n	800fd7c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800fd5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fd60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd62:	4413      	add	r3, r2
 800fd64:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800fd66:	8b7a      	ldrh	r2, [r7, #26]
 800fd68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	f0c0 80a0 	bcc.w	800feb0 <ip4_reass+0x2ac>
 800fd70:	8b7b      	ldrh	r3, [r7, #26]
 800fd72:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800fd76:	4293      	cmp	r3, r2
 800fd78:	f200 809a 	bhi.w	800feb0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800fd7c:	69fa      	ldr	r2, [r7, #28]
 800fd7e:	6879      	ldr	r1, [r7, #4]
 800fd80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd82:	f7ff fdd5 	bl	800f930 <ip_reass_chain_frag_into_datagram_and_validate>
 800fd86:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd8e:	f000 809b 	beq.w	800fec8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800fd92:	4b48      	ldr	r3, [pc, #288]	; (800feb4 <ip4_reass+0x2b0>)
 800fd94:	881a      	ldrh	r2, [r3, #0]
 800fd96:	8c3b      	ldrh	r3, [r7, #32]
 800fd98:	4413      	add	r3, r2
 800fd9a:	b29a      	uxth	r2, r3
 800fd9c:	4b45      	ldr	r3, [pc, #276]	; (800feb4 <ip4_reass+0x2b0>)
 800fd9e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800fda0:	69fb      	ldr	r3, [r7, #28]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d00d      	beq.n	800fdc2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800fda6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fda8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fdaa:	4413      	add	r3, r2
 800fdac:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800fdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb0:	8a7a      	ldrh	r2, [r7, #18]
 800fdb2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800fdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb6:	7f9b      	ldrb	r3, [r3, #30]
 800fdb8:	f043 0301 	orr.w	r3, r3, #1
 800fdbc:	b2da      	uxtb	r2, r3
 800fdbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	2b01      	cmp	r3, #1
 800fdc6:	d171      	bne.n	800feac <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800fdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdca:	8b9b      	ldrh	r3, [r3, #28]
 800fdcc:	3314      	adds	r3, #20
 800fdce:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800fdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd2:	685b      	ldr	r3, [r3, #4]
 800fdd4:	685b      	ldr	r3, [r3, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800fdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fddc:	685b      	ldr	r3, [r3, #4]
 800fdde:	685b      	ldr	r3, [r3, #4]
 800fde0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800fde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde4:	3308      	adds	r3, #8
 800fde6:	2214      	movs	r2, #20
 800fde8:	4619      	mov	r1, r3
 800fdea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdec:	f000 fb4e 	bl	801048c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800fdf0:	8a3b      	ldrh	r3, [r7, #16]
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7f5 fee4 	bl	8005bc0 <lwip_htons>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	461a      	mov	r2, r3
 800fdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdfe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800fe00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe02:	2200      	movs	r2, #0
 800fe04:	719a      	strb	r2, [r3, #6]
 800fe06:	2200      	movs	r2, #0
 800fe08:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800fe0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	729a      	strb	r2, [r3, #10]
 800fe10:	2200      	movs	r2, #0
 800fe12:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800fe14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe16:	685b      	ldr	r3, [r3, #4]
 800fe18:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800fe1a:	e00d      	b.n	800fe38 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800fe1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800fe22:	2114      	movs	r1, #20
 800fe24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe26:	f7f7 f921 	bl	800706c <pbuf_remove_header>
      pbuf_cat(p, r);
 800fe2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f7f7 fa65 	bl	80072fc <pbuf_cat>
      r = iprh->next_pbuf;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800fe38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d1ee      	bne.n	800fe1c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800fe3e:	4b1e      	ldr	r3, [pc, #120]	; (800feb8 <ip4_reass+0x2b4>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe44:	429a      	cmp	r2, r3
 800fe46:	d102      	bne.n	800fe4e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800fe48:	2300      	movs	r3, #0
 800fe4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe4c:	e010      	b.n	800fe70 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fe4e:	4b1a      	ldr	r3, [pc, #104]	; (800feb8 <ip4_reass+0x2b4>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe54:	e007      	b.n	800fe66 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800fe56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d006      	beq.n	800fe6e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fe60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d1f4      	bne.n	800fe56 <ip4_reass+0x252>
 800fe6c:	e000      	b.n	800fe70 <ip4_reass+0x26c>
          break;
 800fe6e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800fe70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe74:	f7ff fd2e 	bl	800f8d4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f7f7 fa05 	bl	8007288 <pbuf_clen>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800fe82:	4b0c      	ldr	r3, [pc, #48]	; (800feb4 <ip4_reass+0x2b0>)
 800fe84:	881b      	ldrh	r3, [r3, #0]
 800fe86:	8c3a      	ldrh	r2, [r7, #32]
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	d906      	bls.n	800fe9a <ip4_reass+0x296>
 800fe8c:	4b0b      	ldr	r3, [pc, #44]	; (800febc <ip4_reass+0x2b8>)
 800fe8e:	f240 229b 	movw	r2, #667	; 0x29b
 800fe92:	490b      	ldr	r1, [pc, #44]	; (800fec0 <ip4_reass+0x2bc>)
 800fe94:	480b      	ldr	r0, [pc, #44]	; (800fec4 <ip4_reass+0x2c0>)
 800fe96:	f000 fb29 	bl	80104ec <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800fe9a:	4b06      	ldr	r3, [pc, #24]	; (800feb4 <ip4_reass+0x2b0>)
 800fe9c:	881a      	ldrh	r2, [r3, #0]
 800fe9e:	8c3b      	ldrh	r3, [r7, #32]
 800fea0:	1ad3      	subs	r3, r2, r3
 800fea2:	b29a      	uxth	r2, r3
 800fea4:	4b03      	ldr	r3, [pc, #12]	; (800feb4 <ip4_reass+0x2b0>)
 800fea6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	e038      	b.n	800ff1e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800feac:	2300      	movs	r3, #0
 800feae:	e036      	b.n	800ff1e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800feb0:	bf00      	nop
 800feb2:	e00a      	b.n	800feca <ip4_reass+0x2c6>
 800feb4:	20006958 	.word	0x20006958
 800feb8:	20006954 	.word	0x20006954
 800febc:	08014aac 	.word	0x08014aac
 800fec0:	08014c1c 	.word	0x08014c1c
 800fec4:	08014af4 	.word	0x08014af4
    goto nullreturn_ipr;
 800fec8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800feca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d106      	bne.n	800fede <ip4_reass+0x2da>
 800fed0:	4b15      	ldr	r3, [pc, #84]	; (800ff28 <ip4_reass+0x324>)
 800fed2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800fed6:	4915      	ldr	r1, [pc, #84]	; (800ff2c <ip4_reass+0x328>)
 800fed8:	4815      	ldr	r0, [pc, #84]	; (800ff30 <ip4_reass+0x32c>)
 800feda:	f000 fb07 	bl	80104ec <iprintf>
  if (ipr->p == NULL) {
 800fede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee0:	685b      	ldr	r3, [r3, #4]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d116      	bne.n	800ff14 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800fee6:	4b13      	ldr	r3, [pc, #76]	; (800ff34 <ip4_reass+0x330>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800feec:	429a      	cmp	r2, r3
 800feee:	d006      	beq.n	800fefe <ip4_reass+0x2fa>
 800fef0:	4b0d      	ldr	r3, [pc, #52]	; (800ff28 <ip4_reass+0x324>)
 800fef2:	f240 22ab 	movw	r2, #683	; 0x2ab
 800fef6:	4910      	ldr	r1, [pc, #64]	; (800ff38 <ip4_reass+0x334>)
 800fef8:	480d      	ldr	r0, [pc, #52]	; (800ff30 <ip4_reass+0x32c>)
 800fefa:	f000 faf7 	bl	80104ec <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800fefe:	2100      	movs	r1, #0
 800ff00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff02:	f7ff fce7 	bl	800f8d4 <ip_reass_dequeue_datagram>
 800ff06:	e006      	b.n	800ff16 <ip4_reass+0x312>
    goto nullreturn;
 800ff08:	bf00      	nop
 800ff0a:	e004      	b.n	800ff16 <ip4_reass+0x312>
    goto nullreturn;
 800ff0c:	bf00      	nop
 800ff0e:	e002      	b.n	800ff16 <ip4_reass+0x312>
      goto nullreturn;
 800ff10:	bf00      	nop
 800ff12:	e000      	b.n	800ff16 <ip4_reass+0x312>
  }

nullreturn:
 800ff14:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f7f7 f92e 	bl	8007178 <pbuf_free>
  return NULL;
 800ff1c:	2300      	movs	r3, #0
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3738      	adds	r7, #56	; 0x38
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}
 800ff26:	bf00      	nop
 800ff28:	08014aac 	.word	0x08014aac
 800ff2c:	08014c38 	.word	0x08014c38
 800ff30:	08014af4 	.word	0x08014af4
 800ff34:	20006954 	.word	0x20006954
 800ff38:	08014c44 	.word	0x08014c44

0800ff3c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ff40:	2005      	movs	r0, #5
 800ff42:	f7f6 fabb 	bl	80064bc <memp_malloc>
 800ff46:	4603      	mov	r3, r0
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	bd80      	pop	{r7, pc}

0800ff4c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d106      	bne.n	800ff68 <ip_frag_free_pbuf_custom_ref+0x1c>
 800ff5a:	4b07      	ldr	r3, [pc, #28]	; (800ff78 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ff5c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800ff60:	4906      	ldr	r1, [pc, #24]	; (800ff7c <ip_frag_free_pbuf_custom_ref+0x30>)
 800ff62:	4807      	ldr	r0, [pc, #28]	; (800ff80 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ff64:	f000 fac2 	bl	80104ec <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ff68:	6879      	ldr	r1, [r7, #4]
 800ff6a:	2005      	movs	r0, #5
 800ff6c:	f7f6 faf2 	bl	8006554 <memp_free>
}
 800ff70:	bf00      	nop
 800ff72:	3708      	adds	r7, #8
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}
 800ff78:	08014aac 	.word	0x08014aac
 800ff7c:	08014c64 	.word	0x08014c64
 800ff80:	08014af4 	.word	0x08014af4

0800ff84 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b084      	sub	sp, #16
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d106      	bne.n	800ffa4 <ipfrag_free_pbuf_custom+0x20>
 800ff96:	4b11      	ldr	r3, [pc, #68]	; (800ffdc <ipfrag_free_pbuf_custom+0x58>)
 800ff98:	f240 22ce 	movw	r2, #718	; 0x2ce
 800ff9c:	4910      	ldr	r1, [pc, #64]	; (800ffe0 <ipfrag_free_pbuf_custom+0x5c>)
 800ff9e:	4811      	ldr	r0, [pc, #68]	; (800ffe4 <ipfrag_free_pbuf_custom+0x60>)
 800ffa0:	f000 faa4 	bl	80104ec <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ffa4:	68fa      	ldr	r2, [r7, #12]
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d006      	beq.n	800ffba <ipfrag_free_pbuf_custom+0x36>
 800ffac:	4b0b      	ldr	r3, [pc, #44]	; (800ffdc <ipfrag_free_pbuf_custom+0x58>)
 800ffae:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ffb2:	490d      	ldr	r1, [pc, #52]	; (800ffe8 <ipfrag_free_pbuf_custom+0x64>)
 800ffb4:	480b      	ldr	r0, [pc, #44]	; (800ffe4 <ipfrag_free_pbuf_custom+0x60>)
 800ffb6:	f000 fa99 	bl	80104ec <iprintf>
  if (pcr->original != NULL) {
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	695b      	ldr	r3, [r3, #20]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d004      	beq.n	800ffcc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	695b      	ldr	r3, [r3, #20]
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7f7 f8d6 	bl	8007178 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ffcc:	68f8      	ldr	r0, [r7, #12]
 800ffce:	f7ff ffbd 	bl	800ff4c <ip_frag_free_pbuf_custom_ref>
}
 800ffd2:	bf00      	nop
 800ffd4:	3710      	adds	r7, #16
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bd80      	pop	{r7, pc}
 800ffda:	bf00      	nop
 800ffdc:	08014aac 	.word	0x08014aac
 800ffe0:	08014c70 	.word	0x08014c70
 800ffe4:	08014af4 	.word	0x08014af4
 800ffe8:	08014c7c 	.word	0x08014c7c

0800ffec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b094      	sub	sp, #80	; 0x50
 800fff0:	af02      	add	r7, sp, #8
 800fff2:	60f8      	str	r0, [r7, #12]
 800fff4:	60b9      	str	r1, [r7, #8]
 800fff6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800fff8:	2300      	movs	r3, #0
 800fffa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800fffe:	68bb      	ldr	r3, [r7, #8]
 8010000:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010002:	3b14      	subs	r3, #20
 8010004:	2b00      	cmp	r3, #0
 8010006:	da00      	bge.n	801000a <ip4_frag+0x1e>
 8010008:	3307      	adds	r3, #7
 801000a:	10db      	asrs	r3, r3, #3
 801000c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801000e:	2314      	movs	r3, #20
 8010010:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	685b      	ldr	r3, [r3, #4]
 8010016:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801001a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801001c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801001e:	781b      	ldrb	r3, [r3, #0]
 8010020:	f003 030f 	and.w	r3, r3, #15
 8010024:	b2db      	uxtb	r3, r3
 8010026:	009b      	lsls	r3, r3, #2
 8010028:	b2db      	uxtb	r3, r3
 801002a:	2b14      	cmp	r3, #20
 801002c:	d002      	beq.n	8010034 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801002e:	f06f 0305 	mvn.w	r3, #5
 8010032:	e110      	b.n	8010256 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	895b      	ldrh	r3, [r3, #10]
 8010038:	2b13      	cmp	r3, #19
 801003a:	d809      	bhi.n	8010050 <ip4_frag+0x64>
 801003c:	4b88      	ldr	r3, [pc, #544]	; (8010260 <ip4_frag+0x274>)
 801003e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010042:	4988      	ldr	r1, [pc, #544]	; (8010264 <ip4_frag+0x278>)
 8010044:	4888      	ldr	r0, [pc, #544]	; (8010268 <ip4_frag+0x27c>)
 8010046:	f000 fa51 	bl	80104ec <iprintf>
 801004a:	f06f 0305 	mvn.w	r3, #5
 801004e:	e102      	b.n	8010256 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010052:	88db      	ldrh	r3, [r3, #6]
 8010054:	b29b      	uxth	r3, r3
 8010056:	4618      	mov	r0, r3
 8010058:	f7f5 fdb2 	bl	8005bc0 <lwip_htons>
 801005c:	4603      	mov	r3, r0
 801005e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010060:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010062:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010066:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801006a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801006c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010070:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	891b      	ldrh	r3, [r3, #8]
 8010076:	3b14      	subs	r3, #20
 8010078:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801007c:	e0e1      	b.n	8010242 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801007e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010080:	00db      	lsls	r3, r3, #3
 8010082:	b29b      	uxth	r3, r3
 8010084:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010088:	4293      	cmp	r3, r2
 801008a:	bf28      	it	cs
 801008c:	4613      	movcs	r3, r2
 801008e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010090:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010094:	2114      	movs	r1, #20
 8010096:	200e      	movs	r0, #14
 8010098:	f7f6 fd8a 	bl	8006bb0 <pbuf_alloc>
 801009c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801009e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	f000 80d5 	beq.w	8010250 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80100a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a8:	895b      	ldrh	r3, [r3, #10]
 80100aa:	2b13      	cmp	r3, #19
 80100ac:	d806      	bhi.n	80100bc <ip4_frag+0xd0>
 80100ae:	4b6c      	ldr	r3, [pc, #432]	; (8010260 <ip4_frag+0x274>)
 80100b0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80100b4:	496d      	ldr	r1, [pc, #436]	; (801026c <ip4_frag+0x280>)
 80100b6:	486c      	ldr	r0, [pc, #432]	; (8010268 <ip4_frag+0x27c>)
 80100b8:	f000 fa18 	bl	80104ec <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80100bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	2214      	movs	r2, #20
 80100c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80100c4:	4618      	mov	r0, r3
 80100c6:	f000 f9e1 	bl	801048c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80100ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100cc:	685b      	ldr	r3, [r3, #4]
 80100ce:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80100d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80100d2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80100d6:	e064      	b.n	80101a2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	895a      	ldrh	r2, [r3, #10]
 80100dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80100de:	1ad3      	subs	r3, r2, r3
 80100e0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	895b      	ldrh	r3, [r3, #10]
 80100e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d906      	bls.n	80100fa <ip4_frag+0x10e>
 80100ec:	4b5c      	ldr	r3, [pc, #368]	; (8010260 <ip4_frag+0x274>)
 80100ee:	f240 322d 	movw	r2, #813	; 0x32d
 80100f2:	495f      	ldr	r1, [pc, #380]	; (8010270 <ip4_frag+0x284>)
 80100f4:	485c      	ldr	r0, [pc, #368]	; (8010268 <ip4_frag+0x27c>)
 80100f6:	f000 f9f9 	bl	80104ec <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80100fa:	8bfa      	ldrh	r2, [r7, #30]
 80100fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010100:	4293      	cmp	r3, r2
 8010102:	bf28      	it	cs
 8010104:	4613      	movcs	r3, r2
 8010106:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801010a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801010e:	2b00      	cmp	r3, #0
 8010110:	d105      	bne.n	801011e <ip4_frag+0x132>
        poff = 0;
 8010112:	2300      	movs	r3, #0
 8010114:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	60fb      	str	r3, [r7, #12]
        continue;
 801011c:	e041      	b.n	80101a2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801011e:	f7ff ff0d 	bl	800ff3c <ip_frag_alloc_pbuf_custom_ref>
 8010122:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010124:	69bb      	ldr	r3, [r7, #24]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d103      	bne.n	8010132 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801012a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801012c:	f7f7 f824 	bl	8007178 <pbuf_free>
        goto memerr;
 8010130:	e08f      	b.n	8010252 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010132:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010138:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801013a:	4413      	add	r3, r2
 801013c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010140:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010144:	9201      	str	r2, [sp, #4]
 8010146:	9300      	str	r3, [sp, #0]
 8010148:	4603      	mov	r3, r0
 801014a:	2241      	movs	r2, #65	; 0x41
 801014c:	2000      	movs	r0, #0
 801014e:	f7f6 fe59 	bl	8006e04 <pbuf_alloced_custom>
 8010152:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d106      	bne.n	8010168 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801015a:	69b8      	ldr	r0, [r7, #24]
 801015c:	f7ff fef6 	bl	800ff4c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010160:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010162:	f7f7 f809 	bl	8007178 <pbuf_free>
        goto memerr;
 8010166:	e074      	b.n	8010252 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010168:	68f8      	ldr	r0, [r7, #12]
 801016a:	f7f7 f8a5 	bl	80072b8 <pbuf_ref>
      pcr->original = p;
 801016e:	69bb      	ldr	r3, [r7, #24]
 8010170:	68fa      	ldr	r2, [r7, #12]
 8010172:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010174:	69bb      	ldr	r3, [r7, #24]
 8010176:	4a3f      	ldr	r2, [pc, #252]	; (8010274 <ip4_frag+0x288>)
 8010178:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801017a:	6979      	ldr	r1, [r7, #20]
 801017c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801017e:	f7f7 f8bd 	bl	80072fc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010182:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010186:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801018a:	1ad3      	subs	r3, r2, r3
 801018c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8010190:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010194:	2b00      	cmp	r3, #0
 8010196:	d004      	beq.n	80101a2 <ip4_frag+0x1b6>
        poff = 0;
 8010198:	2300      	movs	r3, #0
 801019a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80101a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d196      	bne.n	80100d8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80101aa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80101ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80101b0:	4413      	add	r3, r2
 80101b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80101b8:	f1a3 0213 	sub.w	r2, r3, #19
 80101bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80101c0:	429a      	cmp	r2, r3
 80101c2:	bfcc      	ite	gt
 80101c4:	2301      	movgt	r3, #1
 80101c6:	2300      	movle	r3, #0
 80101c8:	b2db      	uxtb	r3, r3
 80101ca:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80101cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80101d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80101d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80101d6:	6a3b      	ldr	r3, [r7, #32]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d002      	beq.n	80101e2 <ip4_frag+0x1f6>
 80101dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d003      	beq.n	80101ea <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80101e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80101e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80101e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80101ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7f5 fce7 	bl	8005bc0 <lwip_htons>
 80101f2:	4603      	mov	r3, r0
 80101f4:	461a      	mov	r2, r3
 80101f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80101fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80101fc:	3314      	adds	r3, #20
 80101fe:	b29b      	uxth	r3, r3
 8010200:	4618      	mov	r0, r3
 8010202:	f7f5 fcdd 	bl	8005bc0 <lwip_htons>
 8010206:	4603      	mov	r3, r0
 8010208:	461a      	mov	r2, r3
 801020a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801020c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801020e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010210:	2200      	movs	r2, #0
 8010212:	729a      	strb	r2, [r3, #10]
 8010214:	2200      	movs	r2, #0
 8010216:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	695b      	ldr	r3, [r3, #20]
 801021c:	687a      	ldr	r2, [r7, #4]
 801021e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010220:	68b8      	ldr	r0, [r7, #8]
 8010222:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010224:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010226:	f7f6 ffa7 	bl	8007178 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801022a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801022e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010230:	1ad3      	subs	r3, r2, r3
 8010232:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8010236:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801023a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801023c:	4413      	add	r3, r2
 801023e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8010242:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010246:	2b00      	cmp	r3, #0
 8010248:	f47f af19 	bne.w	801007e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801024c:	2300      	movs	r3, #0
 801024e:	e002      	b.n	8010256 <ip4_frag+0x26a>
      goto memerr;
 8010250:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010252:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010256:	4618      	mov	r0, r3
 8010258:	3748      	adds	r7, #72	; 0x48
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}
 801025e:	bf00      	nop
 8010260:	08014aac 	.word	0x08014aac
 8010264:	08014c88 	.word	0x08014c88
 8010268:	08014af4 	.word	0x08014af4
 801026c:	08014ca4 	.word	0x08014ca4
 8010270:	08014cc4 	.word	0x08014cc4
 8010274:	0800ff85 	.word	0x0800ff85

08010278 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b086      	sub	sp, #24
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010282:	230e      	movs	r3, #14
 8010284:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	895b      	ldrh	r3, [r3, #10]
 801028a:	2b0e      	cmp	r3, #14
 801028c:	d96e      	bls.n	801036c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	7bdb      	ldrb	r3, [r3, #15]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d106      	bne.n	80102a4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801029c:	3301      	adds	r3, #1
 801029e:	b2da      	uxtb	r2, r3
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	7b1a      	ldrb	r2, [r3, #12]
 80102ae:	7b5b      	ldrb	r3, [r3, #13]
 80102b0:	021b      	lsls	r3, r3, #8
 80102b2:	4313      	orrs	r3, r2
 80102b4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	781b      	ldrb	r3, [r3, #0]
 80102ba:	f003 0301 	and.w	r3, r3, #1
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d023      	beq.n	801030a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80102c2:	693b      	ldr	r3, [r7, #16]
 80102c4:	781b      	ldrb	r3, [r3, #0]
 80102c6:	2b01      	cmp	r3, #1
 80102c8:	d10f      	bne.n	80102ea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	785b      	ldrb	r3, [r3, #1]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d11b      	bne.n	801030a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80102d2:	693b      	ldr	r3, [r7, #16]
 80102d4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80102d6:	2b5e      	cmp	r3, #94	; 0x5e
 80102d8:	d117      	bne.n	801030a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	7b5b      	ldrb	r3, [r3, #13]
 80102de:	f043 0310 	orr.w	r3, r3, #16
 80102e2:	b2da      	uxtb	r2, r3
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	735a      	strb	r2, [r3, #13]
 80102e8:	e00f      	b.n	801030a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	2206      	movs	r2, #6
 80102ee:	4928      	ldr	r1, [pc, #160]	; (8010390 <ethernet_input+0x118>)
 80102f0:	4618      	mov	r0, r3
 80102f2:	f000 f8bb 	bl	801046c <memcmp>
 80102f6:	4603      	mov	r3, r0
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d106      	bne.n	801030a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	7b5b      	ldrb	r3, [r3, #13]
 8010300:	f043 0308 	orr.w	r3, r3, #8
 8010304:	b2da      	uxtb	r2, r3
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801030a:	89fb      	ldrh	r3, [r7, #14]
 801030c:	2b08      	cmp	r3, #8
 801030e:	d003      	beq.n	8010318 <ethernet_input+0xa0>
 8010310:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010314:	d014      	beq.n	8010340 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010316:	e032      	b.n	801037e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801031e:	f003 0308 	and.w	r3, r3, #8
 8010322:	2b00      	cmp	r3, #0
 8010324:	d024      	beq.n	8010370 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010326:	8afb      	ldrh	r3, [r7, #22]
 8010328:	4619      	mov	r1, r3
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	f7f6 fe9e 	bl	800706c <pbuf_remove_header>
 8010330:	4603      	mov	r3, r0
 8010332:	2b00      	cmp	r3, #0
 8010334:	d11e      	bne.n	8010374 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010336:	6839      	ldr	r1, [r7, #0]
 8010338:	6878      	ldr	r0, [r7, #4]
 801033a:	f7fe ff21 	bl	800f180 <ip4_input>
      break;
 801033e:	e013      	b.n	8010368 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010346:	f003 0308 	and.w	r3, r3, #8
 801034a:	2b00      	cmp	r3, #0
 801034c:	d014      	beq.n	8010378 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801034e:	8afb      	ldrh	r3, [r7, #22]
 8010350:	4619      	mov	r1, r3
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f7f6 fe8a 	bl	800706c <pbuf_remove_header>
 8010358:	4603      	mov	r3, r0
 801035a:	2b00      	cmp	r3, #0
 801035c:	d10e      	bne.n	801037c <ethernet_input+0x104>
        etharp_input(p, netif);
 801035e:	6839      	ldr	r1, [r7, #0]
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f7fe f8c1 	bl	800e4e8 <etharp_input>
      break;
 8010366:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010368:	2300      	movs	r3, #0
 801036a:	e00c      	b.n	8010386 <ethernet_input+0x10e>
    goto free_and_return;
 801036c:	bf00      	nop
 801036e:	e006      	b.n	801037e <ethernet_input+0x106>
        goto free_and_return;
 8010370:	bf00      	nop
 8010372:	e004      	b.n	801037e <ethernet_input+0x106>
        goto free_and_return;
 8010374:	bf00      	nop
 8010376:	e002      	b.n	801037e <ethernet_input+0x106>
        goto free_and_return;
 8010378:	bf00      	nop
 801037a:	e000      	b.n	801037e <ethernet_input+0x106>
        goto free_and_return;
 801037c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	f7f6 fefa 	bl	8007178 <pbuf_free>
  return ERR_OK;
 8010384:	2300      	movs	r3, #0
}
 8010386:	4618      	mov	r0, r3
 8010388:	3718      	adds	r7, #24
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}
 801038e:	bf00      	nop
 8010390:	08014e4c 	.word	0x08014e4c

08010394 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010394:	b580      	push	{r7, lr}
 8010396:	b086      	sub	sp, #24
 8010398:	af00      	add	r7, sp, #0
 801039a:	60f8      	str	r0, [r7, #12]
 801039c:	60b9      	str	r1, [r7, #8]
 801039e:	607a      	str	r2, [r7, #4]
 80103a0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80103a2:	8c3b      	ldrh	r3, [r7, #32]
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7f5 fc0b 	bl	8005bc0 <lwip_htons>
 80103aa:	4603      	mov	r3, r0
 80103ac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80103ae:	210e      	movs	r1, #14
 80103b0:	68b8      	ldr	r0, [r7, #8]
 80103b2:	f7f6 fe4b 	bl	800704c <pbuf_add_header>
 80103b6:	4603      	mov	r3, r0
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d125      	bne.n	8010408 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	685b      	ldr	r3, [r3, #4]
 80103c0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80103c2:	693b      	ldr	r3, [r7, #16]
 80103c4:	8afa      	ldrh	r2, [r7, #22]
 80103c6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80103c8:	693b      	ldr	r3, [r7, #16]
 80103ca:	2206      	movs	r2, #6
 80103cc:	6839      	ldr	r1, [r7, #0]
 80103ce:	4618      	mov	r0, r3
 80103d0:	f000 f85c 	bl	801048c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	3306      	adds	r3, #6
 80103d8:	2206      	movs	r2, #6
 80103da:	6879      	ldr	r1, [r7, #4]
 80103dc:	4618      	mov	r0, r3
 80103de:	f000 f855 	bl	801048c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80103e8:	2b06      	cmp	r3, #6
 80103ea:	d006      	beq.n	80103fa <ethernet_output+0x66>
 80103ec:	4b0a      	ldr	r3, [pc, #40]	; (8010418 <ethernet_output+0x84>)
 80103ee:	f44f 7299 	mov.w	r2, #306	; 0x132
 80103f2:	490a      	ldr	r1, [pc, #40]	; (801041c <ethernet_output+0x88>)
 80103f4:	480a      	ldr	r0, [pc, #40]	; (8010420 <ethernet_output+0x8c>)
 80103f6:	f000 f879 	bl	80104ec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	699b      	ldr	r3, [r3, #24]
 80103fe:	68b9      	ldr	r1, [r7, #8]
 8010400:	68f8      	ldr	r0, [r7, #12]
 8010402:	4798      	blx	r3
 8010404:	4603      	mov	r3, r0
 8010406:	e002      	b.n	801040e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010408:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801040a:	f06f 0301 	mvn.w	r3, #1
}
 801040e:	4618      	mov	r0, r3
 8010410:	3718      	adds	r7, #24
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}
 8010416:	bf00      	nop
 8010418:	08014cd4 	.word	0x08014cd4
 801041c:	08014d0c 	.word	0x08014d0c
 8010420:	08014d40 	.word	0x08014d40

08010424 <__libc_init_array>:
 8010424:	b570      	push	{r4, r5, r6, lr}
 8010426:	4d0d      	ldr	r5, [pc, #52]	; (801045c <__libc_init_array+0x38>)
 8010428:	4c0d      	ldr	r4, [pc, #52]	; (8010460 <__libc_init_array+0x3c>)
 801042a:	1b64      	subs	r4, r4, r5
 801042c:	10a4      	asrs	r4, r4, #2
 801042e:	2600      	movs	r6, #0
 8010430:	42a6      	cmp	r6, r4
 8010432:	d109      	bne.n	8010448 <__libc_init_array+0x24>
 8010434:	4d0b      	ldr	r5, [pc, #44]	; (8010464 <__libc_init_array+0x40>)
 8010436:	4c0c      	ldr	r4, [pc, #48]	; (8010468 <__libc_init_array+0x44>)
 8010438:	f001 fae6 	bl	8011a08 <_init>
 801043c:	1b64      	subs	r4, r4, r5
 801043e:	10a4      	asrs	r4, r4, #2
 8010440:	2600      	movs	r6, #0
 8010442:	42a6      	cmp	r6, r4
 8010444:	d105      	bne.n	8010452 <__libc_init_array+0x2e>
 8010446:	bd70      	pop	{r4, r5, r6, pc}
 8010448:	f855 3b04 	ldr.w	r3, [r5], #4
 801044c:	4798      	blx	r3
 801044e:	3601      	adds	r6, #1
 8010450:	e7ee      	b.n	8010430 <__libc_init_array+0xc>
 8010452:	f855 3b04 	ldr.w	r3, [r5], #4
 8010456:	4798      	blx	r3
 8010458:	3601      	adds	r6, #1
 801045a:	e7f2      	b.n	8010442 <__libc_init_array+0x1e>
 801045c:	08014fac 	.word	0x08014fac
 8010460:	08014fac 	.word	0x08014fac
 8010464:	08014fac 	.word	0x08014fac
 8010468:	08014fb0 	.word	0x08014fb0

0801046c <memcmp>:
 801046c:	b510      	push	{r4, lr}
 801046e:	3901      	subs	r1, #1
 8010470:	4402      	add	r2, r0
 8010472:	4290      	cmp	r0, r2
 8010474:	d101      	bne.n	801047a <memcmp+0xe>
 8010476:	2000      	movs	r0, #0
 8010478:	e005      	b.n	8010486 <memcmp+0x1a>
 801047a:	7803      	ldrb	r3, [r0, #0]
 801047c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010480:	42a3      	cmp	r3, r4
 8010482:	d001      	beq.n	8010488 <memcmp+0x1c>
 8010484:	1b18      	subs	r0, r3, r4
 8010486:	bd10      	pop	{r4, pc}
 8010488:	3001      	adds	r0, #1
 801048a:	e7f2      	b.n	8010472 <memcmp+0x6>

0801048c <memcpy>:
 801048c:	440a      	add	r2, r1
 801048e:	4291      	cmp	r1, r2
 8010490:	f100 33ff 	add.w	r3, r0, #4294967295
 8010494:	d100      	bne.n	8010498 <memcpy+0xc>
 8010496:	4770      	bx	lr
 8010498:	b510      	push	{r4, lr}
 801049a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801049e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80104a2:	4291      	cmp	r1, r2
 80104a4:	d1f9      	bne.n	801049a <memcpy+0xe>
 80104a6:	bd10      	pop	{r4, pc}

080104a8 <memmove>:
 80104a8:	4288      	cmp	r0, r1
 80104aa:	b510      	push	{r4, lr}
 80104ac:	eb01 0402 	add.w	r4, r1, r2
 80104b0:	d902      	bls.n	80104b8 <memmove+0x10>
 80104b2:	4284      	cmp	r4, r0
 80104b4:	4623      	mov	r3, r4
 80104b6:	d807      	bhi.n	80104c8 <memmove+0x20>
 80104b8:	1e43      	subs	r3, r0, #1
 80104ba:	42a1      	cmp	r1, r4
 80104bc:	d008      	beq.n	80104d0 <memmove+0x28>
 80104be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80104c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80104c6:	e7f8      	b.n	80104ba <memmove+0x12>
 80104c8:	4402      	add	r2, r0
 80104ca:	4601      	mov	r1, r0
 80104cc:	428a      	cmp	r2, r1
 80104ce:	d100      	bne.n	80104d2 <memmove+0x2a>
 80104d0:	bd10      	pop	{r4, pc}
 80104d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80104d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80104da:	e7f7      	b.n	80104cc <memmove+0x24>

080104dc <memset>:
 80104dc:	4402      	add	r2, r0
 80104de:	4603      	mov	r3, r0
 80104e0:	4293      	cmp	r3, r2
 80104e2:	d100      	bne.n	80104e6 <memset+0xa>
 80104e4:	4770      	bx	lr
 80104e6:	f803 1b01 	strb.w	r1, [r3], #1
 80104ea:	e7f9      	b.n	80104e0 <memset+0x4>

080104ec <iprintf>:
 80104ec:	b40f      	push	{r0, r1, r2, r3}
 80104ee:	4b0a      	ldr	r3, [pc, #40]	; (8010518 <iprintf+0x2c>)
 80104f0:	b513      	push	{r0, r1, r4, lr}
 80104f2:	681c      	ldr	r4, [r3, #0]
 80104f4:	b124      	cbz	r4, 8010500 <iprintf+0x14>
 80104f6:	69a3      	ldr	r3, [r4, #24]
 80104f8:	b913      	cbnz	r3, 8010500 <iprintf+0x14>
 80104fa:	4620      	mov	r0, r4
 80104fc:	f000 faee 	bl	8010adc <__sinit>
 8010500:	ab05      	add	r3, sp, #20
 8010502:	9a04      	ldr	r2, [sp, #16]
 8010504:	68a1      	ldr	r1, [r4, #8]
 8010506:	9301      	str	r3, [sp, #4]
 8010508:	4620      	mov	r0, r4
 801050a:	f000 fe6d 	bl	80111e8 <_vfiprintf_r>
 801050e:	b002      	add	sp, #8
 8010510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010514:	b004      	add	sp, #16
 8010516:	4770      	bx	lr
 8010518:	20000014 	.word	0x20000014

0801051c <_puts_r>:
 801051c:	b570      	push	{r4, r5, r6, lr}
 801051e:	460e      	mov	r6, r1
 8010520:	4605      	mov	r5, r0
 8010522:	b118      	cbz	r0, 801052c <_puts_r+0x10>
 8010524:	6983      	ldr	r3, [r0, #24]
 8010526:	b90b      	cbnz	r3, 801052c <_puts_r+0x10>
 8010528:	f000 fad8 	bl	8010adc <__sinit>
 801052c:	69ab      	ldr	r3, [r5, #24]
 801052e:	68ac      	ldr	r4, [r5, #8]
 8010530:	b913      	cbnz	r3, 8010538 <_puts_r+0x1c>
 8010532:	4628      	mov	r0, r5
 8010534:	f000 fad2 	bl	8010adc <__sinit>
 8010538:	4b2c      	ldr	r3, [pc, #176]	; (80105ec <_puts_r+0xd0>)
 801053a:	429c      	cmp	r4, r3
 801053c:	d120      	bne.n	8010580 <_puts_r+0x64>
 801053e:	686c      	ldr	r4, [r5, #4]
 8010540:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010542:	07db      	lsls	r3, r3, #31
 8010544:	d405      	bmi.n	8010552 <_puts_r+0x36>
 8010546:	89a3      	ldrh	r3, [r4, #12]
 8010548:	0598      	lsls	r0, r3, #22
 801054a:	d402      	bmi.n	8010552 <_puts_r+0x36>
 801054c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801054e:	f000 fb75 	bl	8010c3c <__retarget_lock_acquire_recursive>
 8010552:	89a3      	ldrh	r3, [r4, #12]
 8010554:	0719      	lsls	r1, r3, #28
 8010556:	d51d      	bpl.n	8010594 <_puts_r+0x78>
 8010558:	6923      	ldr	r3, [r4, #16]
 801055a:	b1db      	cbz	r3, 8010594 <_puts_r+0x78>
 801055c:	3e01      	subs	r6, #1
 801055e:	68a3      	ldr	r3, [r4, #8]
 8010560:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010564:	3b01      	subs	r3, #1
 8010566:	60a3      	str	r3, [r4, #8]
 8010568:	bb39      	cbnz	r1, 80105ba <_puts_r+0x9e>
 801056a:	2b00      	cmp	r3, #0
 801056c:	da38      	bge.n	80105e0 <_puts_r+0xc4>
 801056e:	4622      	mov	r2, r4
 8010570:	210a      	movs	r1, #10
 8010572:	4628      	mov	r0, r5
 8010574:	f000 f8ba 	bl	80106ec <__swbuf_r>
 8010578:	3001      	adds	r0, #1
 801057a:	d011      	beq.n	80105a0 <_puts_r+0x84>
 801057c:	250a      	movs	r5, #10
 801057e:	e011      	b.n	80105a4 <_puts_r+0x88>
 8010580:	4b1b      	ldr	r3, [pc, #108]	; (80105f0 <_puts_r+0xd4>)
 8010582:	429c      	cmp	r4, r3
 8010584:	d101      	bne.n	801058a <_puts_r+0x6e>
 8010586:	68ac      	ldr	r4, [r5, #8]
 8010588:	e7da      	b.n	8010540 <_puts_r+0x24>
 801058a:	4b1a      	ldr	r3, [pc, #104]	; (80105f4 <_puts_r+0xd8>)
 801058c:	429c      	cmp	r4, r3
 801058e:	bf08      	it	eq
 8010590:	68ec      	ldreq	r4, [r5, #12]
 8010592:	e7d5      	b.n	8010540 <_puts_r+0x24>
 8010594:	4621      	mov	r1, r4
 8010596:	4628      	mov	r0, r5
 8010598:	f000 f8fa 	bl	8010790 <__swsetup_r>
 801059c:	2800      	cmp	r0, #0
 801059e:	d0dd      	beq.n	801055c <_puts_r+0x40>
 80105a0:	f04f 35ff 	mov.w	r5, #4294967295
 80105a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105a6:	07da      	lsls	r2, r3, #31
 80105a8:	d405      	bmi.n	80105b6 <_puts_r+0x9a>
 80105aa:	89a3      	ldrh	r3, [r4, #12]
 80105ac:	059b      	lsls	r3, r3, #22
 80105ae:	d402      	bmi.n	80105b6 <_puts_r+0x9a>
 80105b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105b2:	f000 fb44 	bl	8010c3e <__retarget_lock_release_recursive>
 80105b6:	4628      	mov	r0, r5
 80105b8:	bd70      	pop	{r4, r5, r6, pc}
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	da04      	bge.n	80105c8 <_puts_r+0xac>
 80105be:	69a2      	ldr	r2, [r4, #24]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	dc06      	bgt.n	80105d2 <_puts_r+0xb6>
 80105c4:	290a      	cmp	r1, #10
 80105c6:	d004      	beq.n	80105d2 <_puts_r+0xb6>
 80105c8:	6823      	ldr	r3, [r4, #0]
 80105ca:	1c5a      	adds	r2, r3, #1
 80105cc:	6022      	str	r2, [r4, #0]
 80105ce:	7019      	strb	r1, [r3, #0]
 80105d0:	e7c5      	b.n	801055e <_puts_r+0x42>
 80105d2:	4622      	mov	r2, r4
 80105d4:	4628      	mov	r0, r5
 80105d6:	f000 f889 	bl	80106ec <__swbuf_r>
 80105da:	3001      	adds	r0, #1
 80105dc:	d1bf      	bne.n	801055e <_puts_r+0x42>
 80105de:	e7df      	b.n	80105a0 <_puts_r+0x84>
 80105e0:	6823      	ldr	r3, [r4, #0]
 80105e2:	250a      	movs	r5, #10
 80105e4:	1c5a      	adds	r2, r3, #1
 80105e6:	6022      	str	r2, [r4, #0]
 80105e8:	701d      	strb	r5, [r3, #0]
 80105ea:	e7db      	b.n	80105a4 <_puts_r+0x88>
 80105ec:	08014f30 	.word	0x08014f30
 80105f0:	08014f50 	.word	0x08014f50
 80105f4:	08014f10 	.word	0x08014f10

080105f8 <puts>:
 80105f8:	4b02      	ldr	r3, [pc, #8]	; (8010604 <puts+0xc>)
 80105fa:	4601      	mov	r1, r0
 80105fc:	6818      	ldr	r0, [r3, #0]
 80105fe:	f7ff bf8d 	b.w	801051c <_puts_r>
 8010602:	bf00      	nop
 8010604:	20000014 	.word	0x20000014

08010608 <rand>:
 8010608:	4b16      	ldr	r3, [pc, #88]	; (8010664 <rand+0x5c>)
 801060a:	b510      	push	{r4, lr}
 801060c:	681c      	ldr	r4, [r3, #0]
 801060e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010610:	b9b3      	cbnz	r3, 8010640 <rand+0x38>
 8010612:	2018      	movs	r0, #24
 8010614:	f000 fb7a 	bl	8010d0c <malloc>
 8010618:	63a0      	str	r0, [r4, #56]	; 0x38
 801061a:	b928      	cbnz	r0, 8010628 <rand+0x20>
 801061c:	4602      	mov	r2, r0
 801061e:	4b12      	ldr	r3, [pc, #72]	; (8010668 <rand+0x60>)
 8010620:	4812      	ldr	r0, [pc, #72]	; (801066c <rand+0x64>)
 8010622:	214e      	movs	r1, #78	; 0x4e
 8010624:	f000 f922 	bl	801086c <__assert_func>
 8010628:	4a11      	ldr	r2, [pc, #68]	; (8010670 <rand+0x68>)
 801062a:	4b12      	ldr	r3, [pc, #72]	; (8010674 <rand+0x6c>)
 801062c:	e9c0 2300 	strd	r2, r3, [r0]
 8010630:	4b11      	ldr	r3, [pc, #68]	; (8010678 <rand+0x70>)
 8010632:	6083      	str	r3, [r0, #8]
 8010634:	230b      	movs	r3, #11
 8010636:	8183      	strh	r3, [r0, #12]
 8010638:	2201      	movs	r2, #1
 801063a:	2300      	movs	r3, #0
 801063c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010640:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8010642:	4a0e      	ldr	r2, [pc, #56]	; (801067c <rand+0x74>)
 8010644:	6920      	ldr	r0, [r4, #16]
 8010646:	6963      	ldr	r3, [r4, #20]
 8010648:	490d      	ldr	r1, [pc, #52]	; (8010680 <rand+0x78>)
 801064a:	4342      	muls	r2, r0
 801064c:	fb01 2203 	mla	r2, r1, r3, r2
 8010650:	fba0 0101 	umull	r0, r1, r0, r1
 8010654:	1c43      	adds	r3, r0, #1
 8010656:	eb42 0001 	adc.w	r0, r2, r1
 801065a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801065e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010662:	bd10      	pop	{r4, pc}
 8010664:	20000014 	.word	0x20000014
 8010668:	08014e60 	.word	0x08014e60
 801066c:	08014e77 	.word	0x08014e77
 8010670:	abcd330e 	.word	0xabcd330e
 8010674:	e66d1234 	.word	0xe66d1234
 8010678:	0005deec 	.word	0x0005deec
 801067c:	5851f42d 	.word	0x5851f42d
 8010680:	4c957f2d 	.word	0x4c957f2d

08010684 <siprintf>:
 8010684:	b40e      	push	{r1, r2, r3}
 8010686:	b500      	push	{lr}
 8010688:	b09c      	sub	sp, #112	; 0x70
 801068a:	ab1d      	add	r3, sp, #116	; 0x74
 801068c:	9002      	str	r0, [sp, #8]
 801068e:	9006      	str	r0, [sp, #24]
 8010690:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010694:	4809      	ldr	r0, [pc, #36]	; (80106bc <siprintf+0x38>)
 8010696:	9107      	str	r1, [sp, #28]
 8010698:	9104      	str	r1, [sp, #16]
 801069a:	4909      	ldr	r1, [pc, #36]	; (80106c0 <siprintf+0x3c>)
 801069c:	f853 2b04 	ldr.w	r2, [r3], #4
 80106a0:	9105      	str	r1, [sp, #20]
 80106a2:	6800      	ldr	r0, [r0, #0]
 80106a4:	9301      	str	r3, [sp, #4]
 80106a6:	a902      	add	r1, sp, #8
 80106a8:	f000 fc74 	bl	8010f94 <_svfiprintf_r>
 80106ac:	9b02      	ldr	r3, [sp, #8]
 80106ae:	2200      	movs	r2, #0
 80106b0:	701a      	strb	r2, [r3, #0]
 80106b2:	b01c      	add	sp, #112	; 0x70
 80106b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80106b8:	b003      	add	sp, #12
 80106ba:	4770      	bx	lr
 80106bc:	20000014 	.word	0x20000014
 80106c0:	ffff0208 	.word	0xffff0208

080106c4 <strncmp>:
 80106c4:	b510      	push	{r4, lr}
 80106c6:	b17a      	cbz	r2, 80106e8 <strncmp+0x24>
 80106c8:	4603      	mov	r3, r0
 80106ca:	3901      	subs	r1, #1
 80106cc:	1884      	adds	r4, r0, r2
 80106ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 80106d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80106d6:	4290      	cmp	r0, r2
 80106d8:	d101      	bne.n	80106de <strncmp+0x1a>
 80106da:	42a3      	cmp	r3, r4
 80106dc:	d101      	bne.n	80106e2 <strncmp+0x1e>
 80106de:	1a80      	subs	r0, r0, r2
 80106e0:	bd10      	pop	{r4, pc}
 80106e2:	2800      	cmp	r0, #0
 80106e4:	d1f3      	bne.n	80106ce <strncmp+0xa>
 80106e6:	e7fa      	b.n	80106de <strncmp+0x1a>
 80106e8:	4610      	mov	r0, r2
 80106ea:	e7f9      	b.n	80106e0 <strncmp+0x1c>

080106ec <__swbuf_r>:
 80106ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ee:	460e      	mov	r6, r1
 80106f0:	4614      	mov	r4, r2
 80106f2:	4605      	mov	r5, r0
 80106f4:	b118      	cbz	r0, 80106fe <__swbuf_r+0x12>
 80106f6:	6983      	ldr	r3, [r0, #24]
 80106f8:	b90b      	cbnz	r3, 80106fe <__swbuf_r+0x12>
 80106fa:	f000 f9ef 	bl	8010adc <__sinit>
 80106fe:	4b21      	ldr	r3, [pc, #132]	; (8010784 <__swbuf_r+0x98>)
 8010700:	429c      	cmp	r4, r3
 8010702:	d12b      	bne.n	801075c <__swbuf_r+0x70>
 8010704:	686c      	ldr	r4, [r5, #4]
 8010706:	69a3      	ldr	r3, [r4, #24]
 8010708:	60a3      	str	r3, [r4, #8]
 801070a:	89a3      	ldrh	r3, [r4, #12]
 801070c:	071a      	lsls	r2, r3, #28
 801070e:	d52f      	bpl.n	8010770 <__swbuf_r+0x84>
 8010710:	6923      	ldr	r3, [r4, #16]
 8010712:	b36b      	cbz	r3, 8010770 <__swbuf_r+0x84>
 8010714:	6923      	ldr	r3, [r4, #16]
 8010716:	6820      	ldr	r0, [r4, #0]
 8010718:	1ac0      	subs	r0, r0, r3
 801071a:	6963      	ldr	r3, [r4, #20]
 801071c:	b2f6      	uxtb	r6, r6
 801071e:	4283      	cmp	r3, r0
 8010720:	4637      	mov	r7, r6
 8010722:	dc04      	bgt.n	801072e <__swbuf_r+0x42>
 8010724:	4621      	mov	r1, r4
 8010726:	4628      	mov	r0, r5
 8010728:	f000 f944 	bl	80109b4 <_fflush_r>
 801072c:	bb30      	cbnz	r0, 801077c <__swbuf_r+0x90>
 801072e:	68a3      	ldr	r3, [r4, #8]
 8010730:	3b01      	subs	r3, #1
 8010732:	60a3      	str	r3, [r4, #8]
 8010734:	6823      	ldr	r3, [r4, #0]
 8010736:	1c5a      	adds	r2, r3, #1
 8010738:	6022      	str	r2, [r4, #0]
 801073a:	701e      	strb	r6, [r3, #0]
 801073c:	6963      	ldr	r3, [r4, #20]
 801073e:	3001      	adds	r0, #1
 8010740:	4283      	cmp	r3, r0
 8010742:	d004      	beq.n	801074e <__swbuf_r+0x62>
 8010744:	89a3      	ldrh	r3, [r4, #12]
 8010746:	07db      	lsls	r3, r3, #31
 8010748:	d506      	bpl.n	8010758 <__swbuf_r+0x6c>
 801074a:	2e0a      	cmp	r6, #10
 801074c:	d104      	bne.n	8010758 <__swbuf_r+0x6c>
 801074e:	4621      	mov	r1, r4
 8010750:	4628      	mov	r0, r5
 8010752:	f000 f92f 	bl	80109b4 <_fflush_r>
 8010756:	b988      	cbnz	r0, 801077c <__swbuf_r+0x90>
 8010758:	4638      	mov	r0, r7
 801075a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801075c:	4b0a      	ldr	r3, [pc, #40]	; (8010788 <__swbuf_r+0x9c>)
 801075e:	429c      	cmp	r4, r3
 8010760:	d101      	bne.n	8010766 <__swbuf_r+0x7a>
 8010762:	68ac      	ldr	r4, [r5, #8]
 8010764:	e7cf      	b.n	8010706 <__swbuf_r+0x1a>
 8010766:	4b09      	ldr	r3, [pc, #36]	; (801078c <__swbuf_r+0xa0>)
 8010768:	429c      	cmp	r4, r3
 801076a:	bf08      	it	eq
 801076c:	68ec      	ldreq	r4, [r5, #12]
 801076e:	e7ca      	b.n	8010706 <__swbuf_r+0x1a>
 8010770:	4621      	mov	r1, r4
 8010772:	4628      	mov	r0, r5
 8010774:	f000 f80c 	bl	8010790 <__swsetup_r>
 8010778:	2800      	cmp	r0, #0
 801077a:	d0cb      	beq.n	8010714 <__swbuf_r+0x28>
 801077c:	f04f 37ff 	mov.w	r7, #4294967295
 8010780:	e7ea      	b.n	8010758 <__swbuf_r+0x6c>
 8010782:	bf00      	nop
 8010784:	08014f30 	.word	0x08014f30
 8010788:	08014f50 	.word	0x08014f50
 801078c:	08014f10 	.word	0x08014f10

08010790 <__swsetup_r>:
 8010790:	4b32      	ldr	r3, [pc, #200]	; (801085c <__swsetup_r+0xcc>)
 8010792:	b570      	push	{r4, r5, r6, lr}
 8010794:	681d      	ldr	r5, [r3, #0]
 8010796:	4606      	mov	r6, r0
 8010798:	460c      	mov	r4, r1
 801079a:	b125      	cbz	r5, 80107a6 <__swsetup_r+0x16>
 801079c:	69ab      	ldr	r3, [r5, #24]
 801079e:	b913      	cbnz	r3, 80107a6 <__swsetup_r+0x16>
 80107a0:	4628      	mov	r0, r5
 80107a2:	f000 f99b 	bl	8010adc <__sinit>
 80107a6:	4b2e      	ldr	r3, [pc, #184]	; (8010860 <__swsetup_r+0xd0>)
 80107a8:	429c      	cmp	r4, r3
 80107aa:	d10f      	bne.n	80107cc <__swsetup_r+0x3c>
 80107ac:	686c      	ldr	r4, [r5, #4]
 80107ae:	89a3      	ldrh	r3, [r4, #12]
 80107b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80107b4:	0719      	lsls	r1, r3, #28
 80107b6:	d42c      	bmi.n	8010812 <__swsetup_r+0x82>
 80107b8:	06dd      	lsls	r5, r3, #27
 80107ba:	d411      	bmi.n	80107e0 <__swsetup_r+0x50>
 80107bc:	2309      	movs	r3, #9
 80107be:	6033      	str	r3, [r6, #0]
 80107c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80107c4:	81a3      	strh	r3, [r4, #12]
 80107c6:	f04f 30ff 	mov.w	r0, #4294967295
 80107ca:	e03e      	b.n	801084a <__swsetup_r+0xba>
 80107cc:	4b25      	ldr	r3, [pc, #148]	; (8010864 <__swsetup_r+0xd4>)
 80107ce:	429c      	cmp	r4, r3
 80107d0:	d101      	bne.n	80107d6 <__swsetup_r+0x46>
 80107d2:	68ac      	ldr	r4, [r5, #8]
 80107d4:	e7eb      	b.n	80107ae <__swsetup_r+0x1e>
 80107d6:	4b24      	ldr	r3, [pc, #144]	; (8010868 <__swsetup_r+0xd8>)
 80107d8:	429c      	cmp	r4, r3
 80107da:	bf08      	it	eq
 80107dc:	68ec      	ldreq	r4, [r5, #12]
 80107de:	e7e6      	b.n	80107ae <__swsetup_r+0x1e>
 80107e0:	0758      	lsls	r0, r3, #29
 80107e2:	d512      	bpl.n	801080a <__swsetup_r+0x7a>
 80107e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107e6:	b141      	cbz	r1, 80107fa <__swsetup_r+0x6a>
 80107e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80107ec:	4299      	cmp	r1, r3
 80107ee:	d002      	beq.n	80107f6 <__swsetup_r+0x66>
 80107f0:	4630      	mov	r0, r6
 80107f2:	f000 fa93 	bl	8010d1c <_free_r>
 80107f6:	2300      	movs	r3, #0
 80107f8:	6363      	str	r3, [r4, #52]	; 0x34
 80107fa:	89a3      	ldrh	r3, [r4, #12]
 80107fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010800:	81a3      	strh	r3, [r4, #12]
 8010802:	2300      	movs	r3, #0
 8010804:	6063      	str	r3, [r4, #4]
 8010806:	6923      	ldr	r3, [r4, #16]
 8010808:	6023      	str	r3, [r4, #0]
 801080a:	89a3      	ldrh	r3, [r4, #12]
 801080c:	f043 0308 	orr.w	r3, r3, #8
 8010810:	81a3      	strh	r3, [r4, #12]
 8010812:	6923      	ldr	r3, [r4, #16]
 8010814:	b94b      	cbnz	r3, 801082a <__swsetup_r+0x9a>
 8010816:	89a3      	ldrh	r3, [r4, #12]
 8010818:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801081c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010820:	d003      	beq.n	801082a <__swsetup_r+0x9a>
 8010822:	4621      	mov	r1, r4
 8010824:	4630      	mov	r0, r6
 8010826:	f000 fa31 	bl	8010c8c <__smakebuf_r>
 801082a:	89a0      	ldrh	r0, [r4, #12]
 801082c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010830:	f010 0301 	ands.w	r3, r0, #1
 8010834:	d00a      	beq.n	801084c <__swsetup_r+0xbc>
 8010836:	2300      	movs	r3, #0
 8010838:	60a3      	str	r3, [r4, #8]
 801083a:	6963      	ldr	r3, [r4, #20]
 801083c:	425b      	negs	r3, r3
 801083e:	61a3      	str	r3, [r4, #24]
 8010840:	6923      	ldr	r3, [r4, #16]
 8010842:	b943      	cbnz	r3, 8010856 <__swsetup_r+0xc6>
 8010844:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010848:	d1ba      	bne.n	80107c0 <__swsetup_r+0x30>
 801084a:	bd70      	pop	{r4, r5, r6, pc}
 801084c:	0781      	lsls	r1, r0, #30
 801084e:	bf58      	it	pl
 8010850:	6963      	ldrpl	r3, [r4, #20]
 8010852:	60a3      	str	r3, [r4, #8]
 8010854:	e7f4      	b.n	8010840 <__swsetup_r+0xb0>
 8010856:	2000      	movs	r0, #0
 8010858:	e7f7      	b.n	801084a <__swsetup_r+0xba>
 801085a:	bf00      	nop
 801085c:	20000014 	.word	0x20000014
 8010860:	08014f30 	.word	0x08014f30
 8010864:	08014f50 	.word	0x08014f50
 8010868:	08014f10 	.word	0x08014f10

0801086c <__assert_func>:
 801086c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801086e:	4614      	mov	r4, r2
 8010870:	461a      	mov	r2, r3
 8010872:	4b09      	ldr	r3, [pc, #36]	; (8010898 <__assert_func+0x2c>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	4605      	mov	r5, r0
 8010878:	68d8      	ldr	r0, [r3, #12]
 801087a:	b14c      	cbz	r4, 8010890 <__assert_func+0x24>
 801087c:	4b07      	ldr	r3, [pc, #28]	; (801089c <__assert_func+0x30>)
 801087e:	9100      	str	r1, [sp, #0]
 8010880:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010884:	4906      	ldr	r1, [pc, #24]	; (80108a0 <__assert_func+0x34>)
 8010886:	462b      	mov	r3, r5
 8010888:	f000 f9a6 	bl	8010bd8 <fiprintf>
 801088c:	f000 ffd6 	bl	801183c <abort>
 8010890:	4b04      	ldr	r3, [pc, #16]	; (80108a4 <__assert_func+0x38>)
 8010892:	461c      	mov	r4, r3
 8010894:	e7f3      	b.n	801087e <__assert_func+0x12>
 8010896:	bf00      	nop
 8010898:	20000014 	.word	0x20000014
 801089c:	08014ed2 	.word	0x08014ed2
 80108a0:	08014edf 	.word	0x08014edf
 80108a4:	08014f0d 	.word	0x08014f0d

080108a8 <__sflush_r>:
 80108a8:	898a      	ldrh	r2, [r1, #12]
 80108aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108ae:	4605      	mov	r5, r0
 80108b0:	0710      	lsls	r0, r2, #28
 80108b2:	460c      	mov	r4, r1
 80108b4:	d458      	bmi.n	8010968 <__sflush_r+0xc0>
 80108b6:	684b      	ldr	r3, [r1, #4]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	dc05      	bgt.n	80108c8 <__sflush_r+0x20>
 80108bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80108be:	2b00      	cmp	r3, #0
 80108c0:	dc02      	bgt.n	80108c8 <__sflush_r+0x20>
 80108c2:	2000      	movs	r0, #0
 80108c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108ca:	2e00      	cmp	r6, #0
 80108cc:	d0f9      	beq.n	80108c2 <__sflush_r+0x1a>
 80108ce:	2300      	movs	r3, #0
 80108d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80108d4:	682f      	ldr	r7, [r5, #0]
 80108d6:	602b      	str	r3, [r5, #0]
 80108d8:	d032      	beq.n	8010940 <__sflush_r+0x98>
 80108da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80108dc:	89a3      	ldrh	r3, [r4, #12]
 80108de:	075a      	lsls	r2, r3, #29
 80108e0:	d505      	bpl.n	80108ee <__sflush_r+0x46>
 80108e2:	6863      	ldr	r3, [r4, #4]
 80108e4:	1ac0      	subs	r0, r0, r3
 80108e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80108e8:	b10b      	cbz	r3, 80108ee <__sflush_r+0x46>
 80108ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80108ec:	1ac0      	subs	r0, r0, r3
 80108ee:	2300      	movs	r3, #0
 80108f0:	4602      	mov	r2, r0
 80108f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108f4:	6a21      	ldr	r1, [r4, #32]
 80108f6:	4628      	mov	r0, r5
 80108f8:	47b0      	blx	r6
 80108fa:	1c43      	adds	r3, r0, #1
 80108fc:	89a3      	ldrh	r3, [r4, #12]
 80108fe:	d106      	bne.n	801090e <__sflush_r+0x66>
 8010900:	6829      	ldr	r1, [r5, #0]
 8010902:	291d      	cmp	r1, #29
 8010904:	d82c      	bhi.n	8010960 <__sflush_r+0xb8>
 8010906:	4a2a      	ldr	r2, [pc, #168]	; (80109b0 <__sflush_r+0x108>)
 8010908:	40ca      	lsrs	r2, r1
 801090a:	07d6      	lsls	r6, r2, #31
 801090c:	d528      	bpl.n	8010960 <__sflush_r+0xb8>
 801090e:	2200      	movs	r2, #0
 8010910:	6062      	str	r2, [r4, #4]
 8010912:	04d9      	lsls	r1, r3, #19
 8010914:	6922      	ldr	r2, [r4, #16]
 8010916:	6022      	str	r2, [r4, #0]
 8010918:	d504      	bpl.n	8010924 <__sflush_r+0x7c>
 801091a:	1c42      	adds	r2, r0, #1
 801091c:	d101      	bne.n	8010922 <__sflush_r+0x7a>
 801091e:	682b      	ldr	r3, [r5, #0]
 8010920:	b903      	cbnz	r3, 8010924 <__sflush_r+0x7c>
 8010922:	6560      	str	r0, [r4, #84]	; 0x54
 8010924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010926:	602f      	str	r7, [r5, #0]
 8010928:	2900      	cmp	r1, #0
 801092a:	d0ca      	beq.n	80108c2 <__sflush_r+0x1a>
 801092c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010930:	4299      	cmp	r1, r3
 8010932:	d002      	beq.n	801093a <__sflush_r+0x92>
 8010934:	4628      	mov	r0, r5
 8010936:	f000 f9f1 	bl	8010d1c <_free_r>
 801093a:	2000      	movs	r0, #0
 801093c:	6360      	str	r0, [r4, #52]	; 0x34
 801093e:	e7c1      	b.n	80108c4 <__sflush_r+0x1c>
 8010940:	6a21      	ldr	r1, [r4, #32]
 8010942:	2301      	movs	r3, #1
 8010944:	4628      	mov	r0, r5
 8010946:	47b0      	blx	r6
 8010948:	1c41      	adds	r1, r0, #1
 801094a:	d1c7      	bne.n	80108dc <__sflush_r+0x34>
 801094c:	682b      	ldr	r3, [r5, #0]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d0c4      	beq.n	80108dc <__sflush_r+0x34>
 8010952:	2b1d      	cmp	r3, #29
 8010954:	d001      	beq.n	801095a <__sflush_r+0xb2>
 8010956:	2b16      	cmp	r3, #22
 8010958:	d101      	bne.n	801095e <__sflush_r+0xb6>
 801095a:	602f      	str	r7, [r5, #0]
 801095c:	e7b1      	b.n	80108c2 <__sflush_r+0x1a>
 801095e:	89a3      	ldrh	r3, [r4, #12]
 8010960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010964:	81a3      	strh	r3, [r4, #12]
 8010966:	e7ad      	b.n	80108c4 <__sflush_r+0x1c>
 8010968:	690f      	ldr	r7, [r1, #16]
 801096a:	2f00      	cmp	r7, #0
 801096c:	d0a9      	beq.n	80108c2 <__sflush_r+0x1a>
 801096e:	0793      	lsls	r3, r2, #30
 8010970:	680e      	ldr	r6, [r1, #0]
 8010972:	bf08      	it	eq
 8010974:	694b      	ldreq	r3, [r1, #20]
 8010976:	600f      	str	r7, [r1, #0]
 8010978:	bf18      	it	ne
 801097a:	2300      	movne	r3, #0
 801097c:	eba6 0807 	sub.w	r8, r6, r7
 8010980:	608b      	str	r3, [r1, #8]
 8010982:	f1b8 0f00 	cmp.w	r8, #0
 8010986:	dd9c      	ble.n	80108c2 <__sflush_r+0x1a>
 8010988:	6a21      	ldr	r1, [r4, #32]
 801098a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801098c:	4643      	mov	r3, r8
 801098e:	463a      	mov	r2, r7
 8010990:	4628      	mov	r0, r5
 8010992:	47b0      	blx	r6
 8010994:	2800      	cmp	r0, #0
 8010996:	dc06      	bgt.n	80109a6 <__sflush_r+0xfe>
 8010998:	89a3      	ldrh	r3, [r4, #12]
 801099a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801099e:	81a3      	strh	r3, [r4, #12]
 80109a0:	f04f 30ff 	mov.w	r0, #4294967295
 80109a4:	e78e      	b.n	80108c4 <__sflush_r+0x1c>
 80109a6:	4407      	add	r7, r0
 80109a8:	eba8 0800 	sub.w	r8, r8, r0
 80109ac:	e7e9      	b.n	8010982 <__sflush_r+0xda>
 80109ae:	bf00      	nop
 80109b0:	20400001 	.word	0x20400001

080109b4 <_fflush_r>:
 80109b4:	b538      	push	{r3, r4, r5, lr}
 80109b6:	690b      	ldr	r3, [r1, #16]
 80109b8:	4605      	mov	r5, r0
 80109ba:	460c      	mov	r4, r1
 80109bc:	b913      	cbnz	r3, 80109c4 <_fflush_r+0x10>
 80109be:	2500      	movs	r5, #0
 80109c0:	4628      	mov	r0, r5
 80109c2:	bd38      	pop	{r3, r4, r5, pc}
 80109c4:	b118      	cbz	r0, 80109ce <_fflush_r+0x1a>
 80109c6:	6983      	ldr	r3, [r0, #24]
 80109c8:	b90b      	cbnz	r3, 80109ce <_fflush_r+0x1a>
 80109ca:	f000 f887 	bl	8010adc <__sinit>
 80109ce:	4b14      	ldr	r3, [pc, #80]	; (8010a20 <_fflush_r+0x6c>)
 80109d0:	429c      	cmp	r4, r3
 80109d2:	d11b      	bne.n	8010a0c <_fflush_r+0x58>
 80109d4:	686c      	ldr	r4, [r5, #4]
 80109d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d0ef      	beq.n	80109be <_fflush_r+0xa>
 80109de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80109e0:	07d0      	lsls	r0, r2, #31
 80109e2:	d404      	bmi.n	80109ee <_fflush_r+0x3a>
 80109e4:	0599      	lsls	r1, r3, #22
 80109e6:	d402      	bmi.n	80109ee <_fflush_r+0x3a>
 80109e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109ea:	f000 f927 	bl	8010c3c <__retarget_lock_acquire_recursive>
 80109ee:	4628      	mov	r0, r5
 80109f0:	4621      	mov	r1, r4
 80109f2:	f7ff ff59 	bl	80108a8 <__sflush_r>
 80109f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80109f8:	07da      	lsls	r2, r3, #31
 80109fa:	4605      	mov	r5, r0
 80109fc:	d4e0      	bmi.n	80109c0 <_fflush_r+0xc>
 80109fe:	89a3      	ldrh	r3, [r4, #12]
 8010a00:	059b      	lsls	r3, r3, #22
 8010a02:	d4dd      	bmi.n	80109c0 <_fflush_r+0xc>
 8010a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a06:	f000 f91a 	bl	8010c3e <__retarget_lock_release_recursive>
 8010a0a:	e7d9      	b.n	80109c0 <_fflush_r+0xc>
 8010a0c:	4b05      	ldr	r3, [pc, #20]	; (8010a24 <_fflush_r+0x70>)
 8010a0e:	429c      	cmp	r4, r3
 8010a10:	d101      	bne.n	8010a16 <_fflush_r+0x62>
 8010a12:	68ac      	ldr	r4, [r5, #8]
 8010a14:	e7df      	b.n	80109d6 <_fflush_r+0x22>
 8010a16:	4b04      	ldr	r3, [pc, #16]	; (8010a28 <_fflush_r+0x74>)
 8010a18:	429c      	cmp	r4, r3
 8010a1a:	bf08      	it	eq
 8010a1c:	68ec      	ldreq	r4, [r5, #12]
 8010a1e:	e7da      	b.n	80109d6 <_fflush_r+0x22>
 8010a20:	08014f30 	.word	0x08014f30
 8010a24:	08014f50 	.word	0x08014f50
 8010a28:	08014f10 	.word	0x08014f10

08010a2c <std>:
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	b510      	push	{r4, lr}
 8010a30:	4604      	mov	r4, r0
 8010a32:	e9c0 3300 	strd	r3, r3, [r0]
 8010a36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010a3a:	6083      	str	r3, [r0, #8]
 8010a3c:	8181      	strh	r1, [r0, #12]
 8010a3e:	6643      	str	r3, [r0, #100]	; 0x64
 8010a40:	81c2      	strh	r2, [r0, #14]
 8010a42:	6183      	str	r3, [r0, #24]
 8010a44:	4619      	mov	r1, r3
 8010a46:	2208      	movs	r2, #8
 8010a48:	305c      	adds	r0, #92	; 0x5c
 8010a4a:	f7ff fd47 	bl	80104dc <memset>
 8010a4e:	4b05      	ldr	r3, [pc, #20]	; (8010a64 <std+0x38>)
 8010a50:	6263      	str	r3, [r4, #36]	; 0x24
 8010a52:	4b05      	ldr	r3, [pc, #20]	; (8010a68 <std+0x3c>)
 8010a54:	62a3      	str	r3, [r4, #40]	; 0x28
 8010a56:	4b05      	ldr	r3, [pc, #20]	; (8010a6c <std+0x40>)
 8010a58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010a5a:	4b05      	ldr	r3, [pc, #20]	; (8010a70 <std+0x44>)
 8010a5c:	6224      	str	r4, [r4, #32]
 8010a5e:	6323      	str	r3, [r4, #48]	; 0x30
 8010a60:	bd10      	pop	{r4, pc}
 8010a62:	bf00      	nop
 8010a64:	08011791 	.word	0x08011791
 8010a68:	080117b3 	.word	0x080117b3
 8010a6c:	080117eb 	.word	0x080117eb
 8010a70:	0801180f 	.word	0x0801180f

08010a74 <_cleanup_r>:
 8010a74:	4901      	ldr	r1, [pc, #4]	; (8010a7c <_cleanup_r+0x8>)
 8010a76:	f000 b8c1 	b.w	8010bfc <_fwalk_reent>
 8010a7a:	bf00      	nop
 8010a7c:	080109b5 	.word	0x080109b5

08010a80 <__sfmoreglue>:
 8010a80:	b570      	push	{r4, r5, r6, lr}
 8010a82:	2268      	movs	r2, #104	; 0x68
 8010a84:	1e4d      	subs	r5, r1, #1
 8010a86:	4355      	muls	r5, r2
 8010a88:	460e      	mov	r6, r1
 8010a8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010a8e:	f000 f9b1 	bl	8010df4 <_malloc_r>
 8010a92:	4604      	mov	r4, r0
 8010a94:	b140      	cbz	r0, 8010aa8 <__sfmoreglue+0x28>
 8010a96:	2100      	movs	r1, #0
 8010a98:	e9c0 1600 	strd	r1, r6, [r0]
 8010a9c:	300c      	adds	r0, #12
 8010a9e:	60a0      	str	r0, [r4, #8]
 8010aa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010aa4:	f7ff fd1a 	bl	80104dc <memset>
 8010aa8:	4620      	mov	r0, r4
 8010aaa:	bd70      	pop	{r4, r5, r6, pc}

08010aac <__sfp_lock_acquire>:
 8010aac:	4801      	ldr	r0, [pc, #4]	; (8010ab4 <__sfp_lock_acquire+0x8>)
 8010aae:	f000 b8c5 	b.w	8010c3c <__retarget_lock_acquire_recursive>
 8010ab2:	bf00      	nop
 8010ab4:	20006961 	.word	0x20006961

08010ab8 <__sfp_lock_release>:
 8010ab8:	4801      	ldr	r0, [pc, #4]	; (8010ac0 <__sfp_lock_release+0x8>)
 8010aba:	f000 b8c0 	b.w	8010c3e <__retarget_lock_release_recursive>
 8010abe:	bf00      	nop
 8010ac0:	20006961 	.word	0x20006961

08010ac4 <__sinit_lock_acquire>:
 8010ac4:	4801      	ldr	r0, [pc, #4]	; (8010acc <__sinit_lock_acquire+0x8>)
 8010ac6:	f000 b8b9 	b.w	8010c3c <__retarget_lock_acquire_recursive>
 8010aca:	bf00      	nop
 8010acc:	20006962 	.word	0x20006962

08010ad0 <__sinit_lock_release>:
 8010ad0:	4801      	ldr	r0, [pc, #4]	; (8010ad8 <__sinit_lock_release+0x8>)
 8010ad2:	f000 b8b4 	b.w	8010c3e <__retarget_lock_release_recursive>
 8010ad6:	bf00      	nop
 8010ad8:	20006962 	.word	0x20006962

08010adc <__sinit>:
 8010adc:	b510      	push	{r4, lr}
 8010ade:	4604      	mov	r4, r0
 8010ae0:	f7ff fff0 	bl	8010ac4 <__sinit_lock_acquire>
 8010ae4:	69a3      	ldr	r3, [r4, #24]
 8010ae6:	b11b      	cbz	r3, 8010af0 <__sinit+0x14>
 8010ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010aec:	f7ff bff0 	b.w	8010ad0 <__sinit_lock_release>
 8010af0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010af4:	6523      	str	r3, [r4, #80]	; 0x50
 8010af6:	4b13      	ldr	r3, [pc, #76]	; (8010b44 <__sinit+0x68>)
 8010af8:	4a13      	ldr	r2, [pc, #76]	; (8010b48 <__sinit+0x6c>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	62a2      	str	r2, [r4, #40]	; 0x28
 8010afe:	42a3      	cmp	r3, r4
 8010b00:	bf04      	itt	eq
 8010b02:	2301      	moveq	r3, #1
 8010b04:	61a3      	streq	r3, [r4, #24]
 8010b06:	4620      	mov	r0, r4
 8010b08:	f000 f820 	bl	8010b4c <__sfp>
 8010b0c:	6060      	str	r0, [r4, #4]
 8010b0e:	4620      	mov	r0, r4
 8010b10:	f000 f81c 	bl	8010b4c <__sfp>
 8010b14:	60a0      	str	r0, [r4, #8]
 8010b16:	4620      	mov	r0, r4
 8010b18:	f000 f818 	bl	8010b4c <__sfp>
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	60e0      	str	r0, [r4, #12]
 8010b20:	2104      	movs	r1, #4
 8010b22:	6860      	ldr	r0, [r4, #4]
 8010b24:	f7ff ff82 	bl	8010a2c <std>
 8010b28:	68a0      	ldr	r0, [r4, #8]
 8010b2a:	2201      	movs	r2, #1
 8010b2c:	2109      	movs	r1, #9
 8010b2e:	f7ff ff7d 	bl	8010a2c <std>
 8010b32:	68e0      	ldr	r0, [r4, #12]
 8010b34:	2202      	movs	r2, #2
 8010b36:	2112      	movs	r1, #18
 8010b38:	f7ff ff78 	bl	8010a2c <std>
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	61a3      	str	r3, [r4, #24]
 8010b40:	e7d2      	b.n	8010ae8 <__sinit+0xc>
 8010b42:	bf00      	nop
 8010b44:	08014e5c 	.word	0x08014e5c
 8010b48:	08010a75 	.word	0x08010a75

08010b4c <__sfp>:
 8010b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b4e:	4607      	mov	r7, r0
 8010b50:	f7ff ffac 	bl	8010aac <__sfp_lock_acquire>
 8010b54:	4b1e      	ldr	r3, [pc, #120]	; (8010bd0 <__sfp+0x84>)
 8010b56:	681e      	ldr	r6, [r3, #0]
 8010b58:	69b3      	ldr	r3, [r6, #24]
 8010b5a:	b913      	cbnz	r3, 8010b62 <__sfp+0x16>
 8010b5c:	4630      	mov	r0, r6
 8010b5e:	f7ff ffbd 	bl	8010adc <__sinit>
 8010b62:	3648      	adds	r6, #72	; 0x48
 8010b64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010b68:	3b01      	subs	r3, #1
 8010b6a:	d503      	bpl.n	8010b74 <__sfp+0x28>
 8010b6c:	6833      	ldr	r3, [r6, #0]
 8010b6e:	b30b      	cbz	r3, 8010bb4 <__sfp+0x68>
 8010b70:	6836      	ldr	r6, [r6, #0]
 8010b72:	e7f7      	b.n	8010b64 <__sfp+0x18>
 8010b74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010b78:	b9d5      	cbnz	r5, 8010bb0 <__sfp+0x64>
 8010b7a:	4b16      	ldr	r3, [pc, #88]	; (8010bd4 <__sfp+0x88>)
 8010b7c:	60e3      	str	r3, [r4, #12]
 8010b7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010b82:	6665      	str	r5, [r4, #100]	; 0x64
 8010b84:	f000 f859 	bl	8010c3a <__retarget_lock_init_recursive>
 8010b88:	f7ff ff96 	bl	8010ab8 <__sfp_lock_release>
 8010b8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010b90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010b94:	6025      	str	r5, [r4, #0]
 8010b96:	61a5      	str	r5, [r4, #24]
 8010b98:	2208      	movs	r2, #8
 8010b9a:	4629      	mov	r1, r5
 8010b9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010ba0:	f7ff fc9c 	bl	80104dc <memset>
 8010ba4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010ba8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010bac:	4620      	mov	r0, r4
 8010bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bb0:	3468      	adds	r4, #104	; 0x68
 8010bb2:	e7d9      	b.n	8010b68 <__sfp+0x1c>
 8010bb4:	2104      	movs	r1, #4
 8010bb6:	4638      	mov	r0, r7
 8010bb8:	f7ff ff62 	bl	8010a80 <__sfmoreglue>
 8010bbc:	4604      	mov	r4, r0
 8010bbe:	6030      	str	r0, [r6, #0]
 8010bc0:	2800      	cmp	r0, #0
 8010bc2:	d1d5      	bne.n	8010b70 <__sfp+0x24>
 8010bc4:	f7ff ff78 	bl	8010ab8 <__sfp_lock_release>
 8010bc8:	230c      	movs	r3, #12
 8010bca:	603b      	str	r3, [r7, #0]
 8010bcc:	e7ee      	b.n	8010bac <__sfp+0x60>
 8010bce:	bf00      	nop
 8010bd0:	08014e5c 	.word	0x08014e5c
 8010bd4:	ffff0001 	.word	0xffff0001

08010bd8 <fiprintf>:
 8010bd8:	b40e      	push	{r1, r2, r3}
 8010bda:	b503      	push	{r0, r1, lr}
 8010bdc:	4601      	mov	r1, r0
 8010bde:	ab03      	add	r3, sp, #12
 8010be0:	4805      	ldr	r0, [pc, #20]	; (8010bf8 <fiprintf+0x20>)
 8010be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010be6:	6800      	ldr	r0, [r0, #0]
 8010be8:	9301      	str	r3, [sp, #4]
 8010bea:	f000 fafd 	bl	80111e8 <_vfiprintf_r>
 8010bee:	b002      	add	sp, #8
 8010bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010bf4:	b003      	add	sp, #12
 8010bf6:	4770      	bx	lr
 8010bf8:	20000014 	.word	0x20000014

08010bfc <_fwalk_reent>:
 8010bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c00:	4606      	mov	r6, r0
 8010c02:	4688      	mov	r8, r1
 8010c04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010c08:	2700      	movs	r7, #0
 8010c0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010c0e:	f1b9 0901 	subs.w	r9, r9, #1
 8010c12:	d505      	bpl.n	8010c20 <_fwalk_reent+0x24>
 8010c14:	6824      	ldr	r4, [r4, #0]
 8010c16:	2c00      	cmp	r4, #0
 8010c18:	d1f7      	bne.n	8010c0a <_fwalk_reent+0xe>
 8010c1a:	4638      	mov	r0, r7
 8010c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c20:	89ab      	ldrh	r3, [r5, #12]
 8010c22:	2b01      	cmp	r3, #1
 8010c24:	d907      	bls.n	8010c36 <_fwalk_reent+0x3a>
 8010c26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010c2a:	3301      	adds	r3, #1
 8010c2c:	d003      	beq.n	8010c36 <_fwalk_reent+0x3a>
 8010c2e:	4629      	mov	r1, r5
 8010c30:	4630      	mov	r0, r6
 8010c32:	47c0      	blx	r8
 8010c34:	4307      	orrs	r7, r0
 8010c36:	3568      	adds	r5, #104	; 0x68
 8010c38:	e7e9      	b.n	8010c0e <_fwalk_reent+0x12>

08010c3a <__retarget_lock_init_recursive>:
 8010c3a:	4770      	bx	lr

08010c3c <__retarget_lock_acquire_recursive>:
 8010c3c:	4770      	bx	lr

08010c3e <__retarget_lock_release_recursive>:
 8010c3e:	4770      	bx	lr

08010c40 <__swhatbuf_r>:
 8010c40:	b570      	push	{r4, r5, r6, lr}
 8010c42:	460e      	mov	r6, r1
 8010c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c48:	2900      	cmp	r1, #0
 8010c4a:	b096      	sub	sp, #88	; 0x58
 8010c4c:	4614      	mov	r4, r2
 8010c4e:	461d      	mov	r5, r3
 8010c50:	da08      	bge.n	8010c64 <__swhatbuf_r+0x24>
 8010c52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010c56:	2200      	movs	r2, #0
 8010c58:	602a      	str	r2, [r5, #0]
 8010c5a:	061a      	lsls	r2, r3, #24
 8010c5c:	d410      	bmi.n	8010c80 <__swhatbuf_r+0x40>
 8010c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c62:	e00e      	b.n	8010c82 <__swhatbuf_r+0x42>
 8010c64:	466a      	mov	r2, sp
 8010c66:	f000 fe01 	bl	801186c <_fstat_r>
 8010c6a:	2800      	cmp	r0, #0
 8010c6c:	dbf1      	blt.n	8010c52 <__swhatbuf_r+0x12>
 8010c6e:	9a01      	ldr	r2, [sp, #4]
 8010c70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010c74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010c78:	425a      	negs	r2, r3
 8010c7a:	415a      	adcs	r2, r3
 8010c7c:	602a      	str	r2, [r5, #0]
 8010c7e:	e7ee      	b.n	8010c5e <__swhatbuf_r+0x1e>
 8010c80:	2340      	movs	r3, #64	; 0x40
 8010c82:	2000      	movs	r0, #0
 8010c84:	6023      	str	r3, [r4, #0]
 8010c86:	b016      	add	sp, #88	; 0x58
 8010c88:	bd70      	pop	{r4, r5, r6, pc}
	...

08010c8c <__smakebuf_r>:
 8010c8c:	898b      	ldrh	r3, [r1, #12]
 8010c8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c90:	079d      	lsls	r5, r3, #30
 8010c92:	4606      	mov	r6, r0
 8010c94:	460c      	mov	r4, r1
 8010c96:	d507      	bpl.n	8010ca8 <__smakebuf_r+0x1c>
 8010c98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010c9c:	6023      	str	r3, [r4, #0]
 8010c9e:	6123      	str	r3, [r4, #16]
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	6163      	str	r3, [r4, #20]
 8010ca4:	b002      	add	sp, #8
 8010ca6:	bd70      	pop	{r4, r5, r6, pc}
 8010ca8:	ab01      	add	r3, sp, #4
 8010caa:	466a      	mov	r2, sp
 8010cac:	f7ff ffc8 	bl	8010c40 <__swhatbuf_r>
 8010cb0:	9900      	ldr	r1, [sp, #0]
 8010cb2:	4605      	mov	r5, r0
 8010cb4:	4630      	mov	r0, r6
 8010cb6:	f000 f89d 	bl	8010df4 <_malloc_r>
 8010cba:	b948      	cbnz	r0, 8010cd0 <__smakebuf_r+0x44>
 8010cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cc0:	059a      	lsls	r2, r3, #22
 8010cc2:	d4ef      	bmi.n	8010ca4 <__smakebuf_r+0x18>
 8010cc4:	f023 0303 	bic.w	r3, r3, #3
 8010cc8:	f043 0302 	orr.w	r3, r3, #2
 8010ccc:	81a3      	strh	r3, [r4, #12]
 8010cce:	e7e3      	b.n	8010c98 <__smakebuf_r+0xc>
 8010cd0:	4b0d      	ldr	r3, [pc, #52]	; (8010d08 <__smakebuf_r+0x7c>)
 8010cd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8010cd4:	89a3      	ldrh	r3, [r4, #12]
 8010cd6:	6020      	str	r0, [r4, #0]
 8010cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cdc:	81a3      	strh	r3, [r4, #12]
 8010cde:	9b00      	ldr	r3, [sp, #0]
 8010ce0:	6163      	str	r3, [r4, #20]
 8010ce2:	9b01      	ldr	r3, [sp, #4]
 8010ce4:	6120      	str	r0, [r4, #16]
 8010ce6:	b15b      	cbz	r3, 8010d00 <__smakebuf_r+0x74>
 8010ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010cec:	4630      	mov	r0, r6
 8010cee:	f000 fdcf 	bl	8011890 <_isatty_r>
 8010cf2:	b128      	cbz	r0, 8010d00 <__smakebuf_r+0x74>
 8010cf4:	89a3      	ldrh	r3, [r4, #12]
 8010cf6:	f023 0303 	bic.w	r3, r3, #3
 8010cfa:	f043 0301 	orr.w	r3, r3, #1
 8010cfe:	81a3      	strh	r3, [r4, #12]
 8010d00:	89a0      	ldrh	r0, [r4, #12]
 8010d02:	4305      	orrs	r5, r0
 8010d04:	81a5      	strh	r5, [r4, #12]
 8010d06:	e7cd      	b.n	8010ca4 <__smakebuf_r+0x18>
 8010d08:	08010a75 	.word	0x08010a75

08010d0c <malloc>:
 8010d0c:	4b02      	ldr	r3, [pc, #8]	; (8010d18 <malloc+0xc>)
 8010d0e:	4601      	mov	r1, r0
 8010d10:	6818      	ldr	r0, [r3, #0]
 8010d12:	f000 b86f 	b.w	8010df4 <_malloc_r>
 8010d16:	bf00      	nop
 8010d18:	20000014 	.word	0x20000014

08010d1c <_free_r>:
 8010d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d1e:	2900      	cmp	r1, #0
 8010d20:	d044      	beq.n	8010dac <_free_r+0x90>
 8010d22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d26:	9001      	str	r0, [sp, #4]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	f1a1 0404 	sub.w	r4, r1, #4
 8010d2e:	bfb8      	it	lt
 8010d30:	18e4      	addlt	r4, r4, r3
 8010d32:	f000 fdcf 	bl	80118d4 <__malloc_lock>
 8010d36:	4a1e      	ldr	r2, [pc, #120]	; (8010db0 <_free_r+0x94>)
 8010d38:	9801      	ldr	r0, [sp, #4]
 8010d3a:	6813      	ldr	r3, [r2, #0]
 8010d3c:	b933      	cbnz	r3, 8010d4c <_free_r+0x30>
 8010d3e:	6063      	str	r3, [r4, #4]
 8010d40:	6014      	str	r4, [r2, #0]
 8010d42:	b003      	add	sp, #12
 8010d44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d48:	f000 bdca 	b.w	80118e0 <__malloc_unlock>
 8010d4c:	42a3      	cmp	r3, r4
 8010d4e:	d908      	bls.n	8010d62 <_free_r+0x46>
 8010d50:	6825      	ldr	r5, [r4, #0]
 8010d52:	1961      	adds	r1, r4, r5
 8010d54:	428b      	cmp	r3, r1
 8010d56:	bf01      	itttt	eq
 8010d58:	6819      	ldreq	r1, [r3, #0]
 8010d5a:	685b      	ldreq	r3, [r3, #4]
 8010d5c:	1949      	addeq	r1, r1, r5
 8010d5e:	6021      	streq	r1, [r4, #0]
 8010d60:	e7ed      	b.n	8010d3e <_free_r+0x22>
 8010d62:	461a      	mov	r2, r3
 8010d64:	685b      	ldr	r3, [r3, #4]
 8010d66:	b10b      	cbz	r3, 8010d6c <_free_r+0x50>
 8010d68:	42a3      	cmp	r3, r4
 8010d6a:	d9fa      	bls.n	8010d62 <_free_r+0x46>
 8010d6c:	6811      	ldr	r1, [r2, #0]
 8010d6e:	1855      	adds	r5, r2, r1
 8010d70:	42a5      	cmp	r5, r4
 8010d72:	d10b      	bne.n	8010d8c <_free_r+0x70>
 8010d74:	6824      	ldr	r4, [r4, #0]
 8010d76:	4421      	add	r1, r4
 8010d78:	1854      	adds	r4, r2, r1
 8010d7a:	42a3      	cmp	r3, r4
 8010d7c:	6011      	str	r1, [r2, #0]
 8010d7e:	d1e0      	bne.n	8010d42 <_free_r+0x26>
 8010d80:	681c      	ldr	r4, [r3, #0]
 8010d82:	685b      	ldr	r3, [r3, #4]
 8010d84:	6053      	str	r3, [r2, #4]
 8010d86:	4421      	add	r1, r4
 8010d88:	6011      	str	r1, [r2, #0]
 8010d8a:	e7da      	b.n	8010d42 <_free_r+0x26>
 8010d8c:	d902      	bls.n	8010d94 <_free_r+0x78>
 8010d8e:	230c      	movs	r3, #12
 8010d90:	6003      	str	r3, [r0, #0]
 8010d92:	e7d6      	b.n	8010d42 <_free_r+0x26>
 8010d94:	6825      	ldr	r5, [r4, #0]
 8010d96:	1961      	adds	r1, r4, r5
 8010d98:	428b      	cmp	r3, r1
 8010d9a:	bf04      	itt	eq
 8010d9c:	6819      	ldreq	r1, [r3, #0]
 8010d9e:	685b      	ldreq	r3, [r3, #4]
 8010da0:	6063      	str	r3, [r4, #4]
 8010da2:	bf04      	itt	eq
 8010da4:	1949      	addeq	r1, r1, r5
 8010da6:	6021      	streq	r1, [r4, #0]
 8010da8:	6054      	str	r4, [r2, #4]
 8010daa:	e7ca      	b.n	8010d42 <_free_r+0x26>
 8010dac:	b003      	add	sp, #12
 8010dae:	bd30      	pop	{r4, r5, pc}
 8010db0:	20006964 	.word	0x20006964

08010db4 <sbrk_aligned>:
 8010db4:	b570      	push	{r4, r5, r6, lr}
 8010db6:	4e0e      	ldr	r6, [pc, #56]	; (8010df0 <sbrk_aligned+0x3c>)
 8010db8:	460c      	mov	r4, r1
 8010dba:	6831      	ldr	r1, [r6, #0]
 8010dbc:	4605      	mov	r5, r0
 8010dbe:	b911      	cbnz	r1, 8010dc6 <sbrk_aligned+0x12>
 8010dc0:	f000 fcd6 	bl	8011770 <_sbrk_r>
 8010dc4:	6030      	str	r0, [r6, #0]
 8010dc6:	4621      	mov	r1, r4
 8010dc8:	4628      	mov	r0, r5
 8010dca:	f000 fcd1 	bl	8011770 <_sbrk_r>
 8010dce:	1c43      	adds	r3, r0, #1
 8010dd0:	d00a      	beq.n	8010de8 <sbrk_aligned+0x34>
 8010dd2:	1cc4      	adds	r4, r0, #3
 8010dd4:	f024 0403 	bic.w	r4, r4, #3
 8010dd8:	42a0      	cmp	r0, r4
 8010dda:	d007      	beq.n	8010dec <sbrk_aligned+0x38>
 8010ddc:	1a21      	subs	r1, r4, r0
 8010dde:	4628      	mov	r0, r5
 8010de0:	f000 fcc6 	bl	8011770 <_sbrk_r>
 8010de4:	3001      	adds	r0, #1
 8010de6:	d101      	bne.n	8010dec <sbrk_aligned+0x38>
 8010de8:	f04f 34ff 	mov.w	r4, #4294967295
 8010dec:	4620      	mov	r0, r4
 8010dee:	bd70      	pop	{r4, r5, r6, pc}
 8010df0:	20006968 	.word	0x20006968

08010df4 <_malloc_r>:
 8010df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010df8:	1ccd      	adds	r5, r1, #3
 8010dfa:	f025 0503 	bic.w	r5, r5, #3
 8010dfe:	3508      	adds	r5, #8
 8010e00:	2d0c      	cmp	r5, #12
 8010e02:	bf38      	it	cc
 8010e04:	250c      	movcc	r5, #12
 8010e06:	2d00      	cmp	r5, #0
 8010e08:	4607      	mov	r7, r0
 8010e0a:	db01      	blt.n	8010e10 <_malloc_r+0x1c>
 8010e0c:	42a9      	cmp	r1, r5
 8010e0e:	d905      	bls.n	8010e1c <_malloc_r+0x28>
 8010e10:	230c      	movs	r3, #12
 8010e12:	603b      	str	r3, [r7, #0]
 8010e14:	2600      	movs	r6, #0
 8010e16:	4630      	mov	r0, r6
 8010e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e1c:	4e2e      	ldr	r6, [pc, #184]	; (8010ed8 <_malloc_r+0xe4>)
 8010e1e:	f000 fd59 	bl	80118d4 <__malloc_lock>
 8010e22:	6833      	ldr	r3, [r6, #0]
 8010e24:	461c      	mov	r4, r3
 8010e26:	bb34      	cbnz	r4, 8010e76 <_malloc_r+0x82>
 8010e28:	4629      	mov	r1, r5
 8010e2a:	4638      	mov	r0, r7
 8010e2c:	f7ff ffc2 	bl	8010db4 <sbrk_aligned>
 8010e30:	1c43      	adds	r3, r0, #1
 8010e32:	4604      	mov	r4, r0
 8010e34:	d14d      	bne.n	8010ed2 <_malloc_r+0xde>
 8010e36:	6834      	ldr	r4, [r6, #0]
 8010e38:	4626      	mov	r6, r4
 8010e3a:	2e00      	cmp	r6, #0
 8010e3c:	d140      	bne.n	8010ec0 <_malloc_r+0xcc>
 8010e3e:	6823      	ldr	r3, [r4, #0]
 8010e40:	4631      	mov	r1, r6
 8010e42:	4638      	mov	r0, r7
 8010e44:	eb04 0803 	add.w	r8, r4, r3
 8010e48:	f000 fc92 	bl	8011770 <_sbrk_r>
 8010e4c:	4580      	cmp	r8, r0
 8010e4e:	d13a      	bne.n	8010ec6 <_malloc_r+0xd2>
 8010e50:	6821      	ldr	r1, [r4, #0]
 8010e52:	3503      	adds	r5, #3
 8010e54:	1a6d      	subs	r5, r5, r1
 8010e56:	f025 0503 	bic.w	r5, r5, #3
 8010e5a:	3508      	adds	r5, #8
 8010e5c:	2d0c      	cmp	r5, #12
 8010e5e:	bf38      	it	cc
 8010e60:	250c      	movcc	r5, #12
 8010e62:	4629      	mov	r1, r5
 8010e64:	4638      	mov	r0, r7
 8010e66:	f7ff ffa5 	bl	8010db4 <sbrk_aligned>
 8010e6a:	3001      	adds	r0, #1
 8010e6c:	d02b      	beq.n	8010ec6 <_malloc_r+0xd2>
 8010e6e:	6823      	ldr	r3, [r4, #0]
 8010e70:	442b      	add	r3, r5
 8010e72:	6023      	str	r3, [r4, #0]
 8010e74:	e00e      	b.n	8010e94 <_malloc_r+0xa0>
 8010e76:	6822      	ldr	r2, [r4, #0]
 8010e78:	1b52      	subs	r2, r2, r5
 8010e7a:	d41e      	bmi.n	8010eba <_malloc_r+0xc6>
 8010e7c:	2a0b      	cmp	r2, #11
 8010e7e:	d916      	bls.n	8010eae <_malloc_r+0xba>
 8010e80:	1961      	adds	r1, r4, r5
 8010e82:	42a3      	cmp	r3, r4
 8010e84:	6025      	str	r5, [r4, #0]
 8010e86:	bf18      	it	ne
 8010e88:	6059      	strne	r1, [r3, #4]
 8010e8a:	6863      	ldr	r3, [r4, #4]
 8010e8c:	bf08      	it	eq
 8010e8e:	6031      	streq	r1, [r6, #0]
 8010e90:	5162      	str	r2, [r4, r5]
 8010e92:	604b      	str	r3, [r1, #4]
 8010e94:	4638      	mov	r0, r7
 8010e96:	f104 060b 	add.w	r6, r4, #11
 8010e9a:	f000 fd21 	bl	80118e0 <__malloc_unlock>
 8010e9e:	f026 0607 	bic.w	r6, r6, #7
 8010ea2:	1d23      	adds	r3, r4, #4
 8010ea4:	1af2      	subs	r2, r6, r3
 8010ea6:	d0b6      	beq.n	8010e16 <_malloc_r+0x22>
 8010ea8:	1b9b      	subs	r3, r3, r6
 8010eaa:	50a3      	str	r3, [r4, r2]
 8010eac:	e7b3      	b.n	8010e16 <_malloc_r+0x22>
 8010eae:	6862      	ldr	r2, [r4, #4]
 8010eb0:	42a3      	cmp	r3, r4
 8010eb2:	bf0c      	ite	eq
 8010eb4:	6032      	streq	r2, [r6, #0]
 8010eb6:	605a      	strne	r2, [r3, #4]
 8010eb8:	e7ec      	b.n	8010e94 <_malloc_r+0xa0>
 8010eba:	4623      	mov	r3, r4
 8010ebc:	6864      	ldr	r4, [r4, #4]
 8010ebe:	e7b2      	b.n	8010e26 <_malloc_r+0x32>
 8010ec0:	4634      	mov	r4, r6
 8010ec2:	6876      	ldr	r6, [r6, #4]
 8010ec4:	e7b9      	b.n	8010e3a <_malloc_r+0x46>
 8010ec6:	230c      	movs	r3, #12
 8010ec8:	603b      	str	r3, [r7, #0]
 8010eca:	4638      	mov	r0, r7
 8010ecc:	f000 fd08 	bl	80118e0 <__malloc_unlock>
 8010ed0:	e7a1      	b.n	8010e16 <_malloc_r+0x22>
 8010ed2:	6025      	str	r5, [r4, #0]
 8010ed4:	e7de      	b.n	8010e94 <_malloc_r+0xa0>
 8010ed6:	bf00      	nop
 8010ed8:	20006964 	.word	0x20006964

08010edc <__ssputs_r>:
 8010edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ee0:	688e      	ldr	r6, [r1, #8]
 8010ee2:	429e      	cmp	r6, r3
 8010ee4:	4682      	mov	sl, r0
 8010ee6:	460c      	mov	r4, r1
 8010ee8:	4690      	mov	r8, r2
 8010eea:	461f      	mov	r7, r3
 8010eec:	d838      	bhi.n	8010f60 <__ssputs_r+0x84>
 8010eee:	898a      	ldrh	r2, [r1, #12]
 8010ef0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010ef4:	d032      	beq.n	8010f5c <__ssputs_r+0x80>
 8010ef6:	6825      	ldr	r5, [r4, #0]
 8010ef8:	6909      	ldr	r1, [r1, #16]
 8010efa:	eba5 0901 	sub.w	r9, r5, r1
 8010efe:	6965      	ldr	r5, [r4, #20]
 8010f00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010f04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010f08:	3301      	adds	r3, #1
 8010f0a:	444b      	add	r3, r9
 8010f0c:	106d      	asrs	r5, r5, #1
 8010f0e:	429d      	cmp	r5, r3
 8010f10:	bf38      	it	cc
 8010f12:	461d      	movcc	r5, r3
 8010f14:	0553      	lsls	r3, r2, #21
 8010f16:	d531      	bpl.n	8010f7c <__ssputs_r+0xa0>
 8010f18:	4629      	mov	r1, r5
 8010f1a:	f7ff ff6b 	bl	8010df4 <_malloc_r>
 8010f1e:	4606      	mov	r6, r0
 8010f20:	b950      	cbnz	r0, 8010f38 <__ssputs_r+0x5c>
 8010f22:	230c      	movs	r3, #12
 8010f24:	f8ca 3000 	str.w	r3, [sl]
 8010f28:	89a3      	ldrh	r3, [r4, #12]
 8010f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f2e:	81a3      	strh	r3, [r4, #12]
 8010f30:	f04f 30ff 	mov.w	r0, #4294967295
 8010f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f38:	6921      	ldr	r1, [r4, #16]
 8010f3a:	464a      	mov	r2, r9
 8010f3c:	f7ff faa6 	bl	801048c <memcpy>
 8010f40:	89a3      	ldrh	r3, [r4, #12]
 8010f42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f4a:	81a3      	strh	r3, [r4, #12]
 8010f4c:	6126      	str	r6, [r4, #16]
 8010f4e:	6165      	str	r5, [r4, #20]
 8010f50:	444e      	add	r6, r9
 8010f52:	eba5 0509 	sub.w	r5, r5, r9
 8010f56:	6026      	str	r6, [r4, #0]
 8010f58:	60a5      	str	r5, [r4, #8]
 8010f5a:	463e      	mov	r6, r7
 8010f5c:	42be      	cmp	r6, r7
 8010f5e:	d900      	bls.n	8010f62 <__ssputs_r+0x86>
 8010f60:	463e      	mov	r6, r7
 8010f62:	6820      	ldr	r0, [r4, #0]
 8010f64:	4632      	mov	r2, r6
 8010f66:	4641      	mov	r1, r8
 8010f68:	f7ff fa9e 	bl	80104a8 <memmove>
 8010f6c:	68a3      	ldr	r3, [r4, #8]
 8010f6e:	1b9b      	subs	r3, r3, r6
 8010f70:	60a3      	str	r3, [r4, #8]
 8010f72:	6823      	ldr	r3, [r4, #0]
 8010f74:	4433      	add	r3, r6
 8010f76:	6023      	str	r3, [r4, #0]
 8010f78:	2000      	movs	r0, #0
 8010f7a:	e7db      	b.n	8010f34 <__ssputs_r+0x58>
 8010f7c:	462a      	mov	r2, r5
 8010f7e:	f000 fcb5 	bl	80118ec <_realloc_r>
 8010f82:	4606      	mov	r6, r0
 8010f84:	2800      	cmp	r0, #0
 8010f86:	d1e1      	bne.n	8010f4c <__ssputs_r+0x70>
 8010f88:	6921      	ldr	r1, [r4, #16]
 8010f8a:	4650      	mov	r0, sl
 8010f8c:	f7ff fec6 	bl	8010d1c <_free_r>
 8010f90:	e7c7      	b.n	8010f22 <__ssputs_r+0x46>
	...

08010f94 <_svfiprintf_r>:
 8010f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f98:	4698      	mov	r8, r3
 8010f9a:	898b      	ldrh	r3, [r1, #12]
 8010f9c:	061b      	lsls	r3, r3, #24
 8010f9e:	b09d      	sub	sp, #116	; 0x74
 8010fa0:	4607      	mov	r7, r0
 8010fa2:	460d      	mov	r5, r1
 8010fa4:	4614      	mov	r4, r2
 8010fa6:	d50e      	bpl.n	8010fc6 <_svfiprintf_r+0x32>
 8010fa8:	690b      	ldr	r3, [r1, #16]
 8010faa:	b963      	cbnz	r3, 8010fc6 <_svfiprintf_r+0x32>
 8010fac:	2140      	movs	r1, #64	; 0x40
 8010fae:	f7ff ff21 	bl	8010df4 <_malloc_r>
 8010fb2:	6028      	str	r0, [r5, #0]
 8010fb4:	6128      	str	r0, [r5, #16]
 8010fb6:	b920      	cbnz	r0, 8010fc2 <_svfiprintf_r+0x2e>
 8010fb8:	230c      	movs	r3, #12
 8010fba:	603b      	str	r3, [r7, #0]
 8010fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8010fc0:	e0d1      	b.n	8011166 <_svfiprintf_r+0x1d2>
 8010fc2:	2340      	movs	r3, #64	; 0x40
 8010fc4:	616b      	str	r3, [r5, #20]
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8010fca:	2320      	movs	r3, #32
 8010fcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010fd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8010fd4:	2330      	movs	r3, #48	; 0x30
 8010fd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011180 <_svfiprintf_r+0x1ec>
 8010fda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010fde:	f04f 0901 	mov.w	r9, #1
 8010fe2:	4623      	mov	r3, r4
 8010fe4:	469a      	mov	sl, r3
 8010fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010fea:	b10a      	cbz	r2, 8010ff0 <_svfiprintf_r+0x5c>
 8010fec:	2a25      	cmp	r2, #37	; 0x25
 8010fee:	d1f9      	bne.n	8010fe4 <_svfiprintf_r+0x50>
 8010ff0:	ebba 0b04 	subs.w	fp, sl, r4
 8010ff4:	d00b      	beq.n	801100e <_svfiprintf_r+0x7a>
 8010ff6:	465b      	mov	r3, fp
 8010ff8:	4622      	mov	r2, r4
 8010ffa:	4629      	mov	r1, r5
 8010ffc:	4638      	mov	r0, r7
 8010ffe:	f7ff ff6d 	bl	8010edc <__ssputs_r>
 8011002:	3001      	adds	r0, #1
 8011004:	f000 80aa 	beq.w	801115c <_svfiprintf_r+0x1c8>
 8011008:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801100a:	445a      	add	r2, fp
 801100c:	9209      	str	r2, [sp, #36]	; 0x24
 801100e:	f89a 3000 	ldrb.w	r3, [sl]
 8011012:	2b00      	cmp	r3, #0
 8011014:	f000 80a2 	beq.w	801115c <_svfiprintf_r+0x1c8>
 8011018:	2300      	movs	r3, #0
 801101a:	f04f 32ff 	mov.w	r2, #4294967295
 801101e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011022:	f10a 0a01 	add.w	sl, sl, #1
 8011026:	9304      	str	r3, [sp, #16]
 8011028:	9307      	str	r3, [sp, #28]
 801102a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801102e:	931a      	str	r3, [sp, #104]	; 0x68
 8011030:	4654      	mov	r4, sl
 8011032:	2205      	movs	r2, #5
 8011034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011038:	4851      	ldr	r0, [pc, #324]	; (8011180 <_svfiprintf_r+0x1ec>)
 801103a:	f7ef f8e1 	bl	8000200 <memchr>
 801103e:	9a04      	ldr	r2, [sp, #16]
 8011040:	b9d8      	cbnz	r0, 801107a <_svfiprintf_r+0xe6>
 8011042:	06d0      	lsls	r0, r2, #27
 8011044:	bf44      	itt	mi
 8011046:	2320      	movmi	r3, #32
 8011048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801104c:	0711      	lsls	r1, r2, #28
 801104e:	bf44      	itt	mi
 8011050:	232b      	movmi	r3, #43	; 0x2b
 8011052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011056:	f89a 3000 	ldrb.w	r3, [sl]
 801105a:	2b2a      	cmp	r3, #42	; 0x2a
 801105c:	d015      	beq.n	801108a <_svfiprintf_r+0xf6>
 801105e:	9a07      	ldr	r2, [sp, #28]
 8011060:	4654      	mov	r4, sl
 8011062:	2000      	movs	r0, #0
 8011064:	f04f 0c0a 	mov.w	ip, #10
 8011068:	4621      	mov	r1, r4
 801106a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801106e:	3b30      	subs	r3, #48	; 0x30
 8011070:	2b09      	cmp	r3, #9
 8011072:	d94e      	bls.n	8011112 <_svfiprintf_r+0x17e>
 8011074:	b1b0      	cbz	r0, 80110a4 <_svfiprintf_r+0x110>
 8011076:	9207      	str	r2, [sp, #28]
 8011078:	e014      	b.n	80110a4 <_svfiprintf_r+0x110>
 801107a:	eba0 0308 	sub.w	r3, r0, r8
 801107e:	fa09 f303 	lsl.w	r3, r9, r3
 8011082:	4313      	orrs	r3, r2
 8011084:	9304      	str	r3, [sp, #16]
 8011086:	46a2      	mov	sl, r4
 8011088:	e7d2      	b.n	8011030 <_svfiprintf_r+0x9c>
 801108a:	9b03      	ldr	r3, [sp, #12]
 801108c:	1d19      	adds	r1, r3, #4
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	9103      	str	r1, [sp, #12]
 8011092:	2b00      	cmp	r3, #0
 8011094:	bfbb      	ittet	lt
 8011096:	425b      	neglt	r3, r3
 8011098:	f042 0202 	orrlt.w	r2, r2, #2
 801109c:	9307      	strge	r3, [sp, #28]
 801109e:	9307      	strlt	r3, [sp, #28]
 80110a0:	bfb8      	it	lt
 80110a2:	9204      	strlt	r2, [sp, #16]
 80110a4:	7823      	ldrb	r3, [r4, #0]
 80110a6:	2b2e      	cmp	r3, #46	; 0x2e
 80110a8:	d10c      	bne.n	80110c4 <_svfiprintf_r+0x130>
 80110aa:	7863      	ldrb	r3, [r4, #1]
 80110ac:	2b2a      	cmp	r3, #42	; 0x2a
 80110ae:	d135      	bne.n	801111c <_svfiprintf_r+0x188>
 80110b0:	9b03      	ldr	r3, [sp, #12]
 80110b2:	1d1a      	adds	r2, r3, #4
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	9203      	str	r2, [sp, #12]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	bfb8      	it	lt
 80110bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80110c0:	3402      	adds	r4, #2
 80110c2:	9305      	str	r3, [sp, #20]
 80110c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011190 <_svfiprintf_r+0x1fc>
 80110c8:	7821      	ldrb	r1, [r4, #0]
 80110ca:	2203      	movs	r2, #3
 80110cc:	4650      	mov	r0, sl
 80110ce:	f7ef f897 	bl	8000200 <memchr>
 80110d2:	b140      	cbz	r0, 80110e6 <_svfiprintf_r+0x152>
 80110d4:	2340      	movs	r3, #64	; 0x40
 80110d6:	eba0 000a 	sub.w	r0, r0, sl
 80110da:	fa03 f000 	lsl.w	r0, r3, r0
 80110de:	9b04      	ldr	r3, [sp, #16]
 80110e0:	4303      	orrs	r3, r0
 80110e2:	3401      	adds	r4, #1
 80110e4:	9304      	str	r3, [sp, #16]
 80110e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110ea:	4826      	ldr	r0, [pc, #152]	; (8011184 <_svfiprintf_r+0x1f0>)
 80110ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80110f0:	2206      	movs	r2, #6
 80110f2:	f7ef f885 	bl	8000200 <memchr>
 80110f6:	2800      	cmp	r0, #0
 80110f8:	d038      	beq.n	801116c <_svfiprintf_r+0x1d8>
 80110fa:	4b23      	ldr	r3, [pc, #140]	; (8011188 <_svfiprintf_r+0x1f4>)
 80110fc:	bb1b      	cbnz	r3, 8011146 <_svfiprintf_r+0x1b2>
 80110fe:	9b03      	ldr	r3, [sp, #12]
 8011100:	3307      	adds	r3, #7
 8011102:	f023 0307 	bic.w	r3, r3, #7
 8011106:	3308      	adds	r3, #8
 8011108:	9303      	str	r3, [sp, #12]
 801110a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801110c:	4433      	add	r3, r6
 801110e:	9309      	str	r3, [sp, #36]	; 0x24
 8011110:	e767      	b.n	8010fe2 <_svfiprintf_r+0x4e>
 8011112:	fb0c 3202 	mla	r2, ip, r2, r3
 8011116:	460c      	mov	r4, r1
 8011118:	2001      	movs	r0, #1
 801111a:	e7a5      	b.n	8011068 <_svfiprintf_r+0xd4>
 801111c:	2300      	movs	r3, #0
 801111e:	3401      	adds	r4, #1
 8011120:	9305      	str	r3, [sp, #20]
 8011122:	4619      	mov	r1, r3
 8011124:	f04f 0c0a 	mov.w	ip, #10
 8011128:	4620      	mov	r0, r4
 801112a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801112e:	3a30      	subs	r2, #48	; 0x30
 8011130:	2a09      	cmp	r2, #9
 8011132:	d903      	bls.n	801113c <_svfiprintf_r+0x1a8>
 8011134:	2b00      	cmp	r3, #0
 8011136:	d0c5      	beq.n	80110c4 <_svfiprintf_r+0x130>
 8011138:	9105      	str	r1, [sp, #20]
 801113a:	e7c3      	b.n	80110c4 <_svfiprintf_r+0x130>
 801113c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011140:	4604      	mov	r4, r0
 8011142:	2301      	movs	r3, #1
 8011144:	e7f0      	b.n	8011128 <_svfiprintf_r+0x194>
 8011146:	ab03      	add	r3, sp, #12
 8011148:	9300      	str	r3, [sp, #0]
 801114a:	462a      	mov	r2, r5
 801114c:	4b0f      	ldr	r3, [pc, #60]	; (801118c <_svfiprintf_r+0x1f8>)
 801114e:	a904      	add	r1, sp, #16
 8011150:	4638      	mov	r0, r7
 8011152:	f3af 8000 	nop.w
 8011156:	1c42      	adds	r2, r0, #1
 8011158:	4606      	mov	r6, r0
 801115a:	d1d6      	bne.n	801110a <_svfiprintf_r+0x176>
 801115c:	89ab      	ldrh	r3, [r5, #12]
 801115e:	065b      	lsls	r3, r3, #25
 8011160:	f53f af2c 	bmi.w	8010fbc <_svfiprintf_r+0x28>
 8011164:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011166:	b01d      	add	sp, #116	; 0x74
 8011168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801116c:	ab03      	add	r3, sp, #12
 801116e:	9300      	str	r3, [sp, #0]
 8011170:	462a      	mov	r2, r5
 8011172:	4b06      	ldr	r3, [pc, #24]	; (801118c <_svfiprintf_r+0x1f8>)
 8011174:	a904      	add	r1, sp, #16
 8011176:	4638      	mov	r0, r7
 8011178:	f000 f9d4 	bl	8011524 <_printf_i>
 801117c:	e7eb      	b.n	8011156 <_svfiprintf_r+0x1c2>
 801117e:	bf00      	nop
 8011180:	08014f70 	.word	0x08014f70
 8011184:	08014f7a 	.word	0x08014f7a
 8011188:	00000000 	.word	0x00000000
 801118c:	08010edd 	.word	0x08010edd
 8011190:	08014f76 	.word	0x08014f76

08011194 <__sfputc_r>:
 8011194:	6893      	ldr	r3, [r2, #8]
 8011196:	3b01      	subs	r3, #1
 8011198:	2b00      	cmp	r3, #0
 801119a:	b410      	push	{r4}
 801119c:	6093      	str	r3, [r2, #8]
 801119e:	da08      	bge.n	80111b2 <__sfputc_r+0x1e>
 80111a0:	6994      	ldr	r4, [r2, #24]
 80111a2:	42a3      	cmp	r3, r4
 80111a4:	db01      	blt.n	80111aa <__sfputc_r+0x16>
 80111a6:	290a      	cmp	r1, #10
 80111a8:	d103      	bne.n	80111b2 <__sfputc_r+0x1e>
 80111aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111ae:	f7ff ba9d 	b.w	80106ec <__swbuf_r>
 80111b2:	6813      	ldr	r3, [r2, #0]
 80111b4:	1c58      	adds	r0, r3, #1
 80111b6:	6010      	str	r0, [r2, #0]
 80111b8:	7019      	strb	r1, [r3, #0]
 80111ba:	4608      	mov	r0, r1
 80111bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111c0:	4770      	bx	lr

080111c2 <__sfputs_r>:
 80111c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111c4:	4606      	mov	r6, r0
 80111c6:	460f      	mov	r7, r1
 80111c8:	4614      	mov	r4, r2
 80111ca:	18d5      	adds	r5, r2, r3
 80111cc:	42ac      	cmp	r4, r5
 80111ce:	d101      	bne.n	80111d4 <__sfputs_r+0x12>
 80111d0:	2000      	movs	r0, #0
 80111d2:	e007      	b.n	80111e4 <__sfputs_r+0x22>
 80111d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111d8:	463a      	mov	r2, r7
 80111da:	4630      	mov	r0, r6
 80111dc:	f7ff ffda 	bl	8011194 <__sfputc_r>
 80111e0:	1c43      	adds	r3, r0, #1
 80111e2:	d1f3      	bne.n	80111cc <__sfputs_r+0xa>
 80111e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080111e8 <_vfiprintf_r>:
 80111e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111ec:	460d      	mov	r5, r1
 80111ee:	b09d      	sub	sp, #116	; 0x74
 80111f0:	4614      	mov	r4, r2
 80111f2:	4698      	mov	r8, r3
 80111f4:	4606      	mov	r6, r0
 80111f6:	b118      	cbz	r0, 8011200 <_vfiprintf_r+0x18>
 80111f8:	6983      	ldr	r3, [r0, #24]
 80111fa:	b90b      	cbnz	r3, 8011200 <_vfiprintf_r+0x18>
 80111fc:	f7ff fc6e 	bl	8010adc <__sinit>
 8011200:	4b89      	ldr	r3, [pc, #548]	; (8011428 <_vfiprintf_r+0x240>)
 8011202:	429d      	cmp	r5, r3
 8011204:	d11b      	bne.n	801123e <_vfiprintf_r+0x56>
 8011206:	6875      	ldr	r5, [r6, #4]
 8011208:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801120a:	07d9      	lsls	r1, r3, #31
 801120c:	d405      	bmi.n	801121a <_vfiprintf_r+0x32>
 801120e:	89ab      	ldrh	r3, [r5, #12]
 8011210:	059a      	lsls	r2, r3, #22
 8011212:	d402      	bmi.n	801121a <_vfiprintf_r+0x32>
 8011214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011216:	f7ff fd11 	bl	8010c3c <__retarget_lock_acquire_recursive>
 801121a:	89ab      	ldrh	r3, [r5, #12]
 801121c:	071b      	lsls	r3, r3, #28
 801121e:	d501      	bpl.n	8011224 <_vfiprintf_r+0x3c>
 8011220:	692b      	ldr	r3, [r5, #16]
 8011222:	b9eb      	cbnz	r3, 8011260 <_vfiprintf_r+0x78>
 8011224:	4629      	mov	r1, r5
 8011226:	4630      	mov	r0, r6
 8011228:	f7ff fab2 	bl	8010790 <__swsetup_r>
 801122c:	b1c0      	cbz	r0, 8011260 <_vfiprintf_r+0x78>
 801122e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011230:	07dc      	lsls	r4, r3, #31
 8011232:	d50e      	bpl.n	8011252 <_vfiprintf_r+0x6a>
 8011234:	f04f 30ff 	mov.w	r0, #4294967295
 8011238:	b01d      	add	sp, #116	; 0x74
 801123a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801123e:	4b7b      	ldr	r3, [pc, #492]	; (801142c <_vfiprintf_r+0x244>)
 8011240:	429d      	cmp	r5, r3
 8011242:	d101      	bne.n	8011248 <_vfiprintf_r+0x60>
 8011244:	68b5      	ldr	r5, [r6, #8]
 8011246:	e7df      	b.n	8011208 <_vfiprintf_r+0x20>
 8011248:	4b79      	ldr	r3, [pc, #484]	; (8011430 <_vfiprintf_r+0x248>)
 801124a:	429d      	cmp	r5, r3
 801124c:	bf08      	it	eq
 801124e:	68f5      	ldreq	r5, [r6, #12]
 8011250:	e7da      	b.n	8011208 <_vfiprintf_r+0x20>
 8011252:	89ab      	ldrh	r3, [r5, #12]
 8011254:	0598      	lsls	r0, r3, #22
 8011256:	d4ed      	bmi.n	8011234 <_vfiprintf_r+0x4c>
 8011258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801125a:	f7ff fcf0 	bl	8010c3e <__retarget_lock_release_recursive>
 801125e:	e7e9      	b.n	8011234 <_vfiprintf_r+0x4c>
 8011260:	2300      	movs	r3, #0
 8011262:	9309      	str	r3, [sp, #36]	; 0x24
 8011264:	2320      	movs	r3, #32
 8011266:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801126a:	f8cd 800c 	str.w	r8, [sp, #12]
 801126e:	2330      	movs	r3, #48	; 0x30
 8011270:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011434 <_vfiprintf_r+0x24c>
 8011274:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011278:	f04f 0901 	mov.w	r9, #1
 801127c:	4623      	mov	r3, r4
 801127e:	469a      	mov	sl, r3
 8011280:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011284:	b10a      	cbz	r2, 801128a <_vfiprintf_r+0xa2>
 8011286:	2a25      	cmp	r2, #37	; 0x25
 8011288:	d1f9      	bne.n	801127e <_vfiprintf_r+0x96>
 801128a:	ebba 0b04 	subs.w	fp, sl, r4
 801128e:	d00b      	beq.n	80112a8 <_vfiprintf_r+0xc0>
 8011290:	465b      	mov	r3, fp
 8011292:	4622      	mov	r2, r4
 8011294:	4629      	mov	r1, r5
 8011296:	4630      	mov	r0, r6
 8011298:	f7ff ff93 	bl	80111c2 <__sfputs_r>
 801129c:	3001      	adds	r0, #1
 801129e:	f000 80aa 	beq.w	80113f6 <_vfiprintf_r+0x20e>
 80112a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80112a4:	445a      	add	r2, fp
 80112a6:	9209      	str	r2, [sp, #36]	; 0x24
 80112a8:	f89a 3000 	ldrb.w	r3, [sl]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	f000 80a2 	beq.w	80113f6 <_vfiprintf_r+0x20e>
 80112b2:	2300      	movs	r3, #0
 80112b4:	f04f 32ff 	mov.w	r2, #4294967295
 80112b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80112bc:	f10a 0a01 	add.w	sl, sl, #1
 80112c0:	9304      	str	r3, [sp, #16]
 80112c2:	9307      	str	r3, [sp, #28]
 80112c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80112c8:	931a      	str	r3, [sp, #104]	; 0x68
 80112ca:	4654      	mov	r4, sl
 80112cc:	2205      	movs	r2, #5
 80112ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112d2:	4858      	ldr	r0, [pc, #352]	; (8011434 <_vfiprintf_r+0x24c>)
 80112d4:	f7ee ff94 	bl	8000200 <memchr>
 80112d8:	9a04      	ldr	r2, [sp, #16]
 80112da:	b9d8      	cbnz	r0, 8011314 <_vfiprintf_r+0x12c>
 80112dc:	06d1      	lsls	r1, r2, #27
 80112de:	bf44      	itt	mi
 80112e0:	2320      	movmi	r3, #32
 80112e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112e6:	0713      	lsls	r3, r2, #28
 80112e8:	bf44      	itt	mi
 80112ea:	232b      	movmi	r3, #43	; 0x2b
 80112ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112f0:	f89a 3000 	ldrb.w	r3, [sl]
 80112f4:	2b2a      	cmp	r3, #42	; 0x2a
 80112f6:	d015      	beq.n	8011324 <_vfiprintf_r+0x13c>
 80112f8:	9a07      	ldr	r2, [sp, #28]
 80112fa:	4654      	mov	r4, sl
 80112fc:	2000      	movs	r0, #0
 80112fe:	f04f 0c0a 	mov.w	ip, #10
 8011302:	4621      	mov	r1, r4
 8011304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011308:	3b30      	subs	r3, #48	; 0x30
 801130a:	2b09      	cmp	r3, #9
 801130c:	d94e      	bls.n	80113ac <_vfiprintf_r+0x1c4>
 801130e:	b1b0      	cbz	r0, 801133e <_vfiprintf_r+0x156>
 8011310:	9207      	str	r2, [sp, #28]
 8011312:	e014      	b.n	801133e <_vfiprintf_r+0x156>
 8011314:	eba0 0308 	sub.w	r3, r0, r8
 8011318:	fa09 f303 	lsl.w	r3, r9, r3
 801131c:	4313      	orrs	r3, r2
 801131e:	9304      	str	r3, [sp, #16]
 8011320:	46a2      	mov	sl, r4
 8011322:	e7d2      	b.n	80112ca <_vfiprintf_r+0xe2>
 8011324:	9b03      	ldr	r3, [sp, #12]
 8011326:	1d19      	adds	r1, r3, #4
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	9103      	str	r1, [sp, #12]
 801132c:	2b00      	cmp	r3, #0
 801132e:	bfbb      	ittet	lt
 8011330:	425b      	neglt	r3, r3
 8011332:	f042 0202 	orrlt.w	r2, r2, #2
 8011336:	9307      	strge	r3, [sp, #28]
 8011338:	9307      	strlt	r3, [sp, #28]
 801133a:	bfb8      	it	lt
 801133c:	9204      	strlt	r2, [sp, #16]
 801133e:	7823      	ldrb	r3, [r4, #0]
 8011340:	2b2e      	cmp	r3, #46	; 0x2e
 8011342:	d10c      	bne.n	801135e <_vfiprintf_r+0x176>
 8011344:	7863      	ldrb	r3, [r4, #1]
 8011346:	2b2a      	cmp	r3, #42	; 0x2a
 8011348:	d135      	bne.n	80113b6 <_vfiprintf_r+0x1ce>
 801134a:	9b03      	ldr	r3, [sp, #12]
 801134c:	1d1a      	adds	r2, r3, #4
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	9203      	str	r2, [sp, #12]
 8011352:	2b00      	cmp	r3, #0
 8011354:	bfb8      	it	lt
 8011356:	f04f 33ff 	movlt.w	r3, #4294967295
 801135a:	3402      	adds	r4, #2
 801135c:	9305      	str	r3, [sp, #20]
 801135e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011444 <_vfiprintf_r+0x25c>
 8011362:	7821      	ldrb	r1, [r4, #0]
 8011364:	2203      	movs	r2, #3
 8011366:	4650      	mov	r0, sl
 8011368:	f7ee ff4a 	bl	8000200 <memchr>
 801136c:	b140      	cbz	r0, 8011380 <_vfiprintf_r+0x198>
 801136e:	2340      	movs	r3, #64	; 0x40
 8011370:	eba0 000a 	sub.w	r0, r0, sl
 8011374:	fa03 f000 	lsl.w	r0, r3, r0
 8011378:	9b04      	ldr	r3, [sp, #16]
 801137a:	4303      	orrs	r3, r0
 801137c:	3401      	adds	r4, #1
 801137e:	9304      	str	r3, [sp, #16]
 8011380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011384:	482c      	ldr	r0, [pc, #176]	; (8011438 <_vfiprintf_r+0x250>)
 8011386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801138a:	2206      	movs	r2, #6
 801138c:	f7ee ff38 	bl	8000200 <memchr>
 8011390:	2800      	cmp	r0, #0
 8011392:	d03f      	beq.n	8011414 <_vfiprintf_r+0x22c>
 8011394:	4b29      	ldr	r3, [pc, #164]	; (801143c <_vfiprintf_r+0x254>)
 8011396:	bb1b      	cbnz	r3, 80113e0 <_vfiprintf_r+0x1f8>
 8011398:	9b03      	ldr	r3, [sp, #12]
 801139a:	3307      	adds	r3, #7
 801139c:	f023 0307 	bic.w	r3, r3, #7
 80113a0:	3308      	adds	r3, #8
 80113a2:	9303      	str	r3, [sp, #12]
 80113a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113a6:	443b      	add	r3, r7
 80113a8:	9309      	str	r3, [sp, #36]	; 0x24
 80113aa:	e767      	b.n	801127c <_vfiprintf_r+0x94>
 80113ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80113b0:	460c      	mov	r4, r1
 80113b2:	2001      	movs	r0, #1
 80113b4:	e7a5      	b.n	8011302 <_vfiprintf_r+0x11a>
 80113b6:	2300      	movs	r3, #0
 80113b8:	3401      	adds	r4, #1
 80113ba:	9305      	str	r3, [sp, #20]
 80113bc:	4619      	mov	r1, r3
 80113be:	f04f 0c0a 	mov.w	ip, #10
 80113c2:	4620      	mov	r0, r4
 80113c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113c8:	3a30      	subs	r2, #48	; 0x30
 80113ca:	2a09      	cmp	r2, #9
 80113cc:	d903      	bls.n	80113d6 <_vfiprintf_r+0x1ee>
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d0c5      	beq.n	801135e <_vfiprintf_r+0x176>
 80113d2:	9105      	str	r1, [sp, #20]
 80113d4:	e7c3      	b.n	801135e <_vfiprintf_r+0x176>
 80113d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80113da:	4604      	mov	r4, r0
 80113dc:	2301      	movs	r3, #1
 80113de:	e7f0      	b.n	80113c2 <_vfiprintf_r+0x1da>
 80113e0:	ab03      	add	r3, sp, #12
 80113e2:	9300      	str	r3, [sp, #0]
 80113e4:	462a      	mov	r2, r5
 80113e6:	4b16      	ldr	r3, [pc, #88]	; (8011440 <_vfiprintf_r+0x258>)
 80113e8:	a904      	add	r1, sp, #16
 80113ea:	4630      	mov	r0, r6
 80113ec:	f3af 8000 	nop.w
 80113f0:	4607      	mov	r7, r0
 80113f2:	1c78      	adds	r0, r7, #1
 80113f4:	d1d6      	bne.n	80113a4 <_vfiprintf_r+0x1bc>
 80113f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80113f8:	07d9      	lsls	r1, r3, #31
 80113fa:	d405      	bmi.n	8011408 <_vfiprintf_r+0x220>
 80113fc:	89ab      	ldrh	r3, [r5, #12]
 80113fe:	059a      	lsls	r2, r3, #22
 8011400:	d402      	bmi.n	8011408 <_vfiprintf_r+0x220>
 8011402:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011404:	f7ff fc1b 	bl	8010c3e <__retarget_lock_release_recursive>
 8011408:	89ab      	ldrh	r3, [r5, #12]
 801140a:	065b      	lsls	r3, r3, #25
 801140c:	f53f af12 	bmi.w	8011234 <_vfiprintf_r+0x4c>
 8011410:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011412:	e711      	b.n	8011238 <_vfiprintf_r+0x50>
 8011414:	ab03      	add	r3, sp, #12
 8011416:	9300      	str	r3, [sp, #0]
 8011418:	462a      	mov	r2, r5
 801141a:	4b09      	ldr	r3, [pc, #36]	; (8011440 <_vfiprintf_r+0x258>)
 801141c:	a904      	add	r1, sp, #16
 801141e:	4630      	mov	r0, r6
 8011420:	f000 f880 	bl	8011524 <_printf_i>
 8011424:	e7e4      	b.n	80113f0 <_vfiprintf_r+0x208>
 8011426:	bf00      	nop
 8011428:	08014f30 	.word	0x08014f30
 801142c:	08014f50 	.word	0x08014f50
 8011430:	08014f10 	.word	0x08014f10
 8011434:	08014f70 	.word	0x08014f70
 8011438:	08014f7a 	.word	0x08014f7a
 801143c:	00000000 	.word	0x00000000
 8011440:	080111c3 	.word	0x080111c3
 8011444:	08014f76 	.word	0x08014f76

08011448 <_printf_common>:
 8011448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801144c:	4616      	mov	r6, r2
 801144e:	4699      	mov	r9, r3
 8011450:	688a      	ldr	r2, [r1, #8]
 8011452:	690b      	ldr	r3, [r1, #16]
 8011454:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011458:	4293      	cmp	r3, r2
 801145a:	bfb8      	it	lt
 801145c:	4613      	movlt	r3, r2
 801145e:	6033      	str	r3, [r6, #0]
 8011460:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011464:	4607      	mov	r7, r0
 8011466:	460c      	mov	r4, r1
 8011468:	b10a      	cbz	r2, 801146e <_printf_common+0x26>
 801146a:	3301      	adds	r3, #1
 801146c:	6033      	str	r3, [r6, #0]
 801146e:	6823      	ldr	r3, [r4, #0]
 8011470:	0699      	lsls	r1, r3, #26
 8011472:	bf42      	ittt	mi
 8011474:	6833      	ldrmi	r3, [r6, #0]
 8011476:	3302      	addmi	r3, #2
 8011478:	6033      	strmi	r3, [r6, #0]
 801147a:	6825      	ldr	r5, [r4, #0]
 801147c:	f015 0506 	ands.w	r5, r5, #6
 8011480:	d106      	bne.n	8011490 <_printf_common+0x48>
 8011482:	f104 0a19 	add.w	sl, r4, #25
 8011486:	68e3      	ldr	r3, [r4, #12]
 8011488:	6832      	ldr	r2, [r6, #0]
 801148a:	1a9b      	subs	r3, r3, r2
 801148c:	42ab      	cmp	r3, r5
 801148e:	dc26      	bgt.n	80114de <_printf_common+0x96>
 8011490:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011494:	1e13      	subs	r3, r2, #0
 8011496:	6822      	ldr	r2, [r4, #0]
 8011498:	bf18      	it	ne
 801149a:	2301      	movne	r3, #1
 801149c:	0692      	lsls	r2, r2, #26
 801149e:	d42b      	bmi.n	80114f8 <_printf_common+0xb0>
 80114a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80114a4:	4649      	mov	r1, r9
 80114a6:	4638      	mov	r0, r7
 80114a8:	47c0      	blx	r8
 80114aa:	3001      	adds	r0, #1
 80114ac:	d01e      	beq.n	80114ec <_printf_common+0xa4>
 80114ae:	6823      	ldr	r3, [r4, #0]
 80114b0:	68e5      	ldr	r5, [r4, #12]
 80114b2:	6832      	ldr	r2, [r6, #0]
 80114b4:	f003 0306 	and.w	r3, r3, #6
 80114b8:	2b04      	cmp	r3, #4
 80114ba:	bf08      	it	eq
 80114bc:	1aad      	subeq	r5, r5, r2
 80114be:	68a3      	ldr	r3, [r4, #8]
 80114c0:	6922      	ldr	r2, [r4, #16]
 80114c2:	bf0c      	ite	eq
 80114c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80114c8:	2500      	movne	r5, #0
 80114ca:	4293      	cmp	r3, r2
 80114cc:	bfc4      	itt	gt
 80114ce:	1a9b      	subgt	r3, r3, r2
 80114d0:	18ed      	addgt	r5, r5, r3
 80114d2:	2600      	movs	r6, #0
 80114d4:	341a      	adds	r4, #26
 80114d6:	42b5      	cmp	r5, r6
 80114d8:	d11a      	bne.n	8011510 <_printf_common+0xc8>
 80114da:	2000      	movs	r0, #0
 80114dc:	e008      	b.n	80114f0 <_printf_common+0xa8>
 80114de:	2301      	movs	r3, #1
 80114e0:	4652      	mov	r2, sl
 80114e2:	4649      	mov	r1, r9
 80114e4:	4638      	mov	r0, r7
 80114e6:	47c0      	blx	r8
 80114e8:	3001      	adds	r0, #1
 80114ea:	d103      	bne.n	80114f4 <_printf_common+0xac>
 80114ec:	f04f 30ff 	mov.w	r0, #4294967295
 80114f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114f4:	3501      	adds	r5, #1
 80114f6:	e7c6      	b.n	8011486 <_printf_common+0x3e>
 80114f8:	18e1      	adds	r1, r4, r3
 80114fa:	1c5a      	adds	r2, r3, #1
 80114fc:	2030      	movs	r0, #48	; 0x30
 80114fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011502:	4422      	add	r2, r4
 8011504:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011508:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801150c:	3302      	adds	r3, #2
 801150e:	e7c7      	b.n	80114a0 <_printf_common+0x58>
 8011510:	2301      	movs	r3, #1
 8011512:	4622      	mov	r2, r4
 8011514:	4649      	mov	r1, r9
 8011516:	4638      	mov	r0, r7
 8011518:	47c0      	blx	r8
 801151a:	3001      	adds	r0, #1
 801151c:	d0e6      	beq.n	80114ec <_printf_common+0xa4>
 801151e:	3601      	adds	r6, #1
 8011520:	e7d9      	b.n	80114d6 <_printf_common+0x8e>
	...

08011524 <_printf_i>:
 8011524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011528:	7e0f      	ldrb	r7, [r1, #24]
 801152a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801152c:	2f78      	cmp	r7, #120	; 0x78
 801152e:	4691      	mov	r9, r2
 8011530:	4680      	mov	r8, r0
 8011532:	460c      	mov	r4, r1
 8011534:	469a      	mov	sl, r3
 8011536:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801153a:	d807      	bhi.n	801154c <_printf_i+0x28>
 801153c:	2f62      	cmp	r7, #98	; 0x62
 801153e:	d80a      	bhi.n	8011556 <_printf_i+0x32>
 8011540:	2f00      	cmp	r7, #0
 8011542:	f000 80d8 	beq.w	80116f6 <_printf_i+0x1d2>
 8011546:	2f58      	cmp	r7, #88	; 0x58
 8011548:	f000 80a3 	beq.w	8011692 <_printf_i+0x16e>
 801154c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011550:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011554:	e03a      	b.n	80115cc <_printf_i+0xa8>
 8011556:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801155a:	2b15      	cmp	r3, #21
 801155c:	d8f6      	bhi.n	801154c <_printf_i+0x28>
 801155e:	a101      	add	r1, pc, #4	; (adr r1, 8011564 <_printf_i+0x40>)
 8011560:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011564:	080115bd 	.word	0x080115bd
 8011568:	080115d1 	.word	0x080115d1
 801156c:	0801154d 	.word	0x0801154d
 8011570:	0801154d 	.word	0x0801154d
 8011574:	0801154d 	.word	0x0801154d
 8011578:	0801154d 	.word	0x0801154d
 801157c:	080115d1 	.word	0x080115d1
 8011580:	0801154d 	.word	0x0801154d
 8011584:	0801154d 	.word	0x0801154d
 8011588:	0801154d 	.word	0x0801154d
 801158c:	0801154d 	.word	0x0801154d
 8011590:	080116dd 	.word	0x080116dd
 8011594:	08011601 	.word	0x08011601
 8011598:	080116bf 	.word	0x080116bf
 801159c:	0801154d 	.word	0x0801154d
 80115a0:	0801154d 	.word	0x0801154d
 80115a4:	080116ff 	.word	0x080116ff
 80115a8:	0801154d 	.word	0x0801154d
 80115ac:	08011601 	.word	0x08011601
 80115b0:	0801154d 	.word	0x0801154d
 80115b4:	0801154d 	.word	0x0801154d
 80115b8:	080116c7 	.word	0x080116c7
 80115bc:	682b      	ldr	r3, [r5, #0]
 80115be:	1d1a      	adds	r2, r3, #4
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	602a      	str	r2, [r5, #0]
 80115c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80115c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80115cc:	2301      	movs	r3, #1
 80115ce:	e0a3      	b.n	8011718 <_printf_i+0x1f4>
 80115d0:	6820      	ldr	r0, [r4, #0]
 80115d2:	6829      	ldr	r1, [r5, #0]
 80115d4:	0606      	lsls	r6, r0, #24
 80115d6:	f101 0304 	add.w	r3, r1, #4
 80115da:	d50a      	bpl.n	80115f2 <_printf_i+0xce>
 80115dc:	680e      	ldr	r6, [r1, #0]
 80115de:	602b      	str	r3, [r5, #0]
 80115e0:	2e00      	cmp	r6, #0
 80115e2:	da03      	bge.n	80115ec <_printf_i+0xc8>
 80115e4:	232d      	movs	r3, #45	; 0x2d
 80115e6:	4276      	negs	r6, r6
 80115e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80115ec:	485e      	ldr	r0, [pc, #376]	; (8011768 <_printf_i+0x244>)
 80115ee:	230a      	movs	r3, #10
 80115f0:	e019      	b.n	8011626 <_printf_i+0x102>
 80115f2:	680e      	ldr	r6, [r1, #0]
 80115f4:	602b      	str	r3, [r5, #0]
 80115f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80115fa:	bf18      	it	ne
 80115fc:	b236      	sxthne	r6, r6
 80115fe:	e7ef      	b.n	80115e0 <_printf_i+0xbc>
 8011600:	682b      	ldr	r3, [r5, #0]
 8011602:	6820      	ldr	r0, [r4, #0]
 8011604:	1d19      	adds	r1, r3, #4
 8011606:	6029      	str	r1, [r5, #0]
 8011608:	0601      	lsls	r1, r0, #24
 801160a:	d501      	bpl.n	8011610 <_printf_i+0xec>
 801160c:	681e      	ldr	r6, [r3, #0]
 801160e:	e002      	b.n	8011616 <_printf_i+0xf2>
 8011610:	0646      	lsls	r6, r0, #25
 8011612:	d5fb      	bpl.n	801160c <_printf_i+0xe8>
 8011614:	881e      	ldrh	r6, [r3, #0]
 8011616:	4854      	ldr	r0, [pc, #336]	; (8011768 <_printf_i+0x244>)
 8011618:	2f6f      	cmp	r7, #111	; 0x6f
 801161a:	bf0c      	ite	eq
 801161c:	2308      	moveq	r3, #8
 801161e:	230a      	movne	r3, #10
 8011620:	2100      	movs	r1, #0
 8011622:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011626:	6865      	ldr	r5, [r4, #4]
 8011628:	60a5      	str	r5, [r4, #8]
 801162a:	2d00      	cmp	r5, #0
 801162c:	bfa2      	ittt	ge
 801162e:	6821      	ldrge	r1, [r4, #0]
 8011630:	f021 0104 	bicge.w	r1, r1, #4
 8011634:	6021      	strge	r1, [r4, #0]
 8011636:	b90e      	cbnz	r6, 801163c <_printf_i+0x118>
 8011638:	2d00      	cmp	r5, #0
 801163a:	d04d      	beq.n	80116d8 <_printf_i+0x1b4>
 801163c:	4615      	mov	r5, r2
 801163e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011642:	fb03 6711 	mls	r7, r3, r1, r6
 8011646:	5dc7      	ldrb	r7, [r0, r7]
 8011648:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801164c:	4637      	mov	r7, r6
 801164e:	42bb      	cmp	r3, r7
 8011650:	460e      	mov	r6, r1
 8011652:	d9f4      	bls.n	801163e <_printf_i+0x11a>
 8011654:	2b08      	cmp	r3, #8
 8011656:	d10b      	bne.n	8011670 <_printf_i+0x14c>
 8011658:	6823      	ldr	r3, [r4, #0]
 801165a:	07de      	lsls	r6, r3, #31
 801165c:	d508      	bpl.n	8011670 <_printf_i+0x14c>
 801165e:	6923      	ldr	r3, [r4, #16]
 8011660:	6861      	ldr	r1, [r4, #4]
 8011662:	4299      	cmp	r1, r3
 8011664:	bfde      	ittt	le
 8011666:	2330      	movle	r3, #48	; 0x30
 8011668:	f805 3c01 	strble.w	r3, [r5, #-1]
 801166c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011670:	1b52      	subs	r2, r2, r5
 8011672:	6122      	str	r2, [r4, #16]
 8011674:	f8cd a000 	str.w	sl, [sp]
 8011678:	464b      	mov	r3, r9
 801167a:	aa03      	add	r2, sp, #12
 801167c:	4621      	mov	r1, r4
 801167e:	4640      	mov	r0, r8
 8011680:	f7ff fee2 	bl	8011448 <_printf_common>
 8011684:	3001      	adds	r0, #1
 8011686:	d14c      	bne.n	8011722 <_printf_i+0x1fe>
 8011688:	f04f 30ff 	mov.w	r0, #4294967295
 801168c:	b004      	add	sp, #16
 801168e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011692:	4835      	ldr	r0, [pc, #212]	; (8011768 <_printf_i+0x244>)
 8011694:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011698:	6829      	ldr	r1, [r5, #0]
 801169a:	6823      	ldr	r3, [r4, #0]
 801169c:	f851 6b04 	ldr.w	r6, [r1], #4
 80116a0:	6029      	str	r1, [r5, #0]
 80116a2:	061d      	lsls	r5, r3, #24
 80116a4:	d514      	bpl.n	80116d0 <_printf_i+0x1ac>
 80116a6:	07df      	lsls	r7, r3, #31
 80116a8:	bf44      	itt	mi
 80116aa:	f043 0320 	orrmi.w	r3, r3, #32
 80116ae:	6023      	strmi	r3, [r4, #0]
 80116b0:	b91e      	cbnz	r6, 80116ba <_printf_i+0x196>
 80116b2:	6823      	ldr	r3, [r4, #0]
 80116b4:	f023 0320 	bic.w	r3, r3, #32
 80116b8:	6023      	str	r3, [r4, #0]
 80116ba:	2310      	movs	r3, #16
 80116bc:	e7b0      	b.n	8011620 <_printf_i+0xfc>
 80116be:	6823      	ldr	r3, [r4, #0]
 80116c0:	f043 0320 	orr.w	r3, r3, #32
 80116c4:	6023      	str	r3, [r4, #0]
 80116c6:	2378      	movs	r3, #120	; 0x78
 80116c8:	4828      	ldr	r0, [pc, #160]	; (801176c <_printf_i+0x248>)
 80116ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80116ce:	e7e3      	b.n	8011698 <_printf_i+0x174>
 80116d0:	0659      	lsls	r1, r3, #25
 80116d2:	bf48      	it	mi
 80116d4:	b2b6      	uxthmi	r6, r6
 80116d6:	e7e6      	b.n	80116a6 <_printf_i+0x182>
 80116d8:	4615      	mov	r5, r2
 80116da:	e7bb      	b.n	8011654 <_printf_i+0x130>
 80116dc:	682b      	ldr	r3, [r5, #0]
 80116de:	6826      	ldr	r6, [r4, #0]
 80116e0:	6961      	ldr	r1, [r4, #20]
 80116e2:	1d18      	adds	r0, r3, #4
 80116e4:	6028      	str	r0, [r5, #0]
 80116e6:	0635      	lsls	r5, r6, #24
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	d501      	bpl.n	80116f0 <_printf_i+0x1cc>
 80116ec:	6019      	str	r1, [r3, #0]
 80116ee:	e002      	b.n	80116f6 <_printf_i+0x1d2>
 80116f0:	0670      	lsls	r0, r6, #25
 80116f2:	d5fb      	bpl.n	80116ec <_printf_i+0x1c8>
 80116f4:	8019      	strh	r1, [r3, #0]
 80116f6:	2300      	movs	r3, #0
 80116f8:	6123      	str	r3, [r4, #16]
 80116fa:	4615      	mov	r5, r2
 80116fc:	e7ba      	b.n	8011674 <_printf_i+0x150>
 80116fe:	682b      	ldr	r3, [r5, #0]
 8011700:	1d1a      	adds	r2, r3, #4
 8011702:	602a      	str	r2, [r5, #0]
 8011704:	681d      	ldr	r5, [r3, #0]
 8011706:	6862      	ldr	r2, [r4, #4]
 8011708:	2100      	movs	r1, #0
 801170a:	4628      	mov	r0, r5
 801170c:	f7ee fd78 	bl	8000200 <memchr>
 8011710:	b108      	cbz	r0, 8011716 <_printf_i+0x1f2>
 8011712:	1b40      	subs	r0, r0, r5
 8011714:	6060      	str	r0, [r4, #4]
 8011716:	6863      	ldr	r3, [r4, #4]
 8011718:	6123      	str	r3, [r4, #16]
 801171a:	2300      	movs	r3, #0
 801171c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011720:	e7a8      	b.n	8011674 <_printf_i+0x150>
 8011722:	6923      	ldr	r3, [r4, #16]
 8011724:	462a      	mov	r2, r5
 8011726:	4649      	mov	r1, r9
 8011728:	4640      	mov	r0, r8
 801172a:	47d0      	blx	sl
 801172c:	3001      	adds	r0, #1
 801172e:	d0ab      	beq.n	8011688 <_printf_i+0x164>
 8011730:	6823      	ldr	r3, [r4, #0]
 8011732:	079b      	lsls	r3, r3, #30
 8011734:	d413      	bmi.n	801175e <_printf_i+0x23a>
 8011736:	68e0      	ldr	r0, [r4, #12]
 8011738:	9b03      	ldr	r3, [sp, #12]
 801173a:	4298      	cmp	r0, r3
 801173c:	bfb8      	it	lt
 801173e:	4618      	movlt	r0, r3
 8011740:	e7a4      	b.n	801168c <_printf_i+0x168>
 8011742:	2301      	movs	r3, #1
 8011744:	4632      	mov	r2, r6
 8011746:	4649      	mov	r1, r9
 8011748:	4640      	mov	r0, r8
 801174a:	47d0      	blx	sl
 801174c:	3001      	adds	r0, #1
 801174e:	d09b      	beq.n	8011688 <_printf_i+0x164>
 8011750:	3501      	adds	r5, #1
 8011752:	68e3      	ldr	r3, [r4, #12]
 8011754:	9903      	ldr	r1, [sp, #12]
 8011756:	1a5b      	subs	r3, r3, r1
 8011758:	42ab      	cmp	r3, r5
 801175a:	dcf2      	bgt.n	8011742 <_printf_i+0x21e>
 801175c:	e7eb      	b.n	8011736 <_printf_i+0x212>
 801175e:	2500      	movs	r5, #0
 8011760:	f104 0619 	add.w	r6, r4, #25
 8011764:	e7f5      	b.n	8011752 <_printf_i+0x22e>
 8011766:	bf00      	nop
 8011768:	08014f81 	.word	0x08014f81
 801176c:	08014f92 	.word	0x08014f92

08011770 <_sbrk_r>:
 8011770:	b538      	push	{r3, r4, r5, lr}
 8011772:	4d06      	ldr	r5, [pc, #24]	; (801178c <_sbrk_r+0x1c>)
 8011774:	2300      	movs	r3, #0
 8011776:	4604      	mov	r4, r0
 8011778:	4608      	mov	r0, r1
 801177a:	602b      	str	r3, [r5, #0]
 801177c:	f7ef fb3a 	bl	8000df4 <_sbrk>
 8011780:	1c43      	adds	r3, r0, #1
 8011782:	d102      	bne.n	801178a <_sbrk_r+0x1a>
 8011784:	682b      	ldr	r3, [r5, #0]
 8011786:	b103      	cbz	r3, 801178a <_sbrk_r+0x1a>
 8011788:	6023      	str	r3, [r4, #0]
 801178a:	bd38      	pop	{r3, r4, r5, pc}
 801178c:	2000695c 	.word	0x2000695c

08011790 <__sread>:
 8011790:	b510      	push	{r4, lr}
 8011792:	460c      	mov	r4, r1
 8011794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011798:	f000 f8d8 	bl	801194c <_read_r>
 801179c:	2800      	cmp	r0, #0
 801179e:	bfab      	itete	ge
 80117a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80117a2:	89a3      	ldrhlt	r3, [r4, #12]
 80117a4:	181b      	addge	r3, r3, r0
 80117a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80117aa:	bfac      	ite	ge
 80117ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80117ae:	81a3      	strhlt	r3, [r4, #12]
 80117b0:	bd10      	pop	{r4, pc}

080117b2 <__swrite>:
 80117b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117b6:	461f      	mov	r7, r3
 80117b8:	898b      	ldrh	r3, [r1, #12]
 80117ba:	05db      	lsls	r3, r3, #23
 80117bc:	4605      	mov	r5, r0
 80117be:	460c      	mov	r4, r1
 80117c0:	4616      	mov	r6, r2
 80117c2:	d505      	bpl.n	80117d0 <__swrite+0x1e>
 80117c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117c8:	2302      	movs	r3, #2
 80117ca:	2200      	movs	r2, #0
 80117cc:	f000 f870 	bl	80118b0 <_lseek_r>
 80117d0:	89a3      	ldrh	r3, [r4, #12]
 80117d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80117da:	81a3      	strh	r3, [r4, #12]
 80117dc:	4632      	mov	r2, r6
 80117de:	463b      	mov	r3, r7
 80117e0:	4628      	mov	r0, r5
 80117e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117e6:	f000 b817 	b.w	8011818 <_write_r>

080117ea <__sseek>:
 80117ea:	b510      	push	{r4, lr}
 80117ec:	460c      	mov	r4, r1
 80117ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117f2:	f000 f85d 	bl	80118b0 <_lseek_r>
 80117f6:	1c43      	adds	r3, r0, #1
 80117f8:	89a3      	ldrh	r3, [r4, #12]
 80117fa:	bf15      	itete	ne
 80117fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80117fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011802:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011806:	81a3      	strheq	r3, [r4, #12]
 8011808:	bf18      	it	ne
 801180a:	81a3      	strhne	r3, [r4, #12]
 801180c:	bd10      	pop	{r4, pc}

0801180e <__sclose>:
 801180e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011812:	f000 b81b 	b.w	801184c <_close_r>
	...

08011818 <_write_r>:
 8011818:	b538      	push	{r3, r4, r5, lr}
 801181a:	4d07      	ldr	r5, [pc, #28]	; (8011838 <_write_r+0x20>)
 801181c:	4604      	mov	r4, r0
 801181e:	4608      	mov	r0, r1
 8011820:	4611      	mov	r1, r2
 8011822:	2200      	movs	r2, #0
 8011824:	602a      	str	r2, [r5, #0]
 8011826:	461a      	mov	r2, r3
 8011828:	f7ef fa93 	bl	8000d52 <_write>
 801182c:	1c43      	adds	r3, r0, #1
 801182e:	d102      	bne.n	8011836 <_write_r+0x1e>
 8011830:	682b      	ldr	r3, [r5, #0]
 8011832:	b103      	cbz	r3, 8011836 <_write_r+0x1e>
 8011834:	6023      	str	r3, [r4, #0]
 8011836:	bd38      	pop	{r3, r4, r5, pc}
 8011838:	2000695c 	.word	0x2000695c

0801183c <abort>:
 801183c:	b508      	push	{r3, lr}
 801183e:	2006      	movs	r0, #6
 8011840:	f000 f8be 	bl	80119c0 <raise>
 8011844:	2001      	movs	r0, #1
 8011846:	f7ef fa5d 	bl	8000d04 <_exit>
	...

0801184c <_close_r>:
 801184c:	b538      	push	{r3, r4, r5, lr}
 801184e:	4d06      	ldr	r5, [pc, #24]	; (8011868 <_close_r+0x1c>)
 8011850:	2300      	movs	r3, #0
 8011852:	4604      	mov	r4, r0
 8011854:	4608      	mov	r0, r1
 8011856:	602b      	str	r3, [r5, #0]
 8011858:	f7ef fa97 	bl	8000d8a <_close>
 801185c:	1c43      	adds	r3, r0, #1
 801185e:	d102      	bne.n	8011866 <_close_r+0x1a>
 8011860:	682b      	ldr	r3, [r5, #0]
 8011862:	b103      	cbz	r3, 8011866 <_close_r+0x1a>
 8011864:	6023      	str	r3, [r4, #0]
 8011866:	bd38      	pop	{r3, r4, r5, pc}
 8011868:	2000695c 	.word	0x2000695c

0801186c <_fstat_r>:
 801186c:	b538      	push	{r3, r4, r5, lr}
 801186e:	4d07      	ldr	r5, [pc, #28]	; (801188c <_fstat_r+0x20>)
 8011870:	2300      	movs	r3, #0
 8011872:	4604      	mov	r4, r0
 8011874:	4608      	mov	r0, r1
 8011876:	4611      	mov	r1, r2
 8011878:	602b      	str	r3, [r5, #0]
 801187a:	f7ef fa92 	bl	8000da2 <_fstat>
 801187e:	1c43      	adds	r3, r0, #1
 8011880:	d102      	bne.n	8011888 <_fstat_r+0x1c>
 8011882:	682b      	ldr	r3, [r5, #0]
 8011884:	b103      	cbz	r3, 8011888 <_fstat_r+0x1c>
 8011886:	6023      	str	r3, [r4, #0]
 8011888:	bd38      	pop	{r3, r4, r5, pc}
 801188a:	bf00      	nop
 801188c:	2000695c 	.word	0x2000695c

08011890 <_isatty_r>:
 8011890:	b538      	push	{r3, r4, r5, lr}
 8011892:	4d06      	ldr	r5, [pc, #24]	; (80118ac <_isatty_r+0x1c>)
 8011894:	2300      	movs	r3, #0
 8011896:	4604      	mov	r4, r0
 8011898:	4608      	mov	r0, r1
 801189a:	602b      	str	r3, [r5, #0]
 801189c:	f7ef fa91 	bl	8000dc2 <_isatty>
 80118a0:	1c43      	adds	r3, r0, #1
 80118a2:	d102      	bne.n	80118aa <_isatty_r+0x1a>
 80118a4:	682b      	ldr	r3, [r5, #0]
 80118a6:	b103      	cbz	r3, 80118aa <_isatty_r+0x1a>
 80118a8:	6023      	str	r3, [r4, #0]
 80118aa:	bd38      	pop	{r3, r4, r5, pc}
 80118ac:	2000695c 	.word	0x2000695c

080118b0 <_lseek_r>:
 80118b0:	b538      	push	{r3, r4, r5, lr}
 80118b2:	4d07      	ldr	r5, [pc, #28]	; (80118d0 <_lseek_r+0x20>)
 80118b4:	4604      	mov	r4, r0
 80118b6:	4608      	mov	r0, r1
 80118b8:	4611      	mov	r1, r2
 80118ba:	2200      	movs	r2, #0
 80118bc:	602a      	str	r2, [r5, #0]
 80118be:	461a      	mov	r2, r3
 80118c0:	f7ef fa8a 	bl	8000dd8 <_lseek>
 80118c4:	1c43      	adds	r3, r0, #1
 80118c6:	d102      	bne.n	80118ce <_lseek_r+0x1e>
 80118c8:	682b      	ldr	r3, [r5, #0]
 80118ca:	b103      	cbz	r3, 80118ce <_lseek_r+0x1e>
 80118cc:	6023      	str	r3, [r4, #0]
 80118ce:	bd38      	pop	{r3, r4, r5, pc}
 80118d0:	2000695c 	.word	0x2000695c

080118d4 <__malloc_lock>:
 80118d4:	4801      	ldr	r0, [pc, #4]	; (80118dc <__malloc_lock+0x8>)
 80118d6:	f7ff b9b1 	b.w	8010c3c <__retarget_lock_acquire_recursive>
 80118da:	bf00      	nop
 80118dc:	20006960 	.word	0x20006960

080118e0 <__malloc_unlock>:
 80118e0:	4801      	ldr	r0, [pc, #4]	; (80118e8 <__malloc_unlock+0x8>)
 80118e2:	f7ff b9ac 	b.w	8010c3e <__retarget_lock_release_recursive>
 80118e6:	bf00      	nop
 80118e8:	20006960 	.word	0x20006960

080118ec <_realloc_r>:
 80118ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118f0:	4680      	mov	r8, r0
 80118f2:	4614      	mov	r4, r2
 80118f4:	460e      	mov	r6, r1
 80118f6:	b921      	cbnz	r1, 8011902 <_realloc_r+0x16>
 80118f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118fc:	4611      	mov	r1, r2
 80118fe:	f7ff ba79 	b.w	8010df4 <_malloc_r>
 8011902:	b92a      	cbnz	r2, 8011910 <_realloc_r+0x24>
 8011904:	f7ff fa0a 	bl	8010d1c <_free_r>
 8011908:	4625      	mov	r5, r4
 801190a:	4628      	mov	r0, r5
 801190c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011910:	f000 f872 	bl	80119f8 <_malloc_usable_size_r>
 8011914:	4284      	cmp	r4, r0
 8011916:	4607      	mov	r7, r0
 8011918:	d802      	bhi.n	8011920 <_realloc_r+0x34>
 801191a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801191e:	d812      	bhi.n	8011946 <_realloc_r+0x5a>
 8011920:	4621      	mov	r1, r4
 8011922:	4640      	mov	r0, r8
 8011924:	f7ff fa66 	bl	8010df4 <_malloc_r>
 8011928:	4605      	mov	r5, r0
 801192a:	2800      	cmp	r0, #0
 801192c:	d0ed      	beq.n	801190a <_realloc_r+0x1e>
 801192e:	42bc      	cmp	r4, r7
 8011930:	4622      	mov	r2, r4
 8011932:	4631      	mov	r1, r6
 8011934:	bf28      	it	cs
 8011936:	463a      	movcs	r2, r7
 8011938:	f7fe fda8 	bl	801048c <memcpy>
 801193c:	4631      	mov	r1, r6
 801193e:	4640      	mov	r0, r8
 8011940:	f7ff f9ec 	bl	8010d1c <_free_r>
 8011944:	e7e1      	b.n	801190a <_realloc_r+0x1e>
 8011946:	4635      	mov	r5, r6
 8011948:	e7df      	b.n	801190a <_realloc_r+0x1e>
	...

0801194c <_read_r>:
 801194c:	b538      	push	{r3, r4, r5, lr}
 801194e:	4d07      	ldr	r5, [pc, #28]	; (801196c <_read_r+0x20>)
 8011950:	4604      	mov	r4, r0
 8011952:	4608      	mov	r0, r1
 8011954:	4611      	mov	r1, r2
 8011956:	2200      	movs	r2, #0
 8011958:	602a      	str	r2, [r5, #0]
 801195a:	461a      	mov	r2, r3
 801195c:	f7ef f9dc 	bl	8000d18 <_read>
 8011960:	1c43      	adds	r3, r0, #1
 8011962:	d102      	bne.n	801196a <_read_r+0x1e>
 8011964:	682b      	ldr	r3, [r5, #0]
 8011966:	b103      	cbz	r3, 801196a <_read_r+0x1e>
 8011968:	6023      	str	r3, [r4, #0]
 801196a:	bd38      	pop	{r3, r4, r5, pc}
 801196c:	2000695c 	.word	0x2000695c

08011970 <_raise_r>:
 8011970:	291f      	cmp	r1, #31
 8011972:	b538      	push	{r3, r4, r5, lr}
 8011974:	4604      	mov	r4, r0
 8011976:	460d      	mov	r5, r1
 8011978:	d904      	bls.n	8011984 <_raise_r+0x14>
 801197a:	2316      	movs	r3, #22
 801197c:	6003      	str	r3, [r0, #0]
 801197e:	f04f 30ff 	mov.w	r0, #4294967295
 8011982:	bd38      	pop	{r3, r4, r5, pc}
 8011984:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011986:	b112      	cbz	r2, 801198e <_raise_r+0x1e>
 8011988:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801198c:	b94b      	cbnz	r3, 80119a2 <_raise_r+0x32>
 801198e:	4620      	mov	r0, r4
 8011990:	f000 f830 	bl	80119f4 <_getpid_r>
 8011994:	462a      	mov	r2, r5
 8011996:	4601      	mov	r1, r0
 8011998:	4620      	mov	r0, r4
 801199a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801199e:	f000 b817 	b.w	80119d0 <_kill_r>
 80119a2:	2b01      	cmp	r3, #1
 80119a4:	d00a      	beq.n	80119bc <_raise_r+0x4c>
 80119a6:	1c59      	adds	r1, r3, #1
 80119a8:	d103      	bne.n	80119b2 <_raise_r+0x42>
 80119aa:	2316      	movs	r3, #22
 80119ac:	6003      	str	r3, [r0, #0]
 80119ae:	2001      	movs	r0, #1
 80119b0:	e7e7      	b.n	8011982 <_raise_r+0x12>
 80119b2:	2400      	movs	r4, #0
 80119b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80119b8:	4628      	mov	r0, r5
 80119ba:	4798      	blx	r3
 80119bc:	2000      	movs	r0, #0
 80119be:	e7e0      	b.n	8011982 <_raise_r+0x12>

080119c0 <raise>:
 80119c0:	4b02      	ldr	r3, [pc, #8]	; (80119cc <raise+0xc>)
 80119c2:	4601      	mov	r1, r0
 80119c4:	6818      	ldr	r0, [r3, #0]
 80119c6:	f7ff bfd3 	b.w	8011970 <_raise_r>
 80119ca:	bf00      	nop
 80119cc:	20000014 	.word	0x20000014

080119d0 <_kill_r>:
 80119d0:	b538      	push	{r3, r4, r5, lr}
 80119d2:	4d07      	ldr	r5, [pc, #28]	; (80119f0 <_kill_r+0x20>)
 80119d4:	2300      	movs	r3, #0
 80119d6:	4604      	mov	r4, r0
 80119d8:	4608      	mov	r0, r1
 80119da:	4611      	mov	r1, r2
 80119dc:	602b      	str	r3, [r5, #0]
 80119de:	f7ef f97f 	bl	8000ce0 <_kill>
 80119e2:	1c43      	adds	r3, r0, #1
 80119e4:	d102      	bne.n	80119ec <_kill_r+0x1c>
 80119e6:	682b      	ldr	r3, [r5, #0]
 80119e8:	b103      	cbz	r3, 80119ec <_kill_r+0x1c>
 80119ea:	6023      	str	r3, [r4, #0]
 80119ec:	bd38      	pop	{r3, r4, r5, pc}
 80119ee:	bf00      	nop
 80119f0:	2000695c 	.word	0x2000695c

080119f4 <_getpid_r>:
 80119f4:	f7ef b96c 	b.w	8000cd0 <_getpid>

080119f8 <_malloc_usable_size_r>:
 80119f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119fc:	1f18      	subs	r0, r3, #4
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	bfbc      	itt	lt
 8011a02:	580b      	ldrlt	r3, [r1, r0]
 8011a04:	18c0      	addlt	r0, r0, r3
 8011a06:	4770      	bx	lr

08011a08 <_init>:
 8011a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a0a:	bf00      	nop
 8011a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a0e:	bc08      	pop	{r3}
 8011a10:	469e      	mov	lr, r3
 8011a12:	4770      	bx	lr

08011a14 <_fini>:
 8011a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a16:	bf00      	nop
 8011a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a1a:	bc08      	pop	{r3}
 8011a1c:	469e      	mov	lr, r3
 8011a1e:	4770      	bx	lr
